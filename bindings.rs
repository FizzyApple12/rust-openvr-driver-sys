/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_STRING: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 11;
pub const __GLIBCXX__: u32 = 20230528;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _MEMORYFWD_H: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _NEW_ALLOCATOR_H: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const _BASIC_STRING_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const _GLIBCXX_CHARCONV_H: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const _HASH_BYTES_H: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const vr_k_nSteamVRVersionMajor: u32 = 2;
pub const vr_k_nSteamVRVersionMinor: u32 = 5;
pub const vr_k_nSteamVRVersionBuild: u32 = 1;
pub type vr_PropertyTypeTag_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdMatrix34_t {
    pub m: [[f32; 4usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdMatrix34_t"][::std::mem::size_of::<vr_HmdMatrix34_t>() - 48usize];
    ["Alignment of vr_HmdMatrix34_t"][::std::mem::align_of::<vr_HmdMatrix34_t>() - 4usize];
    ["Offset of field: vr_HmdMatrix34_t::m"][::std::mem::offset_of!(vr_HmdMatrix34_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdMatrix33_t {
    pub m: [[f32; 3usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdMatrix33_t"][::std::mem::size_of::<vr_HmdMatrix33_t>() - 36usize];
    ["Alignment of vr_HmdMatrix33_t"][::std::mem::align_of::<vr_HmdMatrix33_t>() - 4usize];
    ["Offset of field: vr_HmdMatrix33_t::m"][::std::mem::offset_of!(vr_HmdMatrix33_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdMatrix44_t {
    pub m: [[f32; 4usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdMatrix44_t"][::std::mem::size_of::<vr_HmdMatrix44_t>() - 64usize];
    ["Alignment of vr_HmdMatrix44_t"][::std::mem::align_of::<vr_HmdMatrix44_t>() - 4usize];
    ["Offset of field: vr_HmdMatrix44_t::m"][::std::mem::offset_of!(vr_HmdMatrix44_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdVector3_t {
    pub v: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdVector3_t"][::std::mem::size_of::<vr_HmdVector3_t>() - 12usize];
    ["Alignment of vr_HmdVector3_t"][::std::mem::align_of::<vr_HmdVector3_t>() - 4usize];
    ["Offset of field: vr_HmdVector3_t::v"][::std::mem::offset_of!(vr_HmdVector3_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdVector4_t {
    pub v: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdVector4_t"][::std::mem::size_of::<vr_HmdVector4_t>() - 16usize];
    ["Alignment of vr_HmdVector4_t"][::std::mem::align_of::<vr_HmdVector4_t>() - 4usize];
    ["Offset of field: vr_HmdVector4_t::v"][::std::mem::offset_of!(vr_HmdVector4_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdVector3d_t {
    pub v: [f64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdVector3d_t"][::std::mem::size_of::<vr_HmdVector3d_t>() - 24usize];
    ["Alignment of vr_HmdVector3d_t"][::std::mem::align_of::<vr_HmdVector3d_t>() - 8usize];
    ["Offset of field: vr_HmdVector3d_t::v"][::std::mem::offset_of!(vr_HmdVector3d_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdVector2_t {
    pub v: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdVector2_t"][::std::mem::size_of::<vr_HmdVector2_t>() - 8usize];
    ["Alignment of vr_HmdVector2_t"][::std::mem::align_of::<vr_HmdVector2_t>() - 4usize];
    ["Offset of field: vr_HmdVector2_t::v"][::std::mem::offset_of!(vr_HmdVector2_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdQuaternion_t {
    pub w: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdQuaternion_t"][::std::mem::size_of::<vr_HmdQuaternion_t>() - 32usize];
    ["Alignment of vr_HmdQuaternion_t"][::std::mem::align_of::<vr_HmdQuaternion_t>() - 8usize];
    ["Offset of field: vr_HmdQuaternion_t::w"]
        [::std::mem::offset_of!(vr_HmdQuaternion_t, w) - 0usize];
    ["Offset of field: vr_HmdQuaternion_t::x"]
        [::std::mem::offset_of!(vr_HmdQuaternion_t, x) - 8usize];
    ["Offset of field: vr_HmdQuaternion_t::y"]
        [::std::mem::offset_of!(vr_HmdQuaternion_t, y) - 16usize];
    ["Offset of field: vr_HmdQuaternion_t::z"]
        [::std::mem::offset_of!(vr_HmdQuaternion_t, z) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdQuaternionf_t {
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdQuaternionf_t"][::std::mem::size_of::<vr_HmdQuaternionf_t>() - 16usize];
    ["Alignment of vr_HmdQuaternionf_t"][::std::mem::align_of::<vr_HmdQuaternionf_t>() - 4usize];
    ["Offset of field: vr_HmdQuaternionf_t::w"]
        [::std::mem::offset_of!(vr_HmdQuaternionf_t, w) - 0usize];
    ["Offset of field: vr_HmdQuaternionf_t::x"]
        [::std::mem::offset_of!(vr_HmdQuaternionf_t, x) - 4usize];
    ["Offset of field: vr_HmdQuaternionf_t::y"]
        [::std::mem::offset_of!(vr_HmdQuaternionf_t, y) - 8usize];
    ["Offset of field: vr_HmdQuaternionf_t::z"]
        [::std::mem::offset_of!(vr_HmdQuaternionf_t, z) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdColor_t {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdColor_t"][::std::mem::size_of::<vr_HmdColor_t>() - 16usize];
    ["Alignment of vr_HmdColor_t"][::std::mem::align_of::<vr_HmdColor_t>() - 4usize];
    ["Offset of field: vr_HmdColor_t::r"][::std::mem::offset_of!(vr_HmdColor_t, r) - 0usize];
    ["Offset of field: vr_HmdColor_t::g"][::std::mem::offset_of!(vr_HmdColor_t, g) - 4usize];
    ["Offset of field: vr_HmdColor_t::b"][::std::mem::offset_of!(vr_HmdColor_t, b) - 8usize];
    ["Offset of field: vr_HmdColor_t::a"][::std::mem::offset_of!(vr_HmdColor_t, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdQuad_t {
    pub vCorners: [vr_HmdVector3_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdQuad_t"][::std::mem::size_of::<vr_HmdQuad_t>() - 48usize];
    ["Alignment of vr_HmdQuad_t"][::std::mem::align_of::<vr_HmdQuad_t>() - 4usize];
    ["Offset of field: vr_HmdQuad_t::vCorners"]
        [::std::mem::offset_of!(vr_HmdQuad_t, vCorners) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HmdRect2_t {
    pub vTopLeft: vr_HmdVector2_t,
    pub vBottomRight: vr_HmdVector2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HmdRect2_t"][::std::mem::size_of::<vr_HmdRect2_t>() - 16usize];
    ["Alignment of vr_HmdRect2_t"][::std::mem::align_of::<vr_HmdRect2_t>() - 4usize];
    ["Offset of field: vr_HmdRect2_t::vTopLeft"]
        [::std::mem::offset_of!(vr_HmdRect2_t, vTopLeft) - 0usize];
    ["Offset of field: vr_HmdRect2_t::vBottomRight"]
        [::std::mem::offset_of!(vr_HmdRect2_t, vBottomRight) - 8usize];
};
#[doc = " Holds the transform for a single bone"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRBoneTransform_t {
    pub position: vr_HmdVector4_t,
    pub orientation: vr_HmdQuaternionf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRBoneTransform_t"][::std::mem::size_of::<vr_VRBoneTransform_t>() - 32usize];
    ["Alignment of vr_VRBoneTransform_t"][::std::mem::align_of::<vr_VRBoneTransform_t>() - 4usize];
    ["Offset of field: vr_VRBoneTransform_t::position"]
        [::std::mem::offset_of!(vr_VRBoneTransform_t, position) - 0usize];
    ["Offset of field: vr_VRBoneTransform_t::orientation"]
        [::std::mem::offset_of!(vr_VRBoneTransform_t, orientation) - 16usize];
};
#[doc = " Used to return the post-distortion UVs for each color channel.\n UVs range from 0 to 1 with 0,0 in the upper left corner of the\n source render target. The 0,0 to 1,1 range covers a single eye."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_DistortionCoordinates_t {
    pub rfRed: [f32; 2usize],
    pub rfGreen: [f32; 2usize],
    pub rfBlue: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_DistortionCoordinates_t"]
        [::std::mem::size_of::<vr_DistortionCoordinates_t>() - 24usize];
    ["Alignment of vr_DistortionCoordinates_t"]
        [::std::mem::align_of::<vr_DistortionCoordinates_t>() - 4usize];
    ["Offset of field: vr_DistortionCoordinates_t::rfRed"]
        [::std::mem::offset_of!(vr_DistortionCoordinates_t, rfRed) - 0usize];
    ["Offset of field: vr_DistortionCoordinates_t::rfGreen"]
        [::std::mem::offset_of!(vr_DistortionCoordinates_t, rfGreen) - 8usize];
    ["Offset of field: vr_DistortionCoordinates_t::rfBlue"]
        [::std::mem::offset_of!(vr_DistortionCoordinates_t, rfBlue) - 16usize];
};
pub const Eye_Left: vr_EVREye = 0;
pub const Eye_Right: vr_EVREye = 1;
pub type vr_EVREye = ::std::os::raw::c_uint;
pub const TextureType_Invalid: vr_ETextureType = -1;
pub const TextureType_DirectX: vr_ETextureType = 0;
pub const TextureType_OpenGL: vr_ETextureType = 1;
pub const TextureType_Vulkan: vr_ETextureType = 2;
pub const TextureType_IOSurface: vr_ETextureType = 3;
pub const TextureType_DirectX12: vr_ETextureType = 4;
pub const TextureType_DXGISharedHandle: vr_ETextureType = 5;
pub const TextureType_Metal: vr_ETextureType = 6;
pub const TextureType_Reserved: vr_ETextureType = 7;
pub type vr_ETextureType = ::std::os::raw::c_int;
pub const ColorSpace_Auto: vr_EColorSpace = 0;
pub const ColorSpace_Gamma: vr_EColorSpace = 1;
pub const ColorSpace_Linear: vr_EColorSpace = 2;
pub type vr_EColorSpace = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_Texture_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: vr_ETextureType,
    pub eColorSpace: vr_EColorSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_Texture_t"][::std::mem::size_of::<vr_Texture_t>() - 16usize];
    ["Alignment of vr_Texture_t"][::std::mem::align_of::<vr_Texture_t>() - 8usize];
    ["Offset of field: vr_Texture_t::handle"]
        [::std::mem::offset_of!(vr_Texture_t, handle) - 0usize];
    ["Offset of field: vr_Texture_t::eType"][::std::mem::offset_of!(vr_Texture_t, eType) - 8usize];
    ["Offset of field: vr_Texture_t::eColorSpace"]
        [::std::mem::offset_of!(vr_Texture_t, eColorSpace) - 12usize];
};
#[doc = " Allows the application to control what part of the provided texture will be used in the\n frame buffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRTextureBounds_t {
    pub uMin: f32,
    pub vMin: f32,
    pub uMax: f32,
    pub vMax: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRTextureBounds_t"][::std::mem::size_of::<vr_VRTextureBounds_t>() - 16usize];
    ["Alignment of vr_VRTextureBounds_t"][::std::mem::align_of::<vr_VRTextureBounds_t>() - 4usize];
    ["Offset of field: vr_VRTextureBounds_t::uMin"]
        [::std::mem::offset_of!(vr_VRTextureBounds_t, uMin) - 0usize];
    ["Offset of field: vr_VRTextureBounds_t::vMin"]
        [::std::mem::offset_of!(vr_VRTextureBounds_t, vMin) - 4usize];
    ["Offset of field: vr_VRTextureBounds_t::uMax"]
        [::std::mem::offset_of!(vr_VRTextureBounds_t, uMax) - 8usize];
    ["Offset of field: vr_VRTextureBounds_t::vMax"]
        [::std::mem::offset_of!(vr_VRTextureBounds_t, vMax) - 12usize];
};
#[doc = " Allows specifying pose used to render provided scene texture (if different from value returned by WaitGetPoses)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRTextureWithPose_t {
    pub _base: vr_Texture_t,
    pub mDeviceToAbsoluteTracking: vr_HmdMatrix34_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRTextureWithPose_t"][::std::mem::size_of::<vr_VRTextureWithPose_t>() - 64usize];
    ["Alignment of vr_VRTextureWithPose_t"]
        [::std::mem::align_of::<vr_VRTextureWithPose_t>() - 8usize];
    ["Offset of field: vr_VRTextureWithPose_t::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(vr_VRTextureWithPose_t, mDeviceToAbsoluteTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRTextureDepthInfo_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub mProjection: vr_HmdMatrix44_t,
    pub vRange: vr_HmdVector2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRTextureDepthInfo_t"][::std::mem::size_of::<vr_VRTextureDepthInfo_t>() - 80usize];
    ["Alignment of vr_VRTextureDepthInfo_t"]
        [::std::mem::align_of::<vr_VRTextureDepthInfo_t>() - 8usize];
    ["Offset of field: vr_VRTextureDepthInfo_t::handle"]
        [::std::mem::offset_of!(vr_VRTextureDepthInfo_t, handle) - 0usize];
    ["Offset of field: vr_VRTextureDepthInfo_t::mProjection"]
        [::std::mem::offset_of!(vr_VRTextureDepthInfo_t, mProjection) - 8usize];
    ["Offset of field: vr_VRTextureDepthInfo_t::vRange"]
        [::std::mem::offset_of!(vr_VRTextureDepthInfo_t, vRange) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRTextureWithDepth_t {
    pub _base: vr_Texture_t,
    pub depth: vr_VRTextureDepthInfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRTextureWithDepth_t"][::std::mem::size_of::<vr_VRTextureWithDepth_t>() - 96usize];
    ["Alignment of vr_VRTextureWithDepth_t"]
        [::std::mem::align_of::<vr_VRTextureWithDepth_t>() - 8usize];
    ["Offset of field: vr_VRTextureWithDepth_t::depth"]
        [::std::mem::offset_of!(vr_VRTextureWithDepth_t, depth) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRTextureWithPoseAndDepth_t {
    pub _base: vr_VRTextureWithPose_t,
    pub depth: vr_VRTextureDepthInfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRTextureWithPoseAndDepth_t"]
        [::std::mem::size_of::<vr_VRTextureWithPoseAndDepth_t>() - 144usize];
    ["Alignment of vr_VRTextureWithPoseAndDepth_t"]
        [::std::mem::align_of::<vr_VRTextureWithPoseAndDepth_t>() - 8usize];
    ["Offset of field: vr_VRTextureWithPoseAndDepth_t::depth"]
        [::std::mem::offset_of!(vr_VRTextureWithPoseAndDepth_t, depth) - 64usize];
};
pub type vr_vrshared_uint64_t = u64;
pub type vr_vrshared_double = f64;
#[doc = " A handle for a spatial anchor.  This handle is only valid during the session it was created in.\n Anchors that live beyond one session should be saved by their string descriptors."]
pub type vr_SpatialAnchorHandle_t = u32;
pub type vr_glSharedTextureHandle_t = *mut ::std::os::raw::c_void;
pub type vr_glInt_t = i32;
pub type vr_glUInt_t = u32;
pub type vr_SharedTextureHandle_t = u64;
pub const TrackingResult_Uninitialized: vr_ETrackingResult = 1;
pub const TrackingResult_Calibrating_InProgress: vr_ETrackingResult = 100;
pub const TrackingResult_Calibrating_OutOfRange: vr_ETrackingResult = 101;
pub const TrackingResult_Running_OK: vr_ETrackingResult = 200;
pub const TrackingResult_Running_OutOfRange: vr_ETrackingResult = 201;
pub const TrackingResult_Fallback_RotationOnly: vr_ETrackingResult = 300;
pub type vr_ETrackingResult = ::std::os::raw::c_uint;
pub type vr_DriverId_t = u32;
pub const vr_k_nDriverNone: u32 = 4294967295;
pub const vr_k_unMaxDriverDebugResponseSize: u32 = 32768;
#[doc = " Used to pass device IDs to API calls"]
pub type vr_TrackedDeviceIndex_t = u32;
pub const vr_k_unTrackedDeviceIndex_Hmd: u32 = 0;
pub const vr_k_unMaxTrackedDeviceCount: u32 = 64;
pub const vr_k_unTrackedDeviceIndexOther: u32 = 4294967294;
pub const vr_k_unTrackedDeviceIndexInvalid: u32 = 4294967295;
pub const TrackedDeviceClass_Invalid: vr_ETrackedDeviceClass = 0;
pub const TrackedDeviceClass_HMD: vr_ETrackedDeviceClass = 1;
pub const TrackedDeviceClass_Controller: vr_ETrackedDeviceClass = 2;
pub const TrackedDeviceClass_GenericTracker: vr_ETrackedDeviceClass = 3;
pub const TrackedDeviceClass_TrackingReference: vr_ETrackedDeviceClass = 4;
pub const TrackedDeviceClass_DisplayRedirect: vr_ETrackedDeviceClass = 5;
pub const TrackedDeviceClass_Max: vr_ETrackedDeviceClass = 6;
#[doc = " Describes what kind of object is being tracked at a given ID"]
pub type vr_ETrackedDeviceClass = ::std::os::raw::c_uint;
pub const TrackedControllerRole_Invalid: vr_ETrackedControllerRole = 0;
pub const TrackedControllerRole_LeftHand: vr_ETrackedControllerRole = 1;
pub const TrackedControllerRole_RightHand: vr_ETrackedControllerRole = 2;
pub const TrackedControllerRole_OptOut: vr_ETrackedControllerRole = 3;
pub const TrackedControllerRole_Treadmill: vr_ETrackedControllerRole = 4;
pub const TrackedControllerRole_Stylus: vr_ETrackedControllerRole = 5;
pub const TrackedControllerRole_Max: vr_ETrackedControllerRole = 5;
#[doc = " Describes what specific role associated with a tracked device"]
pub type vr_ETrackedControllerRole = ::std::os::raw::c_uint;
#[doc = " describes a single pose for a tracked object"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_TrackedDevicePose_t {
    pub mDeviceToAbsoluteTracking: vr_HmdMatrix34_t,
    pub vVelocity: vr_HmdVector3_t,
    pub vAngularVelocity: vr_HmdVector3_t,
    pub eTrackingResult: vr_ETrackingResult,
    pub bPoseIsValid: bool,
    pub bDeviceIsConnected: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_TrackedDevicePose_t"][::std::mem::size_of::<vr_TrackedDevicePose_t>() - 80usize];
    ["Alignment of vr_TrackedDevicePose_t"]
        [::std::mem::align_of::<vr_TrackedDevicePose_t>() - 4usize];
    ["Offset of field: vr_TrackedDevicePose_t::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, mDeviceToAbsoluteTracking) - 0usize];
    ["Offset of field: vr_TrackedDevicePose_t::vVelocity"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, vVelocity) - 48usize];
    ["Offset of field: vr_TrackedDevicePose_t::vAngularVelocity"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, vAngularVelocity) - 60usize];
    ["Offset of field: vr_TrackedDevicePose_t::eTrackingResult"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, eTrackingResult) - 72usize];
    ["Offset of field: vr_TrackedDevicePose_t::bPoseIsValid"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, bPoseIsValid) - 76usize];
    ["Offset of field: vr_TrackedDevicePose_t::bDeviceIsConnected"]
        [::std::mem::offset_of!(vr_TrackedDevicePose_t, bDeviceIsConnected) - 77usize];
};
pub const TrackingUniverseSeated: vr_ETrackingUniverseOrigin = 0;
pub const TrackingUniverseStanding: vr_ETrackingUniverseOrigin = 1;
pub const TrackingUniverseRawAndUncalibrated: vr_ETrackingUniverseOrigin = 2;
#[doc = " Identifies which style of tracking origin the application wants to use\n for the poses it is requesting"]
pub type vr_ETrackingUniverseOrigin = ::std::os::raw::c_uint;
pub const AdditionalRadioFeatures_None: vr_EAdditionalRadioFeatures = 0;
pub const AdditionalRadioFeatures_HTCLinkBox: vr_EAdditionalRadioFeatures = 1;
pub const AdditionalRadioFeatures_InternalDongle: vr_EAdditionalRadioFeatures = 2;
pub const AdditionalRadioFeatures_ExternalDongle: vr_EAdditionalRadioFeatures = 4;
pub type vr_EAdditionalRadioFeatures = ::std::os::raw::c_uint;
pub type vr_WebConsoleHandle_t = u64;
pub type vr_PropertyContainerHandle_t = u64;
pub const vr_k_ulInvalidPropertyContainer: vr_PropertyContainerHandle_t = 0;
pub const vr_k_unInvalidPropertyTag: vr_PropertyTypeTag_t = 0;
pub type vr_DriverHandle_t = vr_PropertyContainerHandle_t;
pub const vr_k_ulInvalidDriverHandle: vr_PropertyContainerHandle_t = 0;
pub const vr_k_unFloatPropertyTag: vr_PropertyTypeTag_t = 1;
pub const vr_k_unInt32PropertyTag: vr_PropertyTypeTag_t = 2;
pub const vr_k_unUint64PropertyTag: vr_PropertyTypeTag_t = 3;
pub const vr_k_unBoolPropertyTag: vr_PropertyTypeTag_t = 4;
pub const vr_k_unStringPropertyTag: vr_PropertyTypeTag_t = 5;
pub const vr_k_unErrorPropertyTag: vr_PropertyTypeTag_t = 6;
pub const vr_k_unDoublePropertyTag: vr_PropertyTypeTag_t = 7;
pub const vr_k_unHmdMatrix34PropertyTag: vr_PropertyTypeTag_t = 20;
pub const vr_k_unHmdMatrix44PropertyTag: vr_PropertyTypeTag_t = 21;
pub const vr_k_unHmdVector3PropertyTag: vr_PropertyTypeTag_t = 22;
pub const vr_k_unHmdVector4PropertyTag: vr_PropertyTypeTag_t = 23;
pub const vr_k_unHmdVector2PropertyTag: vr_PropertyTypeTag_t = 24;
pub const vr_k_unHmdQuadPropertyTag: vr_PropertyTypeTag_t = 25;
pub const vr_k_unHiddenAreaPropertyTag: vr_PropertyTypeTag_t = 30;
pub const vr_k_unPathHandleInfoTag: vr_PropertyTypeTag_t = 31;
pub const vr_k_unActionPropertyTag: vr_PropertyTypeTag_t = 32;
pub const vr_k_unInputValuePropertyTag: vr_PropertyTypeTag_t = 33;
pub const vr_k_unWildcardPropertyTag: vr_PropertyTypeTag_t = 34;
pub const vr_k_unHapticVibrationPropertyTag: vr_PropertyTypeTag_t = 35;
pub const vr_k_unSkeletonPropertyTag: vr_PropertyTypeTag_t = 36;
pub const vr_k_unSpatialAnchorPosePropertyTag: vr_PropertyTypeTag_t = 40;
pub const vr_k_unJsonPropertyTag: vr_PropertyTypeTag_t = 41;
pub const vr_k_unActiveActionSetPropertyTag: vr_PropertyTypeTag_t = 42;
pub const vr_k_unOpenVRInternalReserved_Start: vr_PropertyTypeTag_t = 1000;
pub const vr_k_unOpenVRInternalReserved_End: vr_PropertyTypeTag_t = 10000;
pub const Prop_Invalid: vr_ETrackedDeviceProperty = 0;
pub const Prop_TrackingSystemName_String: vr_ETrackedDeviceProperty = 1000;
pub const Prop_ModelNumber_String: vr_ETrackedDeviceProperty = 1001;
pub const Prop_SerialNumber_String: vr_ETrackedDeviceProperty = 1002;
pub const Prop_RenderModelName_String: vr_ETrackedDeviceProperty = 1003;
pub const Prop_WillDriftInYaw_Bool: vr_ETrackedDeviceProperty = 1004;
pub const Prop_ManufacturerName_String: vr_ETrackedDeviceProperty = 1005;
pub const Prop_TrackingFirmwareVersion_String: vr_ETrackedDeviceProperty = 1006;
pub const Prop_HardwareRevision_String: vr_ETrackedDeviceProperty = 1007;
pub const Prop_AllWirelessDongleDescriptions_String: vr_ETrackedDeviceProperty = 1008;
pub const Prop_ConnectedWirelessDongle_String: vr_ETrackedDeviceProperty = 1009;
pub const Prop_DeviceIsWireless_Bool: vr_ETrackedDeviceProperty = 1010;
pub const Prop_DeviceIsCharging_Bool: vr_ETrackedDeviceProperty = 1011;
pub const Prop_DeviceBatteryPercentage_Float: vr_ETrackedDeviceProperty = 1012;
pub const Prop_StatusDisplayTransform_Matrix34: vr_ETrackedDeviceProperty = 1013;
pub const Prop_Firmware_UpdateAvailable_Bool: vr_ETrackedDeviceProperty = 1014;
pub const Prop_Firmware_ManualUpdate_Bool: vr_ETrackedDeviceProperty = 1015;
pub const Prop_Firmware_ManualUpdateURL_String: vr_ETrackedDeviceProperty = 1016;
pub const Prop_HardwareRevision_Uint64: vr_ETrackedDeviceProperty = 1017;
pub const Prop_FirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 1018;
pub const Prop_FPGAVersion_Uint64: vr_ETrackedDeviceProperty = 1019;
pub const Prop_VRCVersion_Uint64: vr_ETrackedDeviceProperty = 1020;
pub const Prop_RadioVersion_Uint64: vr_ETrackedDeviceProperty = 1021;
pub const Prop_DongleVersion_Uint64: vr_ETrackedDeviceProperty = 1022;
pub const Prop_BlockServerShutdown_Bool: vr_ETrackedDeviceProperty = 1023;
pub const Prop_CanUnifyCoordinateSystemWithHmd_Bool: vr_ETrackedDeviceProperty = 1024;
pub const Prop_ContainsProximitySensor_Bool: vr_ETrackedDeviceProperty = 1025;
pub const Prop_DeviceProvidesBatteryStatus_Bool: vr_ETrackedDeviceProperty = 1026;
pub const Prop_DeviceCanPowerOff_Bool: vr_ETrackedDeviceProperty = 1027;
pub const Prop_Firmware_ProgrammingTarget_String: vr_ETrackedDeviceProperty = 1028;
pub const Prop_DeviceClass_Int32: vr_ETrackedDeviceProperty = 1029;
pub const Prop_HasCamera_Bool: vr_ETrackedDeviceProperty = 1030;
pub const Prop_DriverVersion_String: vr_ETrackedDeviceProperty = 1031;
pub const Prop_Firmware_ForceUpdateRequired_Bool: vr_ETrackedDeviceProperty = 1032;
pub const Prop_ViveSystemButtonFixRequired_Bool: vr_ETrackedDeviceProperty = 1033;
pub const Prop_ParentDriver_Uint64: vr_ETrackedDeviceProperty = 1034;
pub const Prop_ResourceRoot_String: vr_ETrackedDeviceProperty = 1035;
pub const Prop_RegisteredDeviceType_String: vr_ETrackedDeviceProperty = 1036;
pub const Prop_InputProfilePath_String: vr_ETrackedDeviceProperty = 1037;
pub const Prop_NeverTracked_Bool: vr_ETrackedDeviceProperty = 1038;
pub const Prop_NumCameras_Int32: vr_ETrackedDeviceProperty = 1039;
pub const Prop_CameraFrameLayout_Int32: vr_ETrackedDeviceProperty = 1040;
pub const Prop_CameraStreamFormat_Int32: vr_ETrackedDeviceProperty = 1041;
pub const Prop_AdditionalDeviceSettingsPath_String: vr_ETrackedDeviceProperty = 1042;
pub const Prop_Identifiable_Bool: vr_ETrackedDeviceProperty = 1043;
pub const Prop_BootloaderVersion_Uint64: vr_ETrackedDeviceProperty = 1044;
pub const Prop_AdditionalSystemReportData_String: vr_ETrackedDeviceProperty = 1045;
pub const Prop_CompositeFirmwareVersion_String: vr_ETrackedDeviceProperty = 1046;
pub const Prop_Firmware_RemindUpdate_Bool: vr_ETrackedDeviceProperty = 1047;
pub const Prop_PeripheralApplicationVersion_Uint64: vr_ETrackedDeviceProperty = 1048;
pub const Prop_ManufacturerSerialNumber_String: vr_ETrackedDeviceProperty = 1049;
pub const Prop_ComputedSerialNumber_String: vr_ETrackedDeviceProperty = 1050;
pub const Prop_EstimatedDeviceFirstUseTime_Int32: vr_ETrackedDeviceProperty = 1051;
pub const Prop_DevicePowerUsage_Float: vr_ETrackedDeviceProperty = 1052;
pub const Prop_IgnoreMotionForStandby_Bool: vr_ETrackedDeviceProperty = 1053;
pub const Prop_ActualTrackingSystemName_String: vr_ETrackedDeviceProperty = 1054;
pub const Prop_ReportsTimeSinceVSync_Bool: vr_ETrackedDeviceProperty = 2000;
pub const Prop_SecondsFromVsyncToPhotons_Float: vr_ETrackedDeviceProperty = 2001;
pub const Prop_DisplayFrequency_Float: vr_ETrackedDeviceProperty = 2002;
pub const Prop_UserIpdMeters_Float: vr_ETrackedDeviceProperty = 2003;
pub const Prop_CurrentUniverseId_Uint64: vr_ETrackedDeviceProperty = 2004;
pub const Prop_PreviousUniverseId_Uint64: vr_ETrackedDeviceProperty = 2005;
pub const Prop_DisplayFirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 2006;
pub const Prop_IsOnDesktop_Bool: vr_ETrackedDeviceProperty = 2007;
pub const Prop_DisplayMCType_Int32: vr_ETrackedDeviceProperty = 2008;
pub const Prop_DisplayMCOffset_Float: vr_ETrackedDeviceProperty = 2009;
pub const Prop_DisplayMCScale_Float: vr_ETrackedDeviceProperty = 2010;
pub const Prop_EdidVendorID_Int32: vr_ETrackedDeviceProperty = 2011;
pub const Prop_DisplayMCImageLeft_String: vr_ETrackedDeviceProperty = 2012;
pub const Prop_DisplayMCImageRight_String: vr_ETrackedDeviceProperty = 2013;
pub const Prop_DisplayGCBlackClamp_Float: vr_ETrackedDeviceProperty = 2014;
pub const Prop_EdidProductID_Int32: vr_ETrackedDeviceProperty = 2015;
pub const Prop_CameraToHeadTransform_Matrix34: vr_ETrackedDeviceProperty = 2016;
pub const Prop_DisplayGCType_Int32: vr_ETrackedDeviceProperty = 2017;
pub const Prop_DisplayGCOffset_Float: vr_ETrackedDeviceProperty = 2018;
pub const Prop_DisplayGCScale_Float: vr_ETrackedDeviceProperty = 2019;
pub const Prop_DisplayGCPrescale_Float: vr_ETrackedDeviceProperty = 2020;
pub const Prop_DisplayGCImage_String: vr_ETrackedDeviceProperty = 2021;
pub const Prop_LensCenterLeftU_Float: vr_ETrackedDeviceProperty = 2022;
pub const Prop_LensCenterLeftV_Float: vr_ETrackedDeviceProperty = 2023;
pub const Prop_LensCenterRightU_Float: vr_ETrackedDeviceProperty = 2024;
pub const Prop_LensCenterRightV_Float: vr_ETrackedDeviceProperty = 2025;
pub const Prop_UserHeadToEyeDepthMeters_Float: vr_ETrackedDeviceProperty = 2026;
pub const Prop_CameraFirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 2027;
pub const Prop_CameraFirmwareDescription_String: vr_ETrackedDeviceProperty = 2028;
pub const Prop_DisplayFPGAVersion_Uint64: vr_ETrackedDeviceProperty = 2029;
pub const Prop_DisplayBootloaderVersion_Uint64: vr_ETrackedDeviceProperty = 2030;
pub const Prop_DisplayHardwareVersion_Uint64: vr_ETrackedDeviceProperty = 2031;
pub const Prop_AudioFirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 2032;
pub const Prop_CameraCompatibilityMode_Int32: vr_ETrackedDeviceProperty = 2033;
pub const Prop_ScreenshotHorizontalFieldOfViewDegrees_Float: vr_ETrackedDeviceProperty = 2034;
pub const Prop_ScreenshotVerticalFieldOfViewDegrees_Float: vr_ETrackedDeviceProperty = 2035;
pub const Prop_DisplaySuppressed_Bool: vr_ETrackedDeviceProperty = 2036;
pub const Prop_DisplayAllowNightMode_Bool: vr_ETrackedDeviceProperty = 2037;
pub const Prop_DisplayMCImageWidth_Int32: vr_ETrackedDeviceProperty = 2038;
pub const Prop_DisplayMCImageHeight_Int32: vr_ETrackedDeviceProperty = 2039;
pub const Prop_DisplayMCImageNumChannels_Int32: vr_ETrackedDeviceProperty = 2040;
pub const Prop_DisplayMCImageData_Binary: vr_ETrackedDeviceProperty = 2041;
pub const Prop_SecondsFromPhotonsToVblank_Float: vr_ETrackedDeviceProperty = 2042;
pub const Prop_DriverDirectModeSendsVsyncEvents_Bool: vr_ETrackedDeviceProperty = 2043;
pub const Prop_DisplayDebugMode_Bool: vr_ETrackedDeviceProperty = 2044;
pub const Prop_GraphicsAdapterLuid_Uint64: vr_ETrackedDeviceProperty = 2045;
pub const Prop_DriverProvidedChaperonePath_String: vr_ETrackedDeviceProperty = 2048;
pub const Prop_ExpectedTrackingReferenceCount_Int32: vr_ETrackedDeviceProperty = 2049;
pub const Prop_ExpectedControllerCount_Int32: vr_ETrackedDeviceProperty = 2050;
pub const Prop_NamedIconPathControllerLeftDeviceOff_String: vr_ETrackedDeviceProperty = 2051;
pub const Prop_NamedIconPathControllerRightDeviceOff_String: vr_ETrackedDeviceProperty = 2052;
pub const Prop_NamedIconPathTrackingReferenceDeviceOff_String: vr_ETrackedDeviceProperty = 2053;
pub const Prop_DoNotApplyPrediction_Bool: vr_ETrackedDeviceProperty = 2054;
pub const Prop_CameraToHeadTransforms_Matrix34_Array: vr_ETrackedDeviceProperty = 2055;
pub const Prop_DistortionMeshResolution_Int32: vr_ETrackedDeviceProperty = 2056;
pub const Prop_DriverIsDrawingControllers_Bool: vr_ETrackedDeviceProperty = 2057;
pub const Prop_DriverRequestsApplicationPause_Bool: vr_ETrackedDeviceProperty = 2058;
pub const Prop_DriverRequestsReducedRendering_Bool: vr_ETrackedDeviceProperty = 2059;
pub const Prop_MinimumIpdStepMeters_Float: vr_ETrackedDeviceProperty = 2060;
pub const Prop_AudioBridgeFirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 2061;
pub const Prop_ImageBridgeFirmwareVersion_Uint64: vr_ETrackedDeviceProperty = 2062;
pub const Prop_ImuToHeadTransform_Matrix34: vr_ETrackedDeviceProperty = 2063;
pub const Prop_ImuFactoryGyroBias_Vector3: vr_ETrackedDeviceProperty = 2064;
pub const Prop_ImuFactoryGyroScale_Vector3: vr_ETrackedDeviceProperty = 2065;
pub const Prop_ImuFactoryAccelerometerBias_Vector3: vr_ETrackedDeviceProperty = 2066;
pub const Prop_ImuFactoryAccelerometerScale_Vector3: vr_ETrackedDeviceProperty = 2067;
pub const Prop_ConfigurationIncludesLighthouse20Features_Bool: vr_ETrackedDeviceProperty = 2069;
pub const Prop_AdditionalRadioFeatures_Uint64: vr_ETrackedDeviceProperty = 2070;
pub const Prop_CameraWhiteBalance_Vector4_Array: vr_ETrackedDeviceProperty = 2071;
pub const Prop_CameraDistortionFunction_Int32_Array: vr_ETrackedDeviceProperty = 2072;
pub const Prop_CameraDistortionCoefficients_Float_Array: vr_ETrackedDeviceProperty = 2073;
pub const Prop_ExpectedControllerType_String: vr_ETrackedDeviceProperty = 2074;
pub const Prop_HmdTrackingStyle_Int32: vr_ETrackedDeviceProperty = 2075;
pub const Prop_DriverProvidedChaperoneVisibility_Bool: vr_ETrackedDeviceProperty = 2076;
pub const Prop_HmdColumnCorrectionSettingPrefix_String: vr_ETrackedDeviceProperty = 2077;
pub const Prop_CameraSupportsCompatibilityModes_Bool: vr_ETrackedDeviceProperty = 2078;
pub const Prop_SupportsRoomViewDepthProjection_Bool: vr_ETrackedDeviceProperty = 2079;
pub const Prop_DisplayAvailableFrameRates_Float_Array: vr_ETrackedDeviceProperty = 2080;
pub const Prop_DisplaySupportsMultipleFramerates_Bool: vr_ETrackedDeviceProperty = 2081;
pub const Prop_DisplayColorMultLeft_Vector3: vr_ETrackedDeviceProperty = 2082;
pub const Prop_DisplayColorMultRight_Vector3: vr_ETrackedDeviceProperty = 2083;
pub const Prop_DisplaySupportsRuntimeFramerateChange_Bool: vr_ETrackedDeviceProperty = 2084;
pub const Prop_DisplaySupportsAnalogGain_Bool: vr_ETrackedDeviceProperty = 2085;
pub const Prop_DisplayMinAnalogGain_Float: vr_ETrackedDeviceProperty = 2086;
pub const Prop_DisplayMaxAnalogGain_Float: vr_ETrackedDeviceProperty = 2087;
pub const Prop_CameraExposureTime_Float: vr_ETrackedDeviceProperty = 2088;
pub const Prop_CameraGlobalGain_Float: vr_ETrackedDeviceProperty = 2089;
pub const Prop_DashboardScale_Float: vr_ETrackedDeviceProperty = 2091;
pub const Prop_PeerButtonInfo_String: vr_ETrackedDeviceProperty = 2092;
pub const Prop_Hmd_SupportsHDR10_Bool: vr_ETrackedDeviceProperty = 2093;
pub const Prop_Hmd_EnableParallelRenderCameras_Bool: vr_ETrackedDeviceProperty = 2094;
pub const Prop_DriverProvidedChaperoneJson_String: vr_ETrackedDeviceProperty = 2095;
pub const Prop_ForceSystemLayerUseAppPoses_Bool: vr_ETrackedDeviceProperty = 2096;
pub const Prop_IpdUIRangeMinMeters_Float: vr_ETrackedDeviceProperty = 2100;
pub const Prop_IpdUIRangeMaxMeters_Float: vr_ETrackedDeviceProperty = 2101;
pub const Prop_Hmd_SupportsHDCP14LegacyCompat_Bool: vr_ETrackedDeviceProperty = 2102;
pub const Prop_Hmd_SupportsMicMonitoring_Bool: vr_ETrackedDeviceProperty = 2103;
pub const Prop_Hmd_SupportsDisplayPortTrainingMode_Bool: vr_ETrackedDeviceProperty = 2104;
pub const Prop_Hmd_SupportsRoomViewDirect_Bool: vr_ETrackedDeviceProperty = 2105;
pub const Prop_Hmd_SupportsAppThrottling_Bool: vr_ETrackedDeviceProperty = 2106;
pub const Prop_Hmd_SupportsGpuBusMonitoring_Bool: vr_ETrackedDeviceProperty = 2107;
pub const Prop_DriverDisplaysIPDChanges_Bool: vr_ETrackedDeviceProperty = 2108;
pub const Prop_Driver_Reserved_01: vr_ETrackedDeviceProperty = 2109;
pub const Prop_DSCVersion_Int32: vr_ETrackedDeviceProperty = 2110;
pub const Prop_DSCSliceCount_Int32: vr_ETrackedDeviceProperty = 2111;
pub const Prop_DSCBPPx16_Int32: vr_ETrackedDeviceProperty = 2112;
pub const Prop_Hmd_MaxDistortedTextureWidth_Int32: vr_ETrackedDeviceProperty = 2113;
pub const Prop_Hmd_MaxDistortedTextureHeight_Int32: vr_ETrackedDeviceProperty = 2114;
pub const Prop_Hmd_AllowSupersampleFiltering_Bool: vr_ETrackedDeviceProperty = 2115;
pub const Prop_DriverRequestedMuraCorrectionMode_Int32: vr_ETrackedDeviceProperty = 2200;
pub const Prop_DriverRequestedMuraFeather_InnerLeft_Int32: vr_ETrackedDeviceProperty = 2201;
pub const Prop_DriverRequestedMuraFeather_InnerRight_Int32: vr_ETrackedDeviceProperty = 2202;
pub const Prop_DriverRequestedMuraFeather_InnerTop_Int32: vr_ETrackedDeviceProperty = 2203;
pub const Prop_DriverRequestedMuraFeather_InnerBottom_Int32: vr_ETrackedDeviceProperty = 2204;
pub const Prop_DriverRequestedMuraFeather_OuterLeft_Int32: vr_ETrackedDeviceProperty = 2205;
pub const Prop_DriverRequestedMuraFeather_OuterRight_Int32: vr_ETrackedDeviceProperty = 2206;
pub const Prop_DriverRequestedMuraFeather_OuterTop_Int32: vr_ETrackedDeviceProperty = 2207;
pub const Prop_DriverRequestedMuraFeather_OuterBottom_Int32: vr_ETrackedDeviceProperty = 2208;
pub const Prop_Audio_DefaultPlaybackDeviceId_String: vr_ETrackedDeviceProperty = 2300;
pub const Prop_Audio_DefaultRecordingDeviceId_String: vr_ETrackedDeviceProperty = 2301;
pub const Prop_Audio_DefaultPlaybackDeviceVolume_Float: vr_ETrackedDeviceProperty = 2302;
pub const Prop_Audio_SupportsDualSpeakerAndJackOutput_Bool: vr_ETrackedDeviceProperty = 2303;
pub const Prop_Audio_DriverManagesPlaybackVolumeControl_Bool: vr_ETrackedDeviceProperty = 2304;
pub const Prop_Audio_DriverPlaybackVolume_Float: vr_ETrackedDeviceProperty = 2305;
pub const Prop_Audio_DriverPlaybackMute_Bool: vr_ETrackedDeviceProperty = 2306;
pub const Prop_Audio_DriverManagesRecordingVolumeControl_Bool: vr_ETrackedDeviceProperty = 2307;
pub const Prop_Audio_DriverRecordingVolume_Float: vr_ETrackedDeviceProperty = 2308;
pub const Prop_Audio_DriverRecordingMute_Bool: vr_ETrackedDeviceProperty = 2309;
pub const Prop_AttachedDeviceId_String: vr_ETrackedDeviceProperty = 3000;
pub const Prop_SupportedButtons_Uint64: vr_ETrackedDeviceProperty = 3001;
pub const Prop_Axis0Type_Int32: vr_ETrackedDeviceProperty = 3002;
pub const Prop_Axis1Type_Int32: vr_ETrackedDeviceProperty = 3003;
pub const Prop_Axis2Type_Int32: vr_ETrackedDeviceProperty = 3004;
pub const Prop_Axis3Type_Int32: vr_ETrackedDeviceProperty = 3005;
pub const Prop_Axis4Type_Int32: vr_ETrackedDeviceProperty = 3006;
pub const Prop_ControllerRoleHint_Int32: vr_ETrackedDeviceProperty = 3007;
pub const Prop_FieldOfViewLeftDegrees_Float: vr_ETrackedDeviceProperty = 4000;
pub const Prop_FieldOfViewRightDegrees_Float: vr_ETrackedDeviceProperty = 4001;
pub const Prop_FieldOfViewTopDegrees_Float: vr_ETrackedDeviceProperty = 4002;
pub const Prop_FieldOfViewBottomDegrees_Float: vr_ETrackedDeviceProperty = 4003;
pub const Prop_TrackingRangeMinimumMeters_Float: vr_ETrackedDeviceProperty = 4004;
pub const Prop_TrackingRangeMaximumMeters_Float: vr_ETrackedDeviceProperty = 4005;
pub const Prop_ModeLabel_String: vr_ETrackedDeviceProperty = 4006;
pub const Prop_CanWirelessIdentify_Bool: vr_ETrackedDeviceProperty = 4007;
pub const Prop_Nonce_Int32: vr_ETrackedDeviceProperty = 4008;
pub const Prop_IconPathName_String: vr_ETrackedDeviceProperty = 5000;
pub const Prop_NamedIconPathDeviceOff_String: vr_ETrackedDeviceProperty = 5001;
pub const Prop_NamedIconPathDeviceSearching_String: vr_ETrackedDeviceProperty = 5002;
pub const Prop_NamedIconPathDeviceSearchingAlert_String: vr_ETrackedDeviceProperty = 5003;
pub const Prop_NamedIconPathDeviceReady_String: vr_ETrackedDeviceProperty = 5004;
pub const Prop_NamedIconPathDeviceReadyAlert_String: vr_ETrackedDeviceProperty = 5005;
pub const Prop_NamedIconPathDeviceNotReady_String: vr_ETrackedDeviceProperty = 5006;
pub const Prop_NamedIconPathDeviceStandby_String: vr_ETrackedDeviceProperty = 5007;
pub const Prop_NamedIconPathDeviceAlertLow_String: vr_ETrackedDeviceProperty = 5008;
pub const Prop_NamedIconPathDeviceStandbyAlert_String: vr_ETrackedDeviceProperty = 5009;
pub const Prop_DisplayHiddenArea_Binary_Start: vr_ETrackedDeviceProperty = 5100;
pub const Prop_DisplayHiddenArea_Binary_End: vr_ETrackedDeviceProperty = 5150;
pub const Prop_ParentContainer: vr_ETrackedDeviceProperty = 5151;
pub const Prop_OverrideContainer_Uint64: vr_ETrackedDeviceProperty = 5152;
pub const Prop_UserConfigPath_String: vr_ETrackedDeviceProperty = 6000;
pub const Prop_InstallPath_String: vr_ETrackedDeviceProperty = 6001;
pub const Prop_HasDisplayComponent_Bool: vr_ETrackedDeviceProperty = 6002;
pub const Prop_HasControllerComponent_Bool: vr_ETrackedDeviceProperty = 6003;
pub const Prop_HasCameraComponent_Bool: vr_ETrackedDeviceProperty = 6004;
pub const Prop_HasDriverDirectModeComponent_Bool: vr_ETrackedDeviceProperty = 6005;
pub const Prop_HasVirtualDisplayComponent_Bool: vr_ETrackedDeviceProperty = 6006;
pub const Prop_HasSpatialAnchorsSupport_Bool: vr_ETrackedDeviceProperty = 6007;
pub const Prop_SupportsXrTextureSets_Bool: vr_ETrackedDeviceProperty = 6008;
pub const Prop_ControllerType_String: vr_ETrackedDeviceProperty = 7000;
pub const Prop_ControllerHandSelectionPriority_Int32: vr_ETrackedDeviceProperty = 7002;
pub const Prop_VendorSpecific_Reserved_Start: vr_ETrackedDeviceProperty = 10000;
pub const Prop_VendorSpecific_Reserved_End: vr_ETrackedDeviceProperty = 10999;
pub const Prop_TrackedDeviceProperty_Max: vr_ETrackedDeviceProperty = 1000000;
#[doc = " Each entry in this enum represents a property that can be retrieved about a\n tracked device. Many fields are only valid for one ETrackedDeviceClass."]
pub type vr_ETrackedDeviceProperty = ::std::os::raw::c_uint;
#[doc = " No string property will ever be longer than this length"]
pub const vr_k_unMaxPropertyStringSize: u32 = 32768;
pub const TrackedProp_Success: vr_ETrackedPropertyError = 0;
pub const TrackedProp_WrongDataType: vr_ETrackedPropertyError = 1;
pub const TrackedProp_WrongDeviceClass: vr_ETrackedPropertyError = 2;
pub const TrackedProp_BufferTooSmall: vr_ETrackedPropertyError = 3;
pub const TrackedProp_UnknownProperty: vr_ETrackedPropertyError = 4;
pub const TrackedProp_InvalidDevice: vr_ETrackedPropertyError = 5;
pub const TrackedProp_CouldNotContactServer: vr_ETrackedPropertyError = 6;
pub const TrackedProp_ValueNotProvidedByDevice: vr_ETrackedPropertyError = 7;
pub const TrackedProp_StringExceedsMaximumLength: vr_ETrackedPropertyError = 8;
pub const TrackedProp_NotYetAvailable: vr_ETrackedPropertyError = 9;
pub const TrackedProp_PermissionDenied: vr_ETrackedPropertyError = 10;
pub const TrackedProp_InvalidOperation: vr_ETrackedPropertyError = 11;
pub const TrackedProp_CannotWriteToWildcards: vr_ETrackedPropertyError = 12;
pub const TrackedProp_IPCReadFailure: vr_ETrackedPropertyError = 13;
pub const TrackedProp_OutOfMemory: vr_ETrackedPropertyError = 14;
pub const TrackedProp_InvalidContainer: vr_ETrackedPropertyError = 15;
#[doc = " Used to return errors that occur when reading properties."]
pub type vr_ETrackedPropertyError = ::std::os::raw::c_uint;
pub const HmdTrackingStyle_Unknown: vr_EHmdTrackingStyle = 0;
pub const HmdTrackingStyle_Lighthouse: vr_EHmdTrackingStyle = 1;
pub const HmdTrackingStyle_OutsideInCameras: vr_EHmdTrackingStyle = 2;
pub const HmdTrackingStyle_InsideOutCameras: vr_EHmdTrackingStyle = 3;
#[doc = " Used to drive certain text in the UI when talking about the tracking system for the HMD"]
pub type vr_EHmdTrackingStyle = ::std::os::raw::c_uint;
pub type vr_VRActionHandle_t = u64;
pub type vr_VRActionSetHandle_t = u64;
pub type vr_VRInputValueHandle_t = u64;
pub const vr_k_ulInvalidActionHandle: vr_VRActionHandle_t = 0;
pub const vr_k_ulInvalidActionSetHandle: vr_VRActionSetHandle_t = 0;
pub const vr_k_ulInvalidInputValueHandle: vr_VRInputValueHandle_t = 0;
pub const Submit_Default: vr_EVRSubmitFlags = 0;
pub const Submit_LensDistortionAlreadyApplied: vr_EVRSubmitFlags = 1;
pub const Submit_GlRenderBuffer: vr_EVRSubmitFlags = 2;
pub const Submit_Reserved: vr_EVRSubmitFlags = 4;
pub const Submit_TextureWithPose: vr_EVRSubmitFlags = 8;
pub const Submit_TextureWithDepth: vr_EVRSubmitFlags = 16;
pub const Submit_FrameDiscontinuty: vr_EVRSubmitFlags = 32;
pub const Submit_VulkanTextureWithArrayData: vr_EVRSubmitFlags = 64;
pub const Submit_GlArrayTexture: vr_EVRSubmitFlags = 128;
pub const Submit_IsEgl: vr_EVRSubmitFlags = 256;
pub const Submit_Reserved2: vr_EVRSubmitFlags = 32768;
pub const Submit_Reserved3: vr_EVRSubmitFlags = 65536;
#[doc = " Allows the application to control how scene textures are used by the compositor when calling Submit."]
pub type vr_EVRSubmitFlags = ::std::os::raw::c_uint;
#[doc = " Data required for passing Vulkan textures to IVRCompositor::Submit.\n Be sure to call OpenVR_Shutdown before destroying these resources.\n Please see https://github.com/ValveSoftware/openvr/wiki/Vulkan for Vulkan-specific documentation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRVulkanTextureData_t {
    pub m_nImage: u64,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pInstance: *mut VkInstance_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_nQueueFamilyIndex: u32,
    pub m_nWidth: u32,
    pub m_nHeight: u32,
    pub m_nFormat: u32,
    pub m_nSampleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRVulkanTextureData_t"]
        [::std::mem::size_of::<vr_VRVulkanTextureData_t>() - 64usize];
    ["Alignment of vr_VRVulkanTextureData_t"]
        [::std::mem::align_of::<vr_VRVulkanTextureData_t>() - 8usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nImage"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nImage) - 0usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_pDevice"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_pDevice) - 8usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_pPhysicalDevice"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_pPhysicalDevice) - 16usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_pInstance"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_pInstance) - 24usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_pQueue"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_pQueue) - 32usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nQueueFamilyIndex"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nQueueFamilyIndex) - 40usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nWidth"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nWidth) - 44usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nHeight"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nHeight) - 48usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nFormat"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nFormat) - 52usize];
    ["Offset of field: vr_VRVulkanTextureData_t::m_nSampleCount"]
        [::std::mem::offset_of!(vr_VRVulkanTextureData_t, m_nSampleCount) - 56usize];
};
#[doc = " Data required for passing Vulkan texture arrays to IVRCompositor::Submit.\n Be sure to call OpenVR_Shutdown before destroying these resources.\n Please see https://github.com/ValveSoftware/openvr/wiki/Vulkan for Vulkan-specific documentation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRVulkanTextureArrayData_t {
    pub _base: vr_VRVulkanTextureData_t,
    pub m_unArrayIndex: u32,
    pub m_unArraySize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRVulkanTextureArrayData_t"]
        [::std::mem::size_of::<vr_VRVulkanTextureArrayData_t>() - 72usize];
    ["Alignment of vr_VRVulkanTextureArrayData_t"]
        [::std::mem::align_of::<vr_VRVulkanTextureArrayData_t>() - 8usize];
    ["Offset of field: vr_VRVulkanTextureArrayData_t::m_unArrayIndex"]
        [::std::mem::offset_of!(vr_VRVulkanTextureArrayData_t, m_unArrayIndex) - 64usize];
    ["Offset of field: vr_VRVulkanTextureArrayData_t::m_unArraySize"]
        [::std::mem::offset_of!(vr_VRVulkanTextureArrayData_t, m_unArraySize) - 68usize];
};
#[doc = " Data required for passing D3D12 textures to IVRCompositor::Submit.\n Be sure to call OpenVR_Shutdown before destroying these resources."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_D3D12TextureData_t {
    pub m_pResource: *mut ID3D12Resource,
    pub m_pCommandQueue: *mut ID3D12CommandQueue,
    pub m_nNodeMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_D3D12TextureData_t"][::std::mem::size_of::<vr_D3D12TextureData_t>() - 24usize];
    ["Alignment of vr_D3D12TextureData_t"]
        [::std::mem::align_of::<vr_D3D12TextureData_t>() - 8usize];
    ["Offset of field: vr_D3D12TextureData_t::m_pResource"]
        [::std::mem::offset_of!(vr_D3D12TextureData_t, m_pResource) - 0usize];
    ["Offset of field: vr_D3D12TextureData_t::m_pCommandQueue"]
        [::std::mem::offset_of!(vr_D3D12TextureData_t, m_pCommandQueue) - 8usize];
    ["Offset of field: vr_D3D12TextureData_t::m_nNodeMask"]
        [::std::mem::offset_of!(vr_D3D12TextureData_t, m_nNodeMask) - 16usize];
};
pub const VRState_Undefined: vr_EVRState = -1;
pub const VRState_Off: vr_EVRState = 0;
pub const VRState_Searching: vr_EVRState = 1;
pub const VRState_Searching_Alert: vr_EVRState = 2;
pub const VRState_Ready: vr_EVRState = 3;
pub const VRState_Ready_Alert: vr_EVRState = 4;
pub const VRState_NotReady: vr_EVRState = 5;
pub const VRState_Standby: vr_EVRState = 6;
pub const VRState_Ready_Alert_Low: vr_EVRState = 7;
#[doc = " Status of the overall system or tracked objects"]
pub type vr_EVRState = ::std::os::raw::c_int;
pub const VREvent_None: vr_EVREventType = 0;
pub const VREvent_TrackedDeviceActivated: vr_EVREventType = 100;
pub const VREvent_TrackedDeviceDeactivated: vr_EVREventType = 101;
pub const VREvent_TrackedDeviceUpdated: vr_EVREventType = 102;
pub const VREvent_TrackedDeviceUserInteractionStarted: vr_EVREventType = 103;
pub const VREvent_TrackedDeviceUserInteractionEnded: vr_EVREventType = 104;
pub const VREvent_IpdChanged: vr_EVREventType = 105;
pub const VREvent_EnterStandbyMode: vr_EVREventType = 106;
pub const VREvent_LeaveStandbyMode: vr_EVREventType = 107;
pub const VREvent_TrackedDeviceRoleChanged: vr_EVREventType = 108;
pub const VREvent_WatchdogWakeUpRequested: vr_EVREventType = 109;
pub const VREvent_LensDistortionChanged: vr_EVREventType = 110;
pub const VREvent_PropertyChanged: vr_EVREventType = 111;
pub const VREvent_WirelessDisconnect: vr_EVREventType = 112;
pub const VREvent_WirelessReconnect: vr_EVREventType = 113;
pub const VREvent_Reserved_01: vr_EVREventType = 114;
pub const VREvent_Reserved_02: vr_EVREventType = 115;
pub const VREvent_ButtonPress: vr_EVREventType = 200;
pub const VREvent_ButtonUnpress: vr_EVREventType = 201;
pub const VREvent_ButtonTouch: vr_EVREventType = 202;
pub const VREvent_ButtonUntouch: vr_EVREventType = 203;
pub const VREvent_Modal_Cancel: vr_EVREventType = 257;
pub const VREvent_MouseMove: vr_EVREventType = 300;
pub const VREvent_MouseButtonDown: vr_EVREventType = 301;
pub const VREvent_MouseButtonUp: vr_EVREventType = 302;
pub const VREvent_FocusEnter: vr_EVREventType = 303;
pub const VREvent_FocusLeave: vr_EVREventType = 304;
pub const VREvent_ScrollDiscrete: vr_EVREventType = 305;
pub const VREvent_TouchPadMove: vr_EVREventType = 306;
pub const VREvent_OverlayFocusChanged: vr_EVREventType = 307;
pub const VREvent_ReloadOverlays: vr_EVREventType = 308;
pub const VREvent_ScrollSmooth: vr_EVREventType = 309;
pub const VREvent_LockMousePosition: vr_EVREventType = 310;
pub const VREvent_UnlockMousePosition: vr_EVREventType = 311;
pub const VREvent_InputFocusCaptured: vr_EVREventType = 400;
pub const VREvent_InputFocusReleased: vr_EVREventType = 401;
pub const VREvent_SceneApplicationChanged: vr_EVREventType = 404;
pub const VREvent_InputFocusChanged: vr_EVREventType = 406;
pub const VREvent_SceneApplicationUsingWrongGraphicsAdapter: vr_EVREventType = 408;
pub const VREvent_ActionBindingReloaded: vr_EVREventType = 409;
pub const VREvent_HideRenderModels: vr_EVREventType = 410;
pub const VREvent_ShowRenderModels: vr_EVREventType = 411;
pub const VREvent_SceneApplicationStateChanged: vr_EVREventType = 412;
pub const VREvent_SceneAppPipeDisconnected: vr_EVREventType = 413;
pub const VREvent_ConsoleOpened: vr_EVREventType = 420;
pub const VREvent_ConsoleClosed: vr_EVREventType = 421;
pub const VREvent_OverlayShown: vr_EVREventType = 500;
pub const VREvent_OverlayHidden: vr_EVREventType = 501;
pub const VREvent_DashboardActivated: vr_EVREventType = 502;
pub const VREvent_DashboardDeactivated: vr_EVREventType = 503;
pub const VREvent_DashboardRequested: vr_EVREventType = 505;
pub const VREvent_ResetDashboard: vr_EVREventType = 506;
pub const VREvent_ImageLoaded: vr_EVREventType = 508;
pub const VREvent_ShowKeyboard: vr_EVREventType = 509;
pub const VREvent_HideKeyboard: vr_EVREventType = 510;
pub const VREvent_OverlayGamepadFocusGained: vr_EVREventType = 511;
pub const VREvent_OverlayGamepadFocusLost: vr_EVREventType = 512;
pub const VREvent_OverlaySharedTextureChanged: vr_EVREventType = 513;
pub const VREvent_ScreenshotTriggered: vr_EVREventType = 516;
pub const VREvent_ImageFailed: vr_EVREventType = 517;
pub const VREvent_DashboardOverlayCreated: vr_EVREventType = 518;
pub const VREvent_SwitchGamepadFocus: vr_EVREventType = 519;
pub const VREvent_RequestScreenshot: vr_EVREventType = 520;
pub const VREvent_ScreenshotTaken: vr_EVREventType = 521;
pub const VREvent_ScreenshotFailed: vr_EVREventType = 522;
pub const VREvent_SubmitScreenshotToDashboard: vr_EVREventType = 523;
pub const VREvent_ScreenshotProgressToDashboard: vr_EVREventType = 524;
pub const VREvent_PrimaryDashboardDeviceChanged: vr_EVREventType = 525;
pub const VREvent_RoomViewShown: vr_EVREventType = 526;
pub const VREvent_RoomViewHidden: vr_EVREventType = 527;
pub const VREvent_ShowUI: vr_EVREventType = 528;
pub const VREvent_ShowDevTools: vr_EVREventType = 529;
pub const VREvent_DesktopViewUpdating: vr_EVREventType = 530;
pub const VREvent_DesktopViewReady: vr_EVREventType = 531;
pub const VREvent_StartDashboard: vr_EVREventType = 532;
pub const VREvent_ElevatePrism: vr_EVREventType = 533;
pub const VREvent_OverlayClosed: vr_EVREventType = 534;
pub const VREvent_DashboardThumbChanged: vr_EVREventType = 535;
pub const VREvent_DesktopMightBeVisible: vr_EVREventType = 536;
pub const VREvent_DesktopMightBeHidden: vr_EVREventType = 537;
pub const VREvent_MutualSteamCapabilitiesChanged: vr_EVREventType = 538;
pub const VREvent_OverlayCreated: vr_EVREventType = 539;
pub const VREvent_OverlayDestroyed: vr_EVREventType = 540;
pub const VREvent_Notification_Shown: vr_EVREventType = 600;
pub const VREvent_Notification_Hidden: vr_EVREventType = 601;
pub const VREvent_Notification_BeginInteraction: vr_EVREventType = 602;
pub const VREvent_Notification_Destroyed: vr_EVREventType = 603;
pub const VREvent_Quit: vr_EVREventType = 700;
pub const VREvent_ProcessQuit: vr_EVREventType = 701;
pub const VREvent_QuitAcknowledged: vr_EVREventType = 703;
pub const VREvent_DriverRequestedQuit: vr_EVREventType = 704;
pub const VREvent_RestartRequested: vr_EVREventType = 705;
pub const VREvent_InvalidateSwapTextureSets: vr_EVREventType = 706;
pub const VREvent_ChaperoneDataHasChanged: vr_EVREventType = 800;
pub const VREvent_ChaperoneUniverseHasChanged: vr_EVREventType = 801;
pub const VREvent_ChaperoneTempDataHasChanged: vr_EVREventType = 802;
pub const VREvent_ChaperoneSettingsHaveChanged: vr_EVREventType = 803;
pub const VREvent_SeatedZeroPoseReset: vr_EVREventType = 804;
pub const VREvent_ChaperoneFlushCache: vr_EVREventType = 805;
pub const VREvent_ChaperoneRoomSetupStarting: vr_EVREventType = 806;
pub const VREvent_ChaperoneRoomSetupFinished: vr_EVREventType = 807;
pub const VREvent_StandingZeroPoseReset: vr_EVREventType = 808;
pub const VREvent_AudioSettingsHaveChanged: vr_EVREventType = 820;
pub const VREvent_BackgroundSettingHasChanged: vr_EVREventType = 850;
pub const VREvent_CameraSettingsHaveChanged: vr_EVREventType = 851;
pub const VREvent_ReprojectionSettingHasChanged: vr_EVREventType = 852;
pub const VREvent_ModelSkinSettingsHaveChanged: vr_EVREventType = 853;
pub const VREvent_EnvironmentSettingsHaveChanged: vr_EVREventType = 854;
pub const VREvent_PowerSettingsHaveChanged: vr_EVREventType = 855;
pub const VREvent_EnableHomeAppSettingsHaveChanged: vr_EVREventType = 856;
pub const VREvent_SteamVRSectionSettingChanged: vr_EVREventType = 857;
pub const VREvent_LighthouseSectionSettingChanged: vr_EVREventType = 858;
pub const VREvent_NullSectionSettingChanged: vr_EVREventType = 859;
pub const VREvent_UserInterfaceSectionSettingChanged: vr_EVREventType = 860;
pub const VREvent_NotificationsSectionSettingChanged: vr_EVREventType = 861;
pub const VREvent_KeyboardSectionSettingChanged: vr_EVREventType = 862;
pub const VREvent_PerfSectionSettingChanged: vr_EVREventType = 863;
pub const VREvent_DashboardSectionSettingChanged: vr_EVREventType = 864;
pub const VREvent_WebInterfaceSectionSettingChanged: vr_EVREventType = 865;
pub const VREvent_TrackersSectionSettingChanged: vr_EVREventType = 866;
pub const VREvent_LastKnownSectionSettingChanged: vr_EVREventType = 867;
pub const VREvent_DismissedWarningsSectionSettingChanged: vr_EVREventType = 868;
pub const VREvent_GpuSpeedSectionSettingChanged: vr_EVREventType = 869;
pub const VREvent_WindowsMRSectionSettingChanged: vr_EVREventType = 870;
pub const VREvent_OtherSectionSettingChanged: vr_EVREventType = 871;
pub const VREvent_AnyDriverSettingsChanged: vr_EVREventType = 872;
pub const VREvent_StatusUpdate: vr_EVREventType = 900;
pub const VREvent_WebInterface_InstallDriverCompleted: vr_EVREventType = 950;
pub const VREvent_MCImageUpdated: vr_EVREventType = 1000;
pub const VREvent_FirmwareUpdateStarted: vr_EVREventType = 1100;
pub const VREvent_FirmwareUpdateFinished: vr_EVREventType = 1101;
pub const VREvent_KeyboardClosed: vr_EVREventType = 1200;
pub const VREvent_KeyboardCharInput: vr_EVREventType = 1201;
pub const VREvent_KeyboardDone: vr_EVREventType = 1202;
pub const VREvent_KeyboardOpened_Global: vr_EVREventType = 1203;
pub const VREvent_KeyboardClosed_Global: vr_EVREventType = 1204;
pub const VREvent_ApplicationListUpdated: vr_EVREventType = 1303;
pub const VREvent_ApplicationMimeTypeLoad: vr_EVREventType = 1304;
pub const VREvent_ProcessConnected: vr_EVREventType = 1306;
pub const VREvent_ProcessDisconnected: vr_EVREventType = 1307;
pub const VREvent_Compositor_ChaperoneBoundsShown: vr_EVREventType = 1410;
pub const VREvent_Compositor_ChaperoneBoundsHidden: vr_EVREventType = 1411;
pub const VREvent_Compositor_DisplayDisconnected: vr_EVREventType = 1412;
pub const VREvent_Compositor_DisplayReconnected: vr_EVREventType = 1413;
pub const VREvent_Compositor_HDCPError: vr_EVREventType = 1414;
pub const VREvent_Compositor_ApplicationNotResponding: vr_EVREventType = 1415;
pub const VREvent_Compositor_ApplicationResumed: vr_EVREventType = 1416;
pub const VREvent_Compositor_OutOfVideoMemory: vr_EVREventType = 1417;
pub const VREvent_Compositor_DisplayModeNotSupported: vr_EVREventType = 1418;
pub const VREvent_Compositor_StageOverrideReady: vr_EVREventType = 1419;
pub const VREvent_Compositor_RequestDisconnectReconnect: vr_EVREventType = 1420;
pub const VREvent_TrackedCamera_StartVideoStream: vr_EVREventType = 1500;
pub const VREvent_TrackedCamera_StopVideoStream: vr_EVREventType = 1501;
pub const VREvent_TrackedCamera_PauseVideoStream: vr_EVREventType = 1502;
pub const VREvent_TrackedCamera_ResumeVideoStream: vr_EVREventType = 1503;
pub const VREvent_TrackedCamera_EditingSurface: vr_EVREventType = 1550;
pub const VREvent_PerformanceTest_EnableCapture: vr_EVREventType = 1600;
pub const VREvent_PerformanceTest_DisableCapture: vr_EVREventType = 1601;
pub const VREvent_PerformanceTest_FidelityLevel: vr_EVREventType = 1602;
pub const VREvent_MessageOverlay_Closed: vr_EVREventType = 1650;
pub const VREvent_MessageOverlayCloseRequested: vr_EVREventType = 1651;
pub const VREvent_Input_HapticVibration: vr_EVREventType = 1700;
pub const VREvent_Input_BindingLoadFailed: vr_EVREventType = 1701;
pub const VREvent_Input_BindingLoadSuccessful: vr_EVREventType = 1702;
pub const VREvent_Input_ActionManifestReloaded: vr_EVREventType = 1703;
pub const VREvent_Input_ActionManifestLoadFailed: vr_EVREventType = 1704;
pub const VREvent_Input_ProgressUpdate: vr_EVREventType = 1705;
pub const VREvent_Input_TrackerActivated: vr_EVREventType = 1706;
pub const VREvent_Input_BindingsUpdated: vr_EVREventType = 1707;
pub const VREvent_Input_BindingSubscriptionChanged: vr_EVREventType = 1708;
pub const VREvent_SpatialAnchors_PoseUpdated: vr_EVREventType = 1800;
pub const VREvent_SpatialAnchors_DescriptorUpdated: vr_EVREventType = 1801;
pub const VREvent_SpatialAnchors_RequestPoseUpdate: vr_EVREventType = 1802;
pub const VREvent_SpatialAnchors_RequestDescriptorUpdate: vr_EVREventType = 1803;
pub const VREvent_SystemReport_Started: vr_EVREventType = 1900;
pub const VREvent_Monitor_ShowHeadsetView: vr_EVREventType = 2000;
pub const VREvent_Monitor_HideHeadsetView: vr_EVREventType = 2001;
pub const VREvent_Audio_SetSpeakersVolume: vr_EVREventType = 2100;
pub const VREvent_Audio_SetSpeakersMute: vr_EVREventType = 2101;
pub const VREvent_Audio_SetMicrophoneVolume: vr_EVREventType = 2102;
pub const VREvent_Audio_SetMicrophoneMute: vr_EVREventType = 2103;
pub const VREvent_VendorSpecific_Reserved_Start: vr_EVREventType = 10000;
pub const VREvent_VendorSpecific_Reserved_End: vr_EVREventType = 19999;
#[doc = " The types of events that could be posted (and what the parameters mean for each event type)"]
pub type vr_EVREventType = ::std::os::raw::c_uint;
pub const k_EDeviceActivityLevel_Unknown: vr_EDeviceActivityLevel = -1;
pub const k_EDeviceActivityLevel_Idle: vr_EDeviceActivityLevel = 0;
pub const k_EDeviceActivityLevel_UserInteraction: vr_EDeviceActivityLevel = 1;
pub const k_EDeviceActivityLevel_UserInteraction_Timeout: vr_EDeviceActivityLevel = 2;
pub const k_EDeviceActivityLevel_Standby: vr_EDeviceActivityLevel = 3;
pub const k_EDeviceActivityLevel_Idle_Timeout: vr_EDeviceActivityLevel = 4;
#[doc = " Level of Hmd activity"]
pub type vr_EDeviceActivityLevel = ::std::os::raw::c_int;
pub const k_EButton_System: vr_EVRButtonId = 0;
pub const k_EButton_ApplicationMenu: vr_EVRButtonId = 1;
pub const k_EButton_Grip: vr_EVRButtonId = 2;
pub const k_EButton_DPad_Left: vr_EVRButtonId = 3;
pub const k_EButton_DPad_Up: vr_EVRButtonId = 4;
pub const k_EButton_DPad_Right: vr_EVRButtonId = 5;
pub const k_EButton_DPad_Down: vr_EVRButtonId = 6;
pub const k_EButton_A: vr_EVRButtonId = 7;
pub const k_EButton_ProximitySensor: vr_EVRButtonId = 31;
pub const k_EButton_Axis0: vr_EVRButtonId = 32;
pub const k_EButton_Axis1: vr_EVRButtonId = 33;
pub const k_EButton_Axis2: vr_EVRButtonId = 34;
pub const k_EButton_Axis3: vr_EVRButtonId = 35;
pub const k_EButton_Axis4: vr_EVRButtonId = 36;
pub const k_EButton_SteamVR_Touchpad: vr_EVRButtonId = 32;
pub const k_EButton_SteamVR_Trigger: vr_EVRButtonId = 33;
pub const k_EButton_Dashboard_Back: vr_EVRButtonId = 2;
pub const k_EButton_IndexController_A: vr_EVRButtonId = 2;
pub const k_EButton_IndexController_B: vr_EVRButtonId = 1;
pub const k_EButton_IndexController_JoyStick: vr_EVRButtonId = 35;
pub const k_EButton_Reserved0: vr_EVRButtonId = 50;
pub const k_EButton_Reserved1: vr_EVRButtonId = 51;
pub const k_EButton_Max: vr_EVRButtonId = 64;
#[doc = " VR controller button and axis IDs"]
pub type vr_EVRButtonId = ::std::os::raw::c_uint;
#[doc = " used for controller button events"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Controller_t {
    pub button: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Controller_t"][::std::mem::size_of::<vr_VREvent_Controller_t>() - 4usize];
    ["Alignment of vr_VREvent_Controller_t"]
        [::std::mem::align_of::<vr_VREvent_Controller_t>() - 4usize];
    ["Offset of field: vr_VREvent_Controller_t::button"]
        [::std::mem::offset_of!(vr_VREvent_Controller_t, button) - 0usize];
};
pub const VRMouseButton_Left: vr_EVRMouseButton = 1;
pub const VRMouseButton_Right: vr_EVRMouseButton = 2;
pub const VRMouseButton_Middle: vr_EVRMouseButton = 4;
#[doc = " used for simulated mouse events in overlay space"]
pub type vr_EVRMouseButton = ::std::os::raw::c_uint;
#[doc = " used for simulated mouse events in overlay space"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Mouse_t {
    pub x: f32,
    pub y: f32,
    pub button: u32,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Mouse_t"][::std::mem::size_of::<vr_VREvent_Mouse_t>() - 16usize];
    ["Alignment of vr_VREvent_Mouse_t"][::std::mem::align_of::<vr_VREvent_Mouse_t>() - 4usize];
    ["Offset of field: vr_VREvent_Mouse_t::x"]
        [::std::mem::offset_of!(vr_VREvent_Mouse_t, x) - 0usize];
    ["Offset of field: vr_VREvent_Mouse_t::y"]
        [::std::mem::offset_of!(vr_VREvent_Mouse_t, y) - 4usize];
    ["Offset of field: vr_VREvent_Mouse_t::button"]
        [::std::mem::offset_of!(vr_VREvent_Mouse_t, button) - 8usize];
    ["Offset of field: vr_VREvent_Mouse_t::cursorIndex"]
        [::std::mem::offset_of!(vr_VREvent_Mouse_t, cursorIndex) - 12usize];
};
#[doc = " used for simulated mouse wheel scroll"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Scroll_t {
    pub xdelta: f32,
    pub ydelta: f32,
    pub unused: u32,
    pub viewportscale: f32,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Scroll_t"][::std::mem::size_of::<vr_VREvent_Scroll_t>() - 20usize];
    ["Alignment of vr_VREvent_Scroll_t"][::std::mem::align_of::<vr_VREvent_Scroll_t>() - 4usize];
    ["Offset of field: vr_VREvent_Scroll_t::xdelta"]
        [::std::mem::offset_of!(vr_VREvent_Scroll_t, xdelta) - 0usize];
    ["Offset of field: vr_VREvent_Scroll_t::ydelta"]
        [::std::mem::offset_of!(vr_VREvent_Scroll_t, ydelta) - 4usize];
    ["Offset of field: vr_VREvent_Scroll_t::unused"]
        [::std::mem::offset_of!(vr_VREvent_Scroll_t, unused) - 8usize];
    ["Offset of field: vr_VREvent_Scroll_t::viewportscale"]
        [::std::mem::offset_of!(vr_VREvent_Scroll_t, viewportscale) - 12usize];
    ["Offset of field: vr_VREvent_Scroll_t::cursorIndex"]
        [::std::mem::offset_of!(vr_VREvent_Scroll_t, cursorIndex) - 16usize];
};
#[doc = " when in mouse input mode you can receive data from the touchpad, these events are only sent if the users finger\nis on the touchpad (or just released from it). These events are sent to overlays with the VROverlayFlags_SendVRTouchpadEvents\nflag set."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_TouchPadMove_t {
    pub bFingerDown: bool,
    pub flSecondsFingerDown: f32,
    pub fValueXFirst: f32,
    pub fValueYFirst: f32,
    pub fValueXRaw: f32,
    pub fValueYRaw: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_TouchPadMove_t"]
        [::std::mem::size_of::<vr_VREvent_TouchPadMove_t>() - 24usize];
    ["Alignment of vr_VREvent_TouchPadMove_t"]
        [::std::mem::align_of::<vr_VREvent_TouchPadMove_t>() - 4usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::bFingerDown"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, bFingerDown) - 0usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::flSecondsFingerDown"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, flSecondsFingerDown) - 4usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::fValueXFirst"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, fValueXFirst) - 8usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::fValueYFirst"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, fValueYFirst) - 12usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::fValueXRaw"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, fValueXRaw) - 16usize];
    ["Offset of field: vr_VREvent_TouchPadMove_t::fValueYRaw"]
        [::std::mem::offset_of!(vr_VREvent_TouchPadMove_t, fValueYRaw) - 20usize];
};
#[doc = " notification related events. Details will still change at this point"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Notification_t {
    pub ulUserValue: u64,
    pub notificationId: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Notification_t"]
        [::std::mem::size_of::<vr_VREvent_Notification_t>() - 16usize];
    ["Alignment of vr_VREvent_Notification_t"]
        [::std::mem::align_of::<vr_VREvent_Notification_t>() - 8usize];
    ["Offset of field: vr_VREvent_Notification_t::ulUserValue"]
        [::std::mem::offset_of!(vr_VREvent_Notification_t, ulUserValue) - 0usize];
    ["Offset of field: vr_VREvent_Notification_t::notificationId"]
        [::std::mem::offset_of!(vr_VREvent_Notification_t, notificationId) - 8usize];
};
#[doc = " Used for events about processes"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Process_t {
    pub pid: u32,
    pub oldPid: u32,
    pub bForced: bool,
    pub bConnectionLost: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Process_t"][::std::mem::size_of::<vr_VREvent_Process_t>() - 12usize];
    ["Alignment of vr_VREvent_Process_t"][::std::mem::align_of::<vr_VREvent_Process_t>() - 4usize];
    ["Offset of field: vr_VREvent_Process_t::pid"]
        [::std::mem::offset_of!(vr_VREvent_Process_t, pid) - 0usize];
    ["Offset of field: vr_VREvent_Process_t::oldPid"]
        [::std::mem::offset_of!(vr_VREvent_Process_t, oldPid) - 4usize];
    ["Offset of field: vr_VREvent_Process_t::bForced"]
        [::std::mem::offset_of!(vr_VREvent_Process_t, bForced) - 8usize];
    ["Offset of field: vr_VREvent_Process_t::bConnectionLost"]
        [::std::mem::offset_of!(vr_VREvent_Process_t, bConnectionLost) - 9usize];
};
#[doc = " Used for a few events about overlays"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Overlay_t {
    pub overlayHandle: u64,
    pub devicePath: u64,
    pub memoryBlockId: u64,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Overlay_t"][::std::mem::size_of::<vr_VREvent_Overlay_t>() - 32usize];
    ["Alignment of vr_VREvent_Overlay_t"][::std::mem::align_of::<vr_VREvent_Overlay_t>() - 8usize];
    ["Offset of field: vr_VREvent_Overlay_t::overlayHandle"]
        [::std::mem::offset_of!(vr_VREvent_Overlay_t, overlayHandle) - 0usize];
    ["Offset of field: vr_VREvent_Overlay_t::devicePath"]
        [::std::mem::offset_of!(vr_VREvent_Overlay_t, devicePath) - 8usize];
    ["Offset of field: vr_VREvent_Overlay_t::memoryBlockId"]
        [::std::mem::offset_of!(vr_VREvent_Overlay_t, memoryBlockId) - 16usize];
    ["Offset of field: vr_VREvent_Overlay_t::cursorIndex"]
        [::std::mem::offset_of!(vr_VREvent_Overlay_t, cursorIndex) - 24usize];
};
#[doc = " Used for a few events about overlays"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Status_t {
    pub statusState: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Status_t"][::std::mem::size_of::<vr_VREvent_Status_t>() - 4usize];
    ["Alignment of vr_VREvent_Status_t"][::std::mem::align_of::<vr_VREvent_Status_t>() - 4usize];
    ["Offset of field: vr_VREvent_Status_t::statusState"]
        [::std::mem::offset_of!(vr_VREvent_Status_t, statusState) - 0usize];
};
#[doc = " Used for keyboard events"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Keyboard_t {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
    pub overlayHandle: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Keyboard_t"][::std::mem::size_of::<vr_VREvent_Keyboard_t>() - 24usize];
    ["Alignment of vr_VREvent_Keyboard_t"]
        [::std::mem::align_of::<vr_VREvent_Keyboard_t>() - 8usize];
    ["Offset of field: vr_VREvent_Keyboard_t::cNewInput"]
        [::std::mem::offset_of!(vr_VREvent_Keyboard_t, cNewInput) - 0usize];
    ["Offset of field: vr_VREvent_Keyboard_t::uUserValue"]
        [::std::mem::offset_of!(vr_VREvent_Keyboard_t, uUserValue) - 8usize];
    ["Offset of field: vr_VREvent_Keyboard_t::overlayHandle"]
        [::std::mem::offset_of!(vr_VREvent_Keyboard_t, overlayHandle) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Ipd_t {
    pub ipdMeters: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Ipd_t"][::std::mem::size_of::<vr_VREvent_Ipd_t>() - 4usize];
    ["Alignment of vr_VREvent_Ipd_t"][::std::mem::align_of::<vr_VREvent_Ipd_t>() - 4usize];
    ["Offset of field: vr_VREvent_Ipd_t::ipdMeters"]
        [::std::mem::offset_of!(vr_VREvent_Ipd_t, ipdMeters) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Chaperone_t {
    pub m_nPreviousUniverse: u64,
    pub m_nCurrentUniverse: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Chaperone_t"][::std::mem::size_of::<vr_VREvent_Chaperone_t>() - 16usize];
    ["Alignment of vr_VREvent_Chaperone_t"]
        [::std::mem::align_of::<vr_VREvent_Chaperone_t>() - 8usize];
    ["Offset of field: vr_VREvent_Chaperone_t::m_nPreviousUniverse"]
        [::std::mem::offset_of!(vr_VREvent_Chaperone_t, m_nPreviousUniverse) - 0usize];
    ["Offset of field: vr_VREvent_Chaperone_t::m_nCurrentUniverse"]
        [::std::mem::offset_of!(vr_VREvent_Chaperone_t, m_nCurrentUniverse) - 8usize];
};
#[doc = " Not actually used for any events"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Reserved_t {
    pub reserved0: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Reserved_t"][::std::mem::size_of::<vr_VREvent_Reserved_t>() - 48usize];
    ["Alignment of vr_VREvent_Reserved_t"]
        [::std::mem::align_of::<vr_VREvent_Reserved_t>() - 8usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved0"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved0) - 0usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved1"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved1) - 8usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved2"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved2) - 16usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved3"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved3) - 24usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved4"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved4) - 32usize];
    ["Offset of field: vr_VREvent_Reserved_t::reserved5"]
        [::std::mem::offset_of!(vr_VREvent_Reserved_t, reserved5) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_PerformanceTest_t {
    pub m_nFidelityLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_PerformanceTest_t"]
        [::std::mem::size_of::<vr_VREvent_PerformanceTest_t>() - 4usize];
    ["Alignment of vr_VREvent_PerformanceTest_t"]
        [::std::mem::align_of::<vr_VREvent_PerformanceTest_t>() - 4usize];
    ["Offset of field: vr_VREvent_PerformanceTest_t::m_nFidelityLevel"]
        [::std::mem::offset_of!(vr_VREvent_PerformanceTest_t, m_nFidelityLevel) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_SeatedZeroPoseReset_t {
    pub bResetBySystemMenu: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_SeatedZeroPoseReset_t"]
        [::std::mem::size_of::<vr_VREvent_SeatedZeroPoseReset_t>() - 1usize];
    ["Alignment of vr_VREvent_SeatedZeroPoseReset_t"]
        [::std::mem::align_of::<vr_VREvent_SeatedZeroPoseReset_t>() - 1usize];
    ["Offset of field: vr_VREvent_SeatedZeroPoseReset_t::bResetBySystemMenu"]
        [::std::mem::offset_of!(vr_VREvent_SeatedZeroPoseReset_t, bResetBySystemMenu) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Screenshot_t {
    pub handle: u32,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Screenshot_t"][::std::mem::size_of::<vr_VREvent_Screenshot_t>() - 8usize];
    ["Alignment of vr_VREvent_Screenshot_t"]
        [::std::mem::align_of::<vr_VREvent_Screenshot_t>() - 4usize];
    ["Offset of field: vr_VREvent_Screenshot_t::handle"]
        [::std::mem::offset_of!(vr_VREvent_Screenshot_t, handle) - 0usize];
    ["Offset of field: vr_VREvent_Screenshot_t::type_"]
        [::std::mem::offset_of!(vr_VREvent_Screenshot_t, type_) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_ScreenshotProgress_t {
    pub progress: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_ScreenshotProgress_t"]
        [::std::mem::size_of::<vr_VREvent_ScreenshotProgress_t>() - 4usize];
    ["Alignment of vr_VREvent_ScreenshotProgress_t"]
        [::std::mem::align_of::<vr_VREvent_ScreenshotProgress_t>() - 4usize];
    ["Offset of field: vr_VREvent_ScreenshotProgress_t::progress"]
        [::std::mem::offset_of!(vr_VREvent_ScreenshotProgress_t, progress) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_ApplicationLaunch_t {
    pub pid: u32,
    pub unArgsHandle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_ApplicationLaunch_t"]
        [::std::mem::size_of::<vr_VREvent_ApplicationLaunch_t>() - 8usize];
    ["Alignment of vr_VREvent_ApplicationLaunch_t"]
        [::std::mem::align_of::<vr_VREvent_ApplicationLaunch_t>() - 4usize];
    ["Offset of field: vr_VREvent_ApplicationLaunch_t::pid"]
        [::std::mem::offset_of!(vr_VREvent_ApplicationLaunch_t, pid) - 0usize];
    ["Offset of field: vr_VREvent_ApplicationLaunch_t::unArgsHandle"]
        [::std::mem::offset_of!(vr_VREvent_ApplicationLaunch_t, unArgsHandle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_EditingCameraSurface_t {
    pub overlayHandle: u64,
    pub nVisualMode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_EditingCameraSurface_t"]
        [::std::mem::size_of::<vr_VREvent_EditingCameraSurface_t>() - 16usize];
    ["Alignment of vr_VREvent_EditingCameraSurface_t"]
        [::std::mem::align_of::<vr_VREvent_EditingCameraSurface_t>() - 8usize];
    ["Offset of field: vr_VREvent_EditingCameraSurface_t::overlayHandle"]
        [::std::mem::offset_of!(vr_VREvent_EditingCameraSurface_t, overlayHandle) - 0usize];
    ["Offset of field: vr_VREvent_EditingCameraSurface_t::nVisualMode"]
        [::std::mem::offset_of!(vr_VREvent_EditingCameraSurface_t, nVisualMode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_MessageOverlay_t {
    pub unVRMessageOverlayResponse: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_MessageOverlay_t"]
        [::std::mem::size_of::<vr_VREvent_MessageOverlay_t>() - 4usize];
    ["Alignment of vr_VREvent_MessageOverlay_t"]
        [::std::mem::align_of::<vr_VREvent_MessageOverlay_t>() - 4usize];
    ["Offset of field: vr_VREvent_MessageOverlay_t::unVRMessageOverlayResponse"]
        [::std::mem::offset_of!(vr_VREvent_MessageOverlay_t, unVRMessageOverlayResponse) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_Property_t {
    pub container: vr_PropertyContainerHandle_t,
    pub prop: vr_ETrackedDeviceProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Property_t"][::std::mem::size_of::<vr_VREvent_Property_t>() - 16usize];
    ["Alignment of vr_VREvent_Property_t"]
        [::std::mem::align_of::<vr_VREvent_Property_t>() - 8usize];
    ["Offset of field: vr_VREvent_Property_t::container"]
        [::std::mem::offset_of!(vr_VREvent_Property_t, container) - 0usize];
    ["Offset of field: vr_VREvent_Property_t::prop"]
        [::std::mem::offset_of!(vr_VREvent_Property_t, prop) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_HapticVibration_t {
    pub containerHandle: u64,
    pub componentHandle: u64,
    pub fDurationSeconds: f32,
    pub fFrequency: f32,
    pub fAmplitude: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_HapticVibration_t"]
        [::std::mem::size_of::<vr_VREvent_HapticVibration_t>() - 32usize];
    ["Alignment of vr_VREvent_HapticVibration_t"]
        [::std::mem::align_of::<vr_VREvent_HapticVibration_t>() - 8usize];
    ["Offset of field: vr_VREvent_HapticVibration_t::containerHandle"]
        [::std::mem::offset_of!(vr_VREvent_HapticVibration_t, containerHandle) - 0usize];
    ["Offset of field: vr_VREvent_HapticVibration_t::componentHandle"]
        [::std::mem::offset_of!(vr_VREvent_HapticVibration_t, componentHandle) - 8usize];
    ["Offset of field: vr_VREvent_HapticVibration_t::fDurationSeconds"]
        [::std::mem::offset_of!(vr_VREvent_HapticVibration_t, fDurationSeconds) - 16usize];
    ["Offset of field: vr_VREvent_HapticVibration_t::fFrequency"]
        [::std::mem::offset_of!(vr_VREvent_HapticVibration_t, fFrequency) - 20usize];
    ["Offset of field: vr_VREvent_HapticVibration_t::fAmplitude"]
        [::std::mem::offset_of!(vr_VREvent_HapticVibration_t, fAmplitude) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_WebConsole_t {
    pub webConsoleHandle: vr_WebConsoleHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_WebConsole_t"][::std::mem::size_of::<vr_VREvent_WebConsole_t>() - 8usize];
    ["Alignment of vr_VREvent_WebConsole_t"]
        [::std::mem::align_of::<vr_VREvent_WebConsole_t>() - 8usize];
    ["Offset of field: vr_VREvent_WebConsole_t::webConsoleHandle"]
        [::std::mem::offset_of!(vr_VREvent_WebConsole_t, webConsoleHandle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_InputBindingLoad_t {
    pub ulAppContainer: vr_PropertyContainerHandle_t,
    pub pathMessage: u64,
    pub pathUrl: u64,
    pub pathControllerType: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_InputBindingLoad_t"]
        [::std::mem::size_of::<vr_VREvent_InputBindingLoad_t>() - 32usize];
    ["Alignment of vr_VREvent_InputBindingLoad_t"]
        [::std::mem::align_of::<vr_VREvent_InputBindingLoad_t>() - 8usize];
    ["Offset of field: vr_VREvent_InputBindingLoad_t::ulAppContainer"]
        [::std::mem::offset_of!(vr_VREvent_InputBindingLoad_t, ulAppContainer) - 0usize];
    ["Offset of field: vr_VREvent_InputBindingLoad_t::pathMessage"]
        [::std::mem::offset_of!(vr_VREvent_InputBindingLoad_t, pathMessage) - 8usize];
    ["Offset of field: vr_VREvent_InputBindingLoad_t::pathUrl"]
        [::std::mem::offset_of!(vr_VREvent_InputBindingLoad_t, pathUrl) - 16usize];
    ["Offset of field: vr_VREvent_InputBindingLoad_t::pathControllerType"]
        [::std::mem::offset_of!(vr_VREvent_InputBindingLoad_t, pathControllerType) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_InputActionManifestLoad_t {
    pub pathAppKey: u64,
    pub pathMessage: u64,
    pub pathMessageParam: u64,
    pub pathManifestPath: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_InputActionManifestLoad_t"]
        [::std::mem::size_of::<vr_VREvent_InputActionManifestLoad_t>() - 32usize];
    ["Alignment of vr_VREvent_InputActionManifestLoad_t"]
        [::std::mem::align_of::<vr_VREvent_InputActionManifestLoad_t>() - 8usize];
    ["Offset of field: vr_VREvent_InputActionManifestLoad_t::pathAppKey"]
        [::std::mem::offset_of!(vr_VREvent_InputActionManifestLoad_t, pathAppKey) - 0usize];
    ["Offset of field: vr_VREvent_InputActionManifestLoad_t::pathMessage"]
        [::std::mem::offset_of!(vr_VREvent_InputActionManifestLoad_t, pathMessage) - 8usize];
    ["Offset of field: vr_VREvent_InputActionManifestLoad_t::pathMessageParam"]
        [::std::mem::offset_of!(vr_VREvent_InputActionManifestLoad_t, pathMessageParam) - 16usize];
    ["Offset of field: vr_VREvent_InputActionManifestLoad_t::pathManifestPath"]
        [::std::mem::offset_of!(vr_VREvent_InputActionManifestLoad_t, pathManifestPath) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_SpatialAnchor_t {
    pub unHandle: vr_SpatialAnchorHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_SpatialAnchor_t"]
        [::std::mem::size_of::<vr_VREvent_SpatialAnchor_t>() - 4usize];
    ["Alignment of vr_VREvent_SpatialAnchor_t"]
        [::std::mem::align_of::<vr_VREvent_SpatialAnchor_t>() - 4usize];
    ["Offset of field: vr_VREvent_SpatialAnchor_t::unHandle"]
        [::std::mem::offset_of!(vr_VREvent_SpatialAnchor_t, unHandle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_ProgressUpdate_t {
    pub ulApplicationPropertyContainer: u64,
    pub pathDevice: u64,
    pub pathInputSource: u64,
    pub pathProgressAction: u64,
    pub pathIcon: u64,
    pub fProgress: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_ProgressUpdate_t"]
        [::std::mem::size_of::<vr_VREvent_ProgressUpdate_t>() - 48usize];
    ["Alignment of vr_VREvent_ProgressUpdate_t"]
        [::std::mem::align_of::<vr_VREvent_ProgressUpdate_t>() - 8usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::ulApplicationPropertyContainer"][::std::mem::offset_of!(
        vr_VREvent_ProgressUpdate_t,
        ulApplicationPropertyContainer
    ) - 0usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::pathDevice"]
        [::std::mem::offset_of!(vr_VREvent_ProgressUpdate_t, pathDevice) - 8usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::pathInputSource"]
        [::std::mem::offset_of!(vr_VREvent_ProgressUpdate_t, pathInputSource) - 16usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::pathProgressAction"]
        [::std::mem::offset_of!(vr_VREvent_ProgressUpdate_t, pathProgressAction) - 24usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::pathIcon"]
        [::std::mem::offset_of!(vr_VREvent_ProgressUpdate_t, pathIcon) - 32usize];
    ["Offset of field: vr_VREvent_ProgressUpdate_t::fProgress"]
        [::std::mem::offset_of!(vr_VREvent_ProgressUpdate_t, fProgress) - 40usize];
};
pub const ShowUI_ControllerBinding: vr_EShowUIType = 0;
pub const ShowUI_ManageTrackers: vr_EShowUIType = 1;
pub const ShowUI_Pairing: vr_EShowUIType = 3;
pub const ShowUI_Settings: vr_EShowUIType = 4;
pub const ShowUI_DebugCommands: vr_EShowUIType = 5;
pub const ShowUI_FullControllerBinding: vr_EShowUIType = 6;
pub const ShowUI_ManageDrivers: vr_EShowUIType = 7;
pub type vr_EShowUIType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_ShowUI_t {
    pub eType: vr_EShowUIType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_ShowUI_t"][::std::mem::size_of::<vr_VREvent_ShowUI_t>() - 4usize];
    ["Alignment of vr_VREvent_ShowUI_t"][::std::mem::align_of::<vr_VREvent_ShowUI_t>() - 4usize];
    ["Offset of field: vr_VREvent_ShowUI_t::eType"]
        [::std::mem::offset_of!(vr_VREvent_ShowUI_t, eType) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_ShowDevTools_t {
    pub nBrowserIdentifier: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_ShowDevTools_t"]
        [::std::mem::size_of::<vr_VREvent_ShowDevTools_t>() - 4usize];
    ["Alignment of vr_VREvent_ShowDevTools_t"]
        [::std::mem::align_of::<vr_VREvent_ShowDevTools_t>() - 4usize];
    ["Offset of field: vr_VREvent_ShowDevTools_t::nBrowserIdentifier"]
        [::std::mem::offset_of!(vr_VREvent_ShowDevTools_t, nBrowserIdentifier) - 0usize];
};
pub const HDCPError_None: vr_EHDCPError = 0;
pub const HDCPError_LinkLost: vr_EHDCPError = 1;
pub const HDCPError_Tampered: vr_EHDCPError = 2;
pub const HDCPError_DeviceRevoked: vr_EHDCPError = 3;
pub const HDCPError_Unknown: vr_EHDCPError = 4;
pub type vr_EHDCPError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_HDCPError_t {
    pub eCode: vr_EHDCPError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_HDCPError_t"][::std::mem::size_of::<vr_VREvent_HDCPError_t>() - 4usize];
    ["Alignment of vr_VREvent_HDCPError_t"]
        [::std::mem::align_of::<vr_VREvent_HDCPError_t>() - 4usize];
    ["Offset of field: vr_VREvent_HDCPError_t::eCode"]
        [::std::mem::offset_of!(vr_VREvent_HDCPError_t, eCode) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_AudioVolumeControl_t {
    pub fVolumeLevel: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_AudioVolumeControl_t"]
        [::std::mem::size_of::<vr_VREvent_AudioVolumeControl_t>() - 4usize];
    ["Alignment of vr_VREvent_AudioVolumeControl_t"]
        [::std::mem::align_of::<vr_VREvent_AudioVolumeControl_t>() - 4usize];
    ["Offset of field: vr_VREvent_AudioVolumeControl_t::fVolumeLevel"]
        [::std::mem::offset_of!(vr_VREvent_AudioVolumeControl_t, fVolumeLevel) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VREvent_AudioMuteControl_t {
    pub bMute: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_AudioMuteControl_t"]
        [::std::mem::size_of::<vr_VREvent_AudioMuteControl_t>() - 1usize];
    ["Alignment of vr_VREvent_AudioMuteControl_t"]
        [::std::mem::align_of::<vr_VREvent_AudioMuteControl_t>() - 1usize];
    ["Offset of field: vr_VREvent_AudioMuteControl_t::bMute"]
        [::std::mem::offset_of!(vr_VREvent_AudioMuteControl_t, bMute) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union vr_VREvent_Data_t {
    pub reserved: vr_VREvent_Reserved_t,
    pub controller: vr_VREvent_Controller_t,
    pub mouse: vr_VREvent_Mouse_t,
    pub scroll: vr_VREvent_Scroll_t,
    pub process: vr_VREvent_Process_t,
    pub notification: vr_VREvent_Notification_t,
    pub overlay: vr_VREvent_Overlay_t,
    pub status: vr_VREvent_Status_t,
    pub keyboard: vr_VREvent_Keyboard_t,
    pub ipd: vr_VREvent_Ipd_t,
    pub chaperone: vr_VREvent_Chaperone_t,
    pub performanceTest: vr_VREvent_PerformanceTest_t,
    pub touchPadMove: vr_VREvent_TouchPadMove_t,
    pub seatedZeroPoseReset: vr_VREvent_SeatedZeroPoseReset_t,
    pub screenshot: vr_VREvent_Screenshot_t,
    pub screenshotProgress: vr_VREvent_ScreenshotProgress_t,
    pub applicationLaunch: vr_VREvent_ApplicationLaunch_t,
    pub cameraSurface: vr_VREvent_EditingCameraSurface_t,
    pub messageOverlay: vr_VREvent_MessageOverlay_t,
    pub property: vr_VREvent_Property_t,
    pub hapticVibration: vr_VREvent_HapticVibration_t,
    pub webConsole: vr_VREvent_WebConsole_t,
    pub inputBinding: vr_VREvent_InputBindingLoad_t,
    pub actionManifest: vr_VREvent_InputActionManifestLoad_t,
    pub spatialAnchor: vr_VREvent_SpatialAnchor_t,
    pub progressUpdate: vr_VREvent_ProgressUpdate_t,
    pub showUi: vr_VREvent_ShowUI_t,
    pub showDevTools: vr_VREvent_ShowDevTools_t,
    pub hdcpError: vr_VREvent_HDCPError_t,
    pub audioVolumeControl: vr_VREvent_AudioVolumeControl_t,
    pub audioMuteControl: vr_VREvent_AudioMuteControl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_Data_t"][::std::mem::size_of::<vr_VREvent_Data_t>() - 48usize];
    ["Alignment of vr_VREvent_Data_t"][::std::mem::align_of::<vr_VREvent_Data_t>() - 8usize];
    ["Offset of field: vr_VREvent_Data_t::reserved"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, reserved) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::controller"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, controller) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::mouse"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, mouse) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::scroll"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, scroll) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::process"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, process) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::notification"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, notification) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::overlay"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, overlay) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::status"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, status) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::keyboard"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, keyboard) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::ipd"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, ipd) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::chaperone"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, chaperone) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::performanceTest"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, performanceTest) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::touchPadMove"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, touchPadMove) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::seatedZeroPoseReset"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, seatedZeroPoseReset) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::screenshot"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, screenshot) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::screenshotProgress"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, screenshotProgress) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::applicationLaunch"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, applicationLaunch) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::cameraSurface"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, cameraSurface) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::messageOverlay"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, messageOverlay) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::property"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, property) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::hapticVibration"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, hapticVibration) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::webConsole"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, webConsole) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::inputBinding"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, inputBinding) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::actionManifest"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, actionManifest) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::spatialAnchor"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, spatialAnchor) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::progressUpdate"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, progressUpdate) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::showUi"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, showUi) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::showDevTools"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, showDevTools) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::hdcpError"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, hdcpError) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::audioVolumeControl"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, audioVolumeControl) - 0usize];
    ["Offset of field: vr_VREvent_Data_t::audioMuteControl"]
        [::std::mem::offset_of!(vr_VREvent_Data_t, audioMuteControl) - 0usize];
};
#[doc = " An event posted by the server to all running applications"]
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct vr_VREvent_t {
    pub eventType: u32,
    pub trackedDeviceIndex: vr_TrackedDeviceIndex_t,
    pub eventAgeSeconds: f32,
    pub data: vr_VREvent_Data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VREvent_t"][::std::mem::size_of::<vr_VREvent_t>() - 60usize];
    ["Alignment of vr_VREvent_t"][::std::mem::align_of::<vr_VREvent_t>() - 4usize];
    ["Offset of field: vr_VREvent_t::eventType"]
        [::std::mem::offset_of!(vr_VREvent_t, eventType) - 0usize];
    ["Offset of field: vr_VREvent_t::trackedDeviceIndex"]
        [::std::mem::offset_of!(vr_VREvent_t, trackedDeviceIndex) - 4usize];
    ["Offset of field: vr_VREvent_t::eventAgeSeconds"]
        [::std::mem::offset_of!(vr_VREvent_t, eventAgeSeconds) - 8usize];
    ["Offset of field: vr_VREvent_t::data"][::std::mem::offset_of!(vr_VREvent_t, data) - 12usize];
};
pub type vr_VRComponentProperties = u32;
pub const VRComponentProperty_IsStatic: vr_EVRComponentProperty = 1;
pub const VRComponentProperty_IsVisible: vr_EVRComponentProperty = 2;
pub const VRComponentProperty_IsTouched: vr_EVRComponentProperty = 4;
pub const VRComponentProperty_IsPressed: vr_EVRComponentProperty = 8;
pub const VRComponentProperty_IsScrolled: vr_EVRComponentProperty = 16;
pub const VRComponentProperty_IsHighlighted: vr_EVRComponentProperty = 32;
pub type vr_EVRComponentProperty = ::std::os::raw::c_uint;
#[doc = " Describes state information about a render-model component, including transforms and other dynamic properties"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_RenderModel_ComponentState_t {
    pub mTrackingToComponentRenderModel: vr_HmdMatrix34_t,
    pub mTrackingToComponentLocal: vr_HmdMatrix34_t,
    pub uProperties: vr_VRComponentProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_RenderModel_ComponentState_t"]
        [::std::mem::size_of::<vr_RenderModel_ComponentState_t>() - 100usize];
    ["Alignment of vr_RenderModel_ComponentState_t"]
        [::std::mem::align_of::<vr_RenderModel_ComponentState_t>() - 4usize];
    ["Offset of field: vr_RenderModel_ComponentState_t::mTrackingToComponentRenderModel"][::std::mem::offset_of!(
        vr_RenderModel_ComponentState_t,
        mTrackingToComponentRenderModel
    )
        - 0usize];
    ["Offset of field: vr_RenderModel_ComponentState_t::mTrackingToComponentLocal"][::std::mem::offset_of!(
        vr_RenderModel_ComponentState_t,
        mTrackingToComponentLocal
    ) - 48usize];
    ["Offset of field: vr_RenderModel_ComponentState_t::uProperties"]
        [::std::mem::offset_of!(vr_RenderModel_ComponentState_t, uProperties) - 96usize];
};
pub const VRInputError_None: vr_EVRInputError = 0;
pub const VRInputError_NameNotFound: vr_EVRInputError = 1;
pub const VRInputError_WrongType: vr_EVRInputError = 2;
pub const VRInputError_InvalidHandle: vr_EVRInputError = 3;
pub const VRInputError_InvalidParam: vr_EVRInputError = 4;
pub const VRInputError_NoSteam: vr_EVRInputError = 5;
pub const VRInputError_MaxCapacityReached: vr_EVRInputError = 6;
pub const VRInputError_IPCError: vr_EVRInputError = 7;
pub const VRInputError_NoActiveActionSet: vr_EVRInputError = 8;
pub const VRInputError_InvalidDevice: vr_EVRInputError = 9;
pub const VRInputError_InvalidSkeleton: vr_EVRInputError = 10;
pub const VRInputError_InvalidBoneCount: vr_EVRInputError = 11;
pub const VRInputError_InvalidCompressedData: vr_EVRInputError = 12;
pub const VRInputError_NoData: vr_EVRInputError = 13;
pub const VRInputError_BufferTooSmall: vr_EVRInputError = 14;
pub const VRInputError_MismatchedActionManifest: vr_EVRInputError = 15;
pub const VRInputError_MissingSkeletonData: vr_EVRInputError = 16;
pub const VRInputError_InvalidBoneIndex: vr_EVRInputError = 17;
pub const VRInputError_InvalidPriority: vr_EVRInputError = 18;
pub const VRInputError_PermissionDenied: vr_EVRInputError = 19;
pub const VRInputError_InvalidRenderModel: vr_EVRInputError = 20;
pub type vr_EVRInputError = ::std::os::raw::c_uint;
pub const VRSpatialAnchorError_Success: vr_EVRSpatialAnchorError = 0;
pub const VRSpatialAnchorError_Internal: vr_EVRSpatialAnchorError = 1;
pub const VRSpatialAnchorError_UnknownHandle: vr_EVRSpatialAnchorError = 2;
pub const VRSpatialAnchorError_ArrayTooSmall: vr_EVRSpatialAnchorError = 3;
pub const VRSpatialAnchorError_InvalidDescriptorChar: vr_EVRSpatialAnchorError = 4;
pub const VRSpatialAnchorError_NotYetAvailable: vr_EVRSpatialAnchorError = 5;
pub const VRSpatialAnchorError_NotAvailableInThisUniverse: vr_EVRSpatialAnchorError = 6;
pub const VRSpatialAnchorError_PermanentlyUnavailable: vr_EVRSpatialAnchorError = 7;
pub const VRSpatialAnchorError_WrongDriver: vr_EVRSpatialAnchorError = 8;
pub const VRSpatialAnchorError_DescriptorTooLong: vr_EVRSpatialAnchorError = 9;
pub const VRSpatialAnchorError_Unknown: vr_EVRSpatialAnchorError = 10;
pub const VRSpatialAnchorError_NoRoomCalibration: vr_EVRSpatialAnchorError = 11;
pub const VRSpatialAnchorError_InvalidArgument: vr_EVRSpatialAnchorError = 12;
pub const VRSpatialAnchorError_UnknownDriver: vr_EVRSpatialAnchorError = 13;
pub type vr_EVRSpatialAnchorError = ::std::os::raw::c_uint;
#[doc = " The mesh to draw into the stencil (or depth) buffer to perform\n early stencil (or depth) kills of pixels that will never appear on the HMD.\n This mesh draws on all the pixels that will be hidden after distortion.\n\n If the HMD does not provide a visible area mesh pVertexData will be\n NULL and unTriangleCount will be 0."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_HiddenAreaMesh_t {
    pub pVertexData: *const vr_HmdVector2_t,
    pub unTriangleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_HiddenAreaMesh_t"][::std::mem::size_of::<vr_HiddenAreaMesh_t>() - 16usize];
    ["Alignment of vr_HiddenAreaMesh_t"][::std::mem::align_of::<vr_HiddenAreaMesh_t>() - 8usize];
    ["Offset of field: vr_HiddenAreaMesh_t::pVertexData"]
        [::std::mem::offset_of!(vr_HiddenAreaMesh_t, pVertexData) - 0usize];
    ["Offset of field: vr_HiddenAreaMesh_t::unTriangleCount"]
        [::std::mem::offset_of!(vr_HiddenAreaMesh_t, unTriangleCount) - 8usize];
};
pub const k_eHiddenAreaMesh_Standard: vr_EHiddenAreaMeshType = 0;
pub const k_eHiddenAreaMesh_Inverse: vr_EHiddenAreaMeshType = 1;
pub const k_eHiddenAreaMesh_LineLoop: vr_EHiddenAreaMeshType = 2;
pub const k_eHiddenAreaMesh_Max: vr_EHiddenAreaMeshType = 3;
pub type vr_EHiddenAreaMeshType = ::std::os::raw::c_uint;
pub const k_eControllerAxis_None: vr_EVRControllerAxisType = 0;
pub const k_eControllerAxis_TrackPad: vr_EVRControllerAxisType = 1;
pub const k_eControllerAxis_Joystick: vr_EVRControllerAxisType = 2;
pub const k_eControllerAxis_Trigger: vr_EVRControllerAxisType = 3;
#[doc = " Identifies what kind of axis is on the controller at index n. Read this type\n with pVRSystem->Get( nControllerDeviceIndex, Prop_Axis0Type_Int32 + n );"]
pub type vr_EVRControllerAxisType = ::std::os::raw::c_uint;
#[doc = " contains information about one axis on the controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRControllerAxis_t {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRControllerAxis_t"][::std::mem::size_of::<vr_VRControllerAxis_t>() - 8usize];
    ["Alignment of vr_VRControllerAxis_t"]
        [::std::mem::align_of::<vr_VRControllerAxis_t>() - 4usize];
    ["Offset of field: vr_VRControllerAxis_t::x"]
        [::std::mem::offset_of!(vr_VRControllerAxis_t, x) - 0usize];
    ["Offset of field: vr_VRControllerAxis_t::y"]
        [::std::mem::offset_of!(vr_VRControllerAxis_t, y) - 4usize];
};
#[doc = " the number of axes in the controller state"]
pub const vr_k_unControllerStateAxisCount: u32 = 5;
#[doc = " Holds all the state of a controller at one moment in time."]
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vr_VRControllerState001_t {
    pub unPacketNum: u32,
    pub ulButtonPressed: u64,
    pub ulButtonTouched: u64,
    pub rAxis: [vr_VRControllerAxis_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_VRControllerState001_t"]
        [::std::mem::size_of::<vr_VRControllerState001_t>() - 60usize];
    ["Alignment of vr_VRControllerState001_t"]
        [::std::mem::align_of::<vr_VRControllerState001_t>() - 4usize];
    ["Offset of field: vr_VRControllerState001_t::unPacketNum"]
        [::std::mem::offset_of!(vr_VRControllerState001_t, unPacketNum) - 0usize];
    ["Offset of field: vr_VRControllerState001_t::ulButtonPressed"]
        [::std::mem::offset_of!(vr_VRControllerState001_t, ulButtonPressed) - 4usize];
    ["Offset of field: vr_VRControllerState001_t::ulButtonTouched"]
        [::std::mem::offset_of!(vr_VRControllerState001_t, ulButtonTouched) - 12usize];
    ["Offset of field: vr_VRControllerState001_t::rAxis"]
        [::std::mem::offset_of!(vr_VRControllerState001_t, rAxis) - 20usize];
};
#[doc = " Holds all the state of a controller at one moment in time."]
pub type vr_VRControllerState_t = vr_VRControllerState001_t;
pub const ControllerEventOutput_OSEvents: vr_EVRControllerEventOutputType = 0;
pub const ControllerEventOutput_VREvents: vr_EVRControllerEventOutputType = 1;
#[doc = " determines how to provide output to the application of various event processing functions."]
pub type vr_EVRControllerEventOutputType = ::std::os::raw::c_uint;
pub const COLLISION_BOUNDS_STYLE_BEGINNER: vr_ECollisionBoundsStyle = 0;
pub const COLLISION_BOUNDS_STYLE_INTERMEDIATE: vr_ECollisionBoundsStyle = 1;
pub const COLLISION_BOUNDS_STYLE_SQUARES: vr_ECollisionBoundsStyle = 2;
pub const COLLISION_BOUNDS_STYLE_ADVANCED: vr_ECollisionBoundsStyle = 3;
pub const COLLISION_BOUNDS_STYLE_NONE: vr_ECollisionBoundsStyle = 4;
pub const COLLISION_BOUNDS_STYLE_COUNT: vr_ECollisionBoundsStyle = 5;
#[doc = " Collision Bounds Style"]
pub type vr_ECollisionBoundsStyle = ::std::os::raw::c_uint;
#[doc = " used to refer to a single VR overlay"]
pub type vr_VROverlayHandle_t = u64;
pub const vr_k_ulOverlayHandleInvalid: vr_VROverlayHandle_t = 0;
pub const VROverlayError_None: vr_EVROverlayError = 0;
pub const VROverlayError_UnknownOverlay: vr_EVROverlayError = 10;
pub const VROverlayError_InvalidHandle: vr_EVROverlayError = 11;
pub const VROverlayError_PermissionDenied: vr_EVROverlayError = 12;
pub const VROverlayError_OverlayLimitExceeded: vr_EVROverlayError = 13;
pub const VROverlayError_WrongVisibilityType: vr_EVROverlayError = 14;
pub const VROverlayError_KeyTooLong: vr_EVROverlayError = 15;
pub const VROverlayError_NameTooLong: vr_EVROverlayError = 16;
pub const VROverlayError_KeyInUse: vr_EVROverlayError = 17;
pub const VROverlayError_WrongTransformType: vr_EVROverlayError = 18;
pub const VROverlayError_InvalidTrackedDevice: vr_EVROverlayError = 19;
pub const VROverlayError_InvalidParameter: vr_EVROverlayError = 20;
pub const VROverlayError_ThumbnailCantBeDestroyed: vr_EVROverlayError = 21;
pub const VROverlayError_ArrayTooSmall: vr_EVROverlayError = 22;
pub const VROverlayError_RequestFailed: vr_EVROverlayError = 23;
pub const VROverlayError_InvalidTexture: vr_EVROverlayError = 24;
pub const VROverlayError_UnableToLoadFile: vr_EVROverlayError = 25;
pub const VROverlayError_KeyboardAlreadyInUse: vr_EVROverlayError = 26;
pub const VROverlayError_NoNeighbor: vr_EVROverlayError = 27;
pub const VROverlayError_TooManyMaskPrimitives: vr_EVROverlayError = 29;
pub const VROverlayError_BadMaskPrimitive: vr_EVROverlayError = 30;
pub const VROverlayError_TextureAlreadyLocked: vr_EVROverlayError = 31;
pub const VROverlayError_TextureLockCapacityReached: vr_EVROverlayError = 32;
pub const VROverlayError_TextureNotLocked: vr_EVROverlayError = 33;
pub const VROverlayError_TimedOut: vr_EVROverlayError = 34;
#[doc = " Errors that can occur around VR overlays"]
pub type vr_EVROverlayError = ::std::os::raw::c_uint;
pub const VRApplication_Other: vr_EVRApplicationType = 0;
pub const VRApplication_Scene: vr_EVRApplicationType = 1;
pub const VRApplication_Overlay: vr_EVRApplicationType = 2;
pub const VRApplication_Background: vr_EVRApplicationType = 3;
pub const VRApplication_Utility: vr_EVRApplicationType = 4;
pub const VRApplication_VRMonitor: vr_EVRApplicationType = 5;
pub const VRApplication_SteamWatchdog: vr_EVRApplicationType = 6;
pub const VRApplication_Bootstrapper: vr_EVRApplicationType = 7;
pub const VRApplication_WebHelper: vr_EVRApplicationType = 8;
pub const VRApplication_OpenXRInstance: vr_EVRApplicationType = 9;
pub const VRApplication_OpenXRScene: vr_EVRApplicationType = 10;
pub const VRApplication_OpenXROverlay: vr_EVRApplicationType = 11;
pub const VRApplication_Prism: vr_EVRApplicationType = 12;
pub const VRApplication_RoomView: vr_EVRApplicationType = 13;
pub const VRApplication_Max: vr_EVRApplicationType = 14;
#[doc = " enum values to pass in to VR_Init to identify whether the application will\n draw a 3D scene."]
pub type vr_EVRApplicationType = ::std::os::raw::c_uint;
pub const VRFirmwareError_None: vr_EVRFirmwareError = 0;
pub const VRFirmwareError_Success: vr_EVRFirmwareError = 1;
pub const VRFirmwareError_Fail: vr_EVRFirmwareError = 2;
#[doc = " error codes for firmware"]
pub type vr_EVRFirmwareError = ::std::os::raw::c_uint;
pub const VRNotificationError_OK: vr_EVRNotificationError = 0;
pub const VRNotificationError_InvalidNotificationId: vr_EVRNotificationError = 100;
pub const VRNotificationError_NotificationQueueFull: vr_EVRNotificationError = 101;
pub const VRNotificationError_InvalidOverlayHandle: vr_EVRNotificationError = 102;
pub const VRNotificationError_SystemWithUserValueAlreadyExists: vr_EVRNotificationError = 103;
pub const VRNotificationError_ServiceUnavailable: vr_EVRNotificationError = 104;
#[doc = " error codes for notifications"]
pub type vr_EVRNotificationError = ::std::os::raw::c_uint;
pub const VRSkeletalMotionRange_WithController: vr_EVRSkeletalMotionRange = 0;
pub const VRSkeletalMotionRange_WithoutController: vr_EVRSkeletalMotionRange = 1;
pub type vr_EVRSkeletalMotionRange = ::std::os::raw::c_uint;
pub const VRSkeletalTracking_Estimated: vr_EVRSkeletalTrackingLevel = 0;
pub const VRSkeletalTracking_Partial: vr_EVRSkeletalTrackingLevel = 1;
pub const VRSkeletalTracking_Full: vr_EVRSkeletalTrackingLevel = 2;
pub const VRSkeletalTrackingLevel_Count: vr_EVRSkeletalTrackingLevel = 3;
pub const VRSkeletalTrackingLevel_Max: vr_EVRSkeletalTrackingLevel = 2;
pub type vr_EVRSkeletalTrackingLevel = ::std::os::raw::c_uint;
#[doc = " Type used for referring to bones by their index"]
pub type vr_BoneIndex_t = i32;
pub const vr_k_unInvalidBoneIndex: vr_BoneIndex_t = -1;
pub const VRInitError_None: vr_EVRInitError = 0;
pub const VRInitError_Unknown: vr_EVRInitError = 1;
pub const VRInitError_Init_InstallationNotFound: vr_EVRInitError = 100;
pub const VRInitError_Init_InstallationCorrupt: vr_EVRInitError = 101;
pub const VRInitError_Init_VRClientDLLNotFound: vr_EVRInitError = 102;
pub const VRInitError_Init_FileNotFound: vr_EVRInitError = 103;
pub const VRInitError_Init_FactoryNotFound: vr_EVRInitError = 104;
pub const VRInitError_Init_InterfaceNotFound: vr_EVRInitError = 105;
pub const VRInitError_Init_InvalidInterface: vr_EVRInitError = 106;
pub const VRInitError_Init_UserConfigDirectoryInvalid: vr_EVRInitError = 107;
pub const VRInitError_Init_HmdNotFound: vr_EVRInitError = 108;
pub const VRInitError_Init_NotInitialized: vr_EVRInitError = 109;
pub const VRInitError_Init_PathRegistryNotFound: vr_EVRInitError = 110;
pub const VRInitError_Init_NoConfigPath: vr_EVRInitError = 111;
pub const VRInitError_Init_NoLogPath: vr_EVRInitError = 112;
pub const VRInitError_Init_PathRegistryNotWritable: vr_EVRInitError = 113;
pub const VRInitError_Init_AppInfoInitFailed: vr_EVRInitError = 114;
pub const VRInitError_Init_Retry: vr_EVRInitError = 115;
pub const VRInitError_Init_InitCanceledByUser: vr_EVRInitError = 116;
pub const VRInitError_Init_AnotherAppLaunching: vr_EVRInitError = 117;
pub const VRInitError_Init_SettingsInitFailed: vr_EVRInitError = 118;
pub const VRInitError_Init_ShuttingDown: vr_EVRInitError = 119;
pub const VRInitError_Init_TooManyObjects: vr_EVRInitError = 120;
pub const VRInitError_Init_NoServerForBackgroundApp: vr_EVRInitError = 121;
pub const VRInitError_Init_NotSupportedWithCompositor: vr_EVRInitError = 122;
pub const VRInitError_Init_NotAvailableToUtilityApps: vr_EVRInitError = 123;
pub const VRInitError_Init_Internal: vr_EVRInitError = 124;
pub const VRInitError_Init_HmdDriverIdIsNone: vr_EVRInitError = 125;
pub const VRInitError_Init_HmdNotFoundPresenceFailed: vr_EVRInitError = 126;
pub const VRInitError_Init_VRMonitorNotFound: vr_EVRInitError = 127;
pub const VRInitError_Init_VRMonitorStartupFailed: vr_EVRInitError = 128;
pub const VRInitError_Init_LowPowerWatchdogNotSupported: vr_EVRInitError = 129;
pub const VRInitError_Init_InvalidApplicationType: vr_EVRInitError = 130;
pub const VRInitError_Init_NotAvailableToWatchdogApps: vr_EVRInitError = 131;
pub const VRInitError_Init_WatchdogDisabledInSettings: vr_EVRInitError = 132;
pub const VRInitError_Init_VRDashboardNotFound: vr_EVRInitError = 133;
pub const VRInitError_Init_VRDashboardStartupFailed: vr_EVRInitError = 134;
pub const VRInitError_Init_VRHomeNotFound: vr_EVRInitError = 135;
pub const VRInitError_Init_VRHomeStartupFailed: vr_EVRInitError = 136;
pub const VRInitError_Init_RebootingBusy: vr_EVRInitError = 137;
pub const VRInitError_Init_FirmwareUpdateBusy: vr_EVRInitError = 138;
pub const VRInitError_Init_FirmwareRecoveryBusy: vr_EVRInitError = 139;
pub const VRInitError_Init_USBServiceBusy: vr_EVRInitError = 140;
pub const VRInitError_Init_VRWebHelperStartupFailed: vr_EVRInitError = 141;
pub const VRInitError_Init_TrackerManagerInitFailed: vr_EVRInitError = 142;
pub const VRInitError_Init_AlreadyRunning: vr_EVRInitError = 143;
pub const VRInitError_Init_FailedForVrMonitor: vr_EVRInitError = 144;
pub const VRInitError_Init_PropertyManagerInitFailed: vr_EVRInitError = 145;
pub const VRInitError_Init_WebServerFailed: vr_EVRInitError = 146;
pub const VRInitError_Init_IllegalTypeTransition: vr_EVRInitError = 147;
pub const VRInitError_Init_MismatchedRuntimes: vr_EVRInitError = 148;
pub const VRInitError_Init_InvalidProcessId: vr_EVRInitError = 149;
pub const VRInitError_Init_VRServiceStartupFailed: vr_EVRInitError = 150;
pub const VRInitError_Init_PrismNeedsNewDrivers: vr_EVRInitError = 151;
pub const VRInitError_Init_PrismStartupTimedOut: vr_EVRInitError = 152;
pub const VRInitError_Init_CouldNotStartPrism: vr_EVRInitError = 153;
pub const VRInitError_Init_PrismClientInitFailed: vr_EVRInitError = 154;
pub const VRInitError_Init_PrismClientStartFailed: vr_EVRInitError = 155;
pub const VRInitError_Init_PrismExitedUnexpectedly: vr_EVRInitError = 156;
pub const VRInitError_Init_BadLuid: vr_EVRInitError = 157;
pub const VRInitError_Init_NoServerForAppContainer: vr_EVRInitError = 158;
pub const VRInitError_Init_DuplicateBootstrapper: vr_EVRInitError = 159;
pub const VRInitError_Init_VRDashboardServicePending: vr_EVRInitError = 160;
pub const VRInitError_Init_VRDashboardServiceTimeout: vr_EVRInitError = 161;
pub const VRInitError_Init_VRDashboardServiceStopped: vr_EVRInitError = 162;
pub const VRInitError_Init_VRDashboardAlreadyStarted: vr_EVRInitError = 163;
pub const VRInitError_Init_VRDashboardCopyFailed: vr_EVRInitError = 164;
pub const VRInitError_Init_VRDashboardTokenFailure: vr_EVRInitError = 165;
pub const VRInitError_Init_VRDashboardEnvironmentFailure: vr_EVRInitError = 166;
pub const VRInitError_Init_VRDashboardPathFailure: vr_EVRInitError = 167;
pub const VRInitError_Driver_Failed: vr_EVRInitError = 200;
pub const VRInitError_Driver_Unknown: vr_EVRInitError = 201;
pub const VRInitError_Driver_HmdUnknown: vr_EVRInitError = 202;
pub const VRInitError_Driver_NotLoaded: vr_EVRInitError = 203;
pub const VRInitError_Driver_RuntimeOutOfDate: vr_EVRInitError = 204;
pub const VRInitError_Driver_HmdInUse: vr_EVRInitError = 205;
pub const VRInitError_Driver_NotCalibrated: vr_EVRInitError = 206;
pub const VRInitError_Driver_CalibrationInvalid: vr_EVRInitError = 207;
pub const VRInitError_Driver_HmdDisplayNotFound: vr_EVRInitError = 208;
pub const VRInitError_Driver_TrackedDeviceInterfaceUnknown: vr_EVRInitError = 209;
pub const VRInitError_Driver_HmdDriverIdOutOfBounds: vr_EVRInitError = 211;
pub const VRInitError_Driver_HmdDisplayMirrored: vr_EVRInitError = 212;
pub const VRInitError_Driver_HmdDisplayNotFoundLaptop: vr_EVRInitError = 213;
pub const VRInitError_Driver_PeerDriverNotInstalled: vr_EVRInitError = 214;
pub const VRInitError_Driver_WirelessHmdNotConnected: vr_EVRInitError = 215;
pub const VRInitError_IPC_ServerInitFailed: vr_EVRInitError = 300;
pub const VRInitError_IPC_ConnectFailed: vr_EVRInitError = 301;
pub const VRInitError_IPC_SharedStateInitFailed: vr_EVRInitError = 302;
pub const VRInitError_IPC_CompositorInitFailed: vr_EVRInitError = 303;
pub const VRInitError_IPC_MutexInitFailed: vr_EVRInitError = 304;
pub const VRInitError_IPC_Failed: vr_EVRInitError = 305;
pub const VRInitError_IPC_CompositorConnectFailed: vr_EVRInitError = 306;
pub const VRInitError_IPC_CompositorInvalidConnectResponse: vr_EVRInitError = 307;
pub const VRInitError_IPC_ConnectFailedAfterMultipleAttempts: vr_EVRInitError = 308;
pub const VRInitError_IPC_ConnectFailedAfterTargetExited: vr_EVRInitError = 309;
pub const VRInitError_IPC_NamespaceUnavailable: vr_EVRInitError = 310;
pub const VRInitError_Compositor_Failed: vr_EVRInitError = 400;
pub const VRInitError_Compositor_D3D11HardwareRequired: vr_EVRInitError = 401;
pub const VRInitError_Compositor_FirmwareRequiresUpdate: vr_EVRInitError = 402;
pub const VRInitError_Compositor_OverlayInitFailed: vr_EVRInitError = 403;
pub const VRInitError_Compositor_ScreenshotsInitFailed: vr_EVRInitError = 404;
pub const VRInitError_Compositor_UnableToCreateDevice: vr_EVRInitError = 405;
pub const VRInitError_Compositor_SharedStateIsNull: vr_EVRInitError = 406;
pub const VRInitError_Compositor_NotificationManagerIsNull: vr_EVRInitError = 407;
pub const VRInitError_Compositor_ResourceManagerClientIsNull: vr_EVRInitError = 408;
pub const VRInitError_Compositor_MessageOverlaySharedStateInitFailure: vr_EVRInitError = 409;
pub const VRInitError_Compositor_PropertiesInterfaceIsNull: vr_EVRInitError = 410;
pub const VRInitError_Compositor_CreateFullscreenWindowFailed: vr_EVRInitError = 411;
pub const VRInitError_Compositor_SettingsInterfaceIsNull: vr_EVRInitError = 412;
pub const VRInitError_Compositor_FailedToShowWindow: vr_EVRInitError = 413;
pub const VRInitError_Compositor_DistortInterfaceIsNull: vr_EVRInitError = 414;
pub const VRInitError_Compositor_DisplayFrequencyFailure: vr_EVRInitError = 415;
pub const VRInitError_Compositor_RendererInitializationFailed: vr_EVRInitError = 416;
pub const VRInitError_Compositor_DXGIFactoryInterfaceIsNull: vr_EVRInitError = 417;
pub const VRInitError_Compositor_DXGIFactoryCreateFailed: vr_EVRInitError = 418;
pub const VRInitError_Compositor_DXGIFactoryQueryFailed: vr_EVRInitError = 419;
pub const VRInitError_Compositor_InvalidAdapterDesktop: vr_EVRInitError = 420;
pub const VRInitError_Compositor_InvalidHmdAttachment: vr_EVRInitError = 421;
pub const VRInitError_Compositor_InvalidOutputDesktop: vr_EVRInitError = 422;
pub const VRInitError_Compositor_InvalidDeviceProvided: vr_EVRInitError = 423;
pub const VRInitError_Compositor_D3D11RendererInitializationFailed: vr_EVRInitError = 424;
pub const VRInitError_Compositor_FailedToFindDisplayMode: vr_EVRInitError = 425;
pub const VRInitError_Compositor_FailedToCreateSwapChain: vr_EVRInitError = 426;
pub const VRInitError_Compositor_FailedToGetBackBuffer: vr_EVRInitError = 427;
pub const VRInitError_Compositor_FailedToCreateRenderTarget: vr_EVRInitError = 428;
pub const VRInitError_Compositor_FailedToCreateDXGI2SwapChain: vr_EVRInitError = 429;
pub const VRInitError_Compositor_FailedtoGetDXGI2BackBuffer: vr_EVRInitError = 430;
pub const VRInitError_Compositor_FailedToCreateDXGI2RenderTarget: vr_EVRInitError = 431;
pub const VRInitError_Compositor_FailedToGetDXGIDeviceInterface: vr_EVRInitError = 432;
pub const VRInitError_Compositor_SelectDisplayMode: vr_EVRInitError = 433;
pub const VRInitError_Compositor_FailedToCreateNvAPIRenderTargets: vr_EVRInitError = 434;
pub const VRInitError_Compositor_NvAPISetDisplayMode: vr_EVRInitError = 435;
pub const VRInitError_Compositor_FailedToCreateDirectModeDisplay: vr_EVRInitError = 436;
pub const VRInitError_Compositor_InvalidHmdPropertyContainer: vr_EVRInitError = 437;
pub const VRInitError_Compositor_UpdateDisplayFrequency: vr_EVRInitError = 438;
pub const VRInitError_Compositor_CreateRasterizerState: vr_EVRInitError = 439;
pub const VRInitError_Compositor_CreateWireframeRasterizerState: vr_EVRInitError = 440;
pub const VRInitError_Compositor_CreateSamplerState: vr_EVRInitError = 441;
pub const VRInitError_Compositor_CreateClampToBorderSamplerState: vr_EVRInitError = 442;
pub const VRInitError_Compositor_CreateAnisoSamplerState: vr_EVRInitError = 443;
pub const VRInitError_Compositor_CreateOverlaySamplerState: vr_EVRInitError = 444;
pub const VRInitError_Compositor_CreatePanoramaSamplerState: vr_EVRInitError = 445;
pub const VRInitError_Compositor_CreateFontSamplerState: vr_EVRInitError = 446;
pub const VRInitError_Compositor_CreateNoBlendState: vr_EVRInitError = 447;
pub const VRInitError_Compositor_CreateBlendState: vr_EVRInitError = 448;
pub const VRInitError_Compositor_CreateAlphaBlendState: vr_EVRInitError = 449;
pub const VRInitError_Compositor_CreateBlendStateMaskR: vr_EVRInitError = 450;
pub const VRInitError_Compositor_CreateBlendStateMaskG: vr_EVRInitError = 451;
pub const VRInitError_Compositor_CreateBlendStateMaskB: vr_EVRInitError = 452;
pub const VRInitError_Compositor_CreateDepthStencilState: vr_EVRInitError = 453;
pub const VRInitError_Compositor_CreateDepthStencilStateNoWrite: vr_EVRInitError = 454;
pub const VRInitError_Compositor_CreateDepthStencilStateNoDepth: vr_EVRInitError = 455;
pub const VRInitError_Compositor_CreateFlushTexture: vr_EVRInitError = 456;
pub const VRInitError_Compositor_CreateDistortionSurfaces: vr_EVRInitError = 457;
pub const VRInitError_Compositor_CreateConstantBuffer: vr_EVRInitError = 458;
pub const VRInitError_Compositor_CreateHmdPoseConstantBuffer: vr_EVRInitError = 459;
pub const VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer: vr_EVRInitError = 460;
pub const VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer: vr_EVRInitError = 461;
pub const VRInitError_Compositor_CreateOverlayConstantBuffer: vr_EVRInitError = 462;
pub const VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer: vr_EVRInitError = 463;
pub const VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer: vr_EVRInitError =
    464;
pub const VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer: vr_EVRInitError =
    465;
pub const VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer: vr_EVRInitError =
    466;
pub const VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer:
    vr_EVRInitError = 467;
pub const VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer: vr_EVRInitError = 468;
pub const VRInitError_Compositor_CreateGeomConstantBuffer: vr_EVRInitError = 469;
pub const VRInitError_Compositor_CreatePanelMaskConstantBuffer: vr_EVRInitError = 470;
pub const VRInitError_Compositor_CreatePixelSimUBO: vr_EVRInitError = 471;
pub const VRInitError_Compositor_CreateMSAARenderTextures: vr_EVRInitError = 472;
pub const VRInitError_Compositor_CreateResolveRenderTextures: vr_EVRInitError = 473;
pub const VRInitError_Compositor_CreateComputeResolveRenderTextures: vr_EVRInitError = 474;
pub const VRInitError_Compositor_CreateDriverDirectModeResolveTextures: vr_EVRInitError = 475;
pub const VRInitError_Compositor_OpenDriverDirectModeResolveTextures: vr_EVRInitError = 476;
pub const VRInitError_Compositor_CreateFallbackSyncTexture: vr_EVRInitError = 477;
pub const VRInitError_Compositor_ShareFallbackSyncTexture: vr_EVRInitError = 478;
pub const VRInitError_Compositor_CreateOverlayIndexBuffer: vr_EVRInitError = 479;
pub const VRInitError_Compositor_CreateOverlayVertexBuffer: vr_EVRInitError = 480;
pub const VRInitError_Compositor_CreateTextVertexBuffer: vr_EVRInitError = 481;
pub const VRInitError_Compositor_CreateTextIndexBuffer: vr_EVRInitError = 482;
pub const VRInitError_Compositor_CreateMirrorTextures: vr_EVRInitError = 483;
pub const VRInitError_Compositor_CreateLastFrameRenderTexture: vr_EVRInitError = 484;
pub const VRInitError_Compositor_CreateMirrorOverlay: vr_EVRInitError = 485;
pub const VRInitError_Compositor_FailedToCreateVirtualDisplayBackbuffer: vr_EVRInitError = 486;
pub const VRInitError_Compositor_DisplayModeNotSupported: vr_EVRInitError = 487;
pub const VRInitError_Compositor_CreateOverlayInvalidCall: vr_EVRInitError = 488;
pub const VRInitError_Compositor_CreateOverlayAlreadyInitialized: vr_EVRInitError = 489;
pub const VRInitError_Compositor_FailedToCreateMailbox: vr_EVRInitError = 490;
pub const VRInitError_Compositor_WindowInterfaceIsNull: vr_EVRInitError = 491;
pub const VRInitError_Compositor_SystemLayerCreateInstance: vr_EVRInitError = 492;
pub const VRInitError_Compositor_SystemLayerCreateSession: vr_EVRInitError = 493;
pub const VRInitError_Compositor_CreateInverseDistortUVs: vr_EVRInitError = 494;
pub const VRInitError_Compositor_CreateBackbufferDepth: vr_EVRInitError = 495;
pub const VRInitError_Compositor_CannotDRMLeaseDisplay: vr_EVRInitError = 496;
pub const VRInitError_Compositor_CannotConnectToDisplayServer: vr_EVRInitError = 497;
pub const VRInitError_Compositor_GnomeNoDRMLeasing: vr_EVRInitError = 498;
pub const VRInitError_Compositor_FailedToInitializeEncoder: vr_EVRInitError = 499;
pub const VRInitError_Compositor_CreateBlurTexture: vr_EVRInitError = 500;
pub const VRInitError_VendorSpecific_UnableToConnectToOculusRuntime: vr_EVRInitError = 1000;
pub const VRInitError_VendorSpecific_WindowsNotInDevMode: vr_EVRInitError = 1001;
pub const VRInitError_VendorSpecific_OculusLinkNotEnabled: vr_EVRInitError = 1002;
pub const VRInitError_VendorSpecific_HmdFound_CantOpenDevice: vr_EVRInitError = 1101;
pub const VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart: vr_EVRInitError = 1102;
pub const VRInitError_VendorSpecific_HmdFound_NoStoredConfig: vr_EVRInitError = 1103;
pub const VRInitError_VendorSpecific_HmdFound_ConfigTooBig: vr_EVRInitError = 1104;
pub const VRInitError_VendorSpecific_HmdFound_ConfigTooSmall: vr_EVRInitError = 1105;
pub const VRInitError_VendorSpecific_HmdFound_UnableToInitZLib: vr_EVRInitError = 1106;
pub const VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion: vr_EVRInitError = 1107;
pub const VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart: vr_EVRInitError = 1108;
pub const VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart: vr_EVRInitError = 1109;
pub const VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext: vr_EVRInitError = 1110;
pub const VRInitError_VendorSpecific_HmdFound_UserDataAddressRange: vr_EVRInitError = 1111;
pub const VRInitError_VendorSpecific_HmdFound_UserDataError: vr_EVRInitError = 1112;
pub const VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck: vr_EVRInitError = 1113;
pub const VRInitError_VendorSpecific_OculusRuntimeBadInstall: vr_EVRInitError = 1114;
pub const VRInitError_VendorSpecific_HmdFound_UnexpectedConfiguration_1: vr_EVRInitError = 1115;
pub const VRInitError_Steam_SteamInstallationNotFound: vr_EVRInitError = 2000;
pub const VRInitError_LastError: vr_EVRInitError = 2001;
#[doc = " error codes returned by Vr_Init"]
pub type vr_EVRInitError = ::std::os::raw::c_uint;
pub const VRScreenshotType_None: vr_EVRScreenshotType = 0;
pub const VRScreenshotType_Mono: vr_EVRScreenshotType = 1;
pub const VRScreenshotType_Stereo: vr_EVRScreenshotType = 2;
pub const VRScreenshotType_Cubemap: vr_EVRScreenshotType = 3;
pub const VRScreenshotType_MonoPanorama: vr_EVRScreenshotType = 4;
pub const VRScreenshotType_StereoPanorama: vr_EVRScreenshotType = 5;
pub type vr_EVRScreenshotType = ::std::os::raw::c_uint;
pub const VRScreenshotPropertyFilenames_Preview: vr_EVRScreenshotPropertyFilenames = 0;
pub const VRScreenshotPropertyFilenames_VR: vr_EVRScreenshotPropertyFilenames = 1;
pub type vr_EVRScreenshotPropertyFilenames = ::std::os::raw::c_uint;
pub const VRTrackedCameraError_None: vr_EVRTrackedCameraError = 0;
pub const VRTrackedCameraError_OperationFailed: vr_EVRTrackedCameraError = 100;
pub const VRTrackedCameraError_InvalidHandle: vr_EVRTrackedCameraError = 101;
pub const VRTrackedCameraError_InvalidFrameHeaderVersion: vr_EVRTrackedCameraError = 102;
pub const VRTrackedCameraError_OutOfHandles: vr_EVRTrackedCameraError = 103;
pub const VRTrackedCameraError_IPCFailure: vr_EVRTrackedCameraError = 104;
pub const VRTrackedCameraError_NotSupportedForThisDevice: vr_EVRTrackedCameraError = 105;
pub const VRTrackedCameraError_SharedMemoryFailure: vr_EVRTrackedCameraError = 106;
pub const VRTrackedCameraError_FrameBufferingFailure: vr_EVRTrackedCameraError = 107;
pub const VRTrackedCameraError_StreamSetupFailure: vr_EVRTrackedCameraError = 108;
pub const VRTrackedCameraError_InvalidGLTextureId: vr_EVRTrackedCameraError = 109;
pub const VRTrackedCameraError_InvalidSharedTextureHandle: vr_EVRTrackedCameraError = 110;
pub const VRTrackedCameraError_FailedToGetGLTextureId: vr_EVRTrackedCameraError = 111;
pub const VRTrackedCameraError_SharedTextureFailure: vr_EVRTrackedCameraError = 112;
pub const VRTrackedCameraError_NoFrameAvailable: vr_EVRTrackedCameraError = 113;
pub const VRTrackedCameraError_InvalidArgument: vr_EVRTrackedCameraError = 114;
pub const VRTrackedCameraError_InvalidFrameBufferSize: vr_EVRTrackedCameraError = 115;
pub type vr_EVRTrackedCameraError = ::std::os::raw::c_uint;
pub const EVRTrackedCameraFrameLayout_Mono: vr_EVRTrackedCameraFrameLayout = 1;
pub const EVRTrackedCameraFrameLayout_Stereo: vr_EVRTrackedCameraFrameLayout = 2;
pub const EVRTrackedCameraFrameLayout_VerticalLayout: vr_EVRTrackedCameraFrameLayout = 16;
pub const EVRTrackedCameraFrameLayout_HorizontalLayout: vr_EVRTrackedCameraFrameLayout = 32;
pub type vr_EVRTrackedCameraFrameLayout = ::std::os::raw::c_uint;
pub const VRTrackedCameraFrameType_Distorted: vr_EVRTrackedCameraFrameType = 0;
pub const VRTrackedCameraFrameType_Undistorted: vr_EVRTrackedCameraFrameType = 1;
pub const VRTrackedCameraFrameType_MaximumUndistorted: vr_EVRTrackedCameraFrameType = 2;
pub const MAX_CAMERA_FRAME_TYPES: vr_EVRTrackedCameraFrameType = 3;
pub type vr_EVRTrackedCameraFrameType = ::std::os::raw::c_uint;
pub const VRDistortionFunctionType_None: vr_EVRDistortionFunctionType = 0;
pub const VRDistortionFunctionType_FTheta: vr_EVRDistortionFunctionType = 1;
pub const VRDistortionFunctionType_Extended_FTheta: vr_EVRDistortionFunctionType = 2;
pub const MAX_DISTORTION_FUNCTION_TYPES: vr_EVRDistortionFunctionType = 3;
pub type vr_EVRDistortionFunctionType = ::std::os::raw::c_uint;
pub const vr_k_unMaxDistortionFunctionParameters: u32 = 8;
pub type vr_TrackedCameraHandle_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_CameraVideoStreamFrameHeader_t {
    pub eFrameType: vr_EVRTrackedCameraFrameType,
    pub nWidth: u32,
    pub nHeight: u32,
    pub nBytesPerPixel: u32,
    pub nFrameSequence: u32,
    pub trackedDevicePose: vr_TrackedDevicePose_t,
    pub ulFrameExposureTime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_CameraVideoStreamFrameHeader_t"]
        [::std::mem::size_of::<vr_CameraVideoStreamFrameHeader_t>() - 112usize];
    ["Alignment of vr_CameraVideoStreamFrameHeader_t"]
        [::std::mem::align_of::<vr_CameraVideoStreamFrameHeader_t>() - 8usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::eFrameType"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, eFrameType) - 0usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::nWidth"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, nWidth) - 4usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::nHeight"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, nHeight) - 8usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::nBytesPerPixel"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, nBytesPerPixel) - 12usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::nFrameSequence"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, nFrameSequence) - 16usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::trackedDevicePose"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, trackedDevicePose) - 20usize];
    ["Offset of field: vr_CameraVideoStreamFrameHeader_t::ulFrameExposureTime"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrameHeader_t, ulFrameExposureTime) - 104usize];
};
pub type vr_ScreenshotHandle_t = u32;
pub const vr_k_unScreenshotHandleInvalid: u32 = 0;
#[doc = " Compositor frame timing reprojection flags."]
pub const vr_VRCompositor_ReprojectionReason_Cpu: u32 = 1;
pub const vr_VRCompositor_ReprojectionReason_Gpu: u32 = 2;
pub const vr_VRCompositor_ReprojectionAsync: u32 = 4;
pub const vr_VRCompositor_ReprojectionMotion: u32 = 8;
pub const vr_VRCompositor_PredictionMask: u32 = 240;
pub const vr_VRCompositor_ThrottleMask: u32 = 3840;
#[doc = " Provides a single frame's timing information to the app"]
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vr_Compositor_FrameTiming {
    pub m_nSize: u32,
    pub m_nFrameIndex: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
    #[doc = " Absolute time reference for comparing frames.  This aligns with the vsync that running start is relative to."]
    pub m_flSystemTimeInSeconds: f64,
    #[doc = " These times may include work from other processes due to OS scheduling.\n The fewer packets of work these are broken up into, the less likely this will happen.\n GPU work can be broken up by calling Flush.  This can sometimes be useful to get the GPU started\n processing that work earlier in the frame."]
    pub m_flPreSubmitGpuMs: f32,
    pub m_flPostSubmitGpuMs: f32,
    pub m_flTotalRenderGpuMs: f32,
    pub m_flCompositorRenderGpuMs: f32,
    pub m_flCompositorRenderCpuMs: f32,
    pub m_flCompositorIdleCpuMs: f32,
    #[doc = " Miscellaneous measured intervals."]
    pub m_flClientFrameIntervalMs: f32,
    pub m_flPresentCallCpuMs: f32,
    pub m_flWaitForPresentCpuMs: f32,
    pub m_flSubmitFrameMs: f32,
    #[doc = " The following are all relative to this frame's SystemTimeInSeconds"]
    pub m_flWaitGetPosesCalledMs: f32,
    pub m_flNewPosesReadyMs: f32,
    pub m_flNewFrameReadyMs: f32,
    pub m_flCompositorUpdateStartMs: f32,
    pub m_flCompositorUpdateEndMs: f32,
    pub m_flCompositorRenderStartMs: f32,
    pub m_HmdPose: vr_TrackedDevicePose_t,
    pub m_nNumVSyncsReadyForUse: u32,
    pub m_nNumVSyncsToFirstView: u32,
    pub m_flTransferLatencyMs: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_Compositor_FrameTiming"]
        [::std::mem::size_of::<vr_Compositor_FrameTiming>() - 188usize];
    ["Alignment of vr_Compositor_FrameTiming"]
        [::std::mem::align_of::<vr_Compositor_FrameTiming>() - 4usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nSize"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nSize) - 0usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nFrameIndex"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nFrameIndex) - 4usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nNumFramePresents"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nNumFramePresents) - 8usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nNumMisPresented"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nNumMisPresented) - 12usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nNumDroppedFrames"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nNumDroppedFrames) - 16usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nReprojectionFlags"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nReprojectionFlags) - 20usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flSystemTimeInSeconds"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flSystemTimeInSeconds) - 24usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flPreSubmitGpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flPreSubmitGpuMs) - 32usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flPostSubmitGpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flPostSubmitGpuMs) - 36usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flTotalRenderGpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flTotalRenderGpuMs) - 40usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorRenderGpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorRenderGpuMs) - 44usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorRenderCpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorRenderCpuMs) - 48usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorIdleCpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorIdleCpuMs) - 52usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flClientFrameIntervalMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flClientFrameIntervalMs) - 56usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flPresentCallCpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flPresentCallCpuMs) - 60usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flWaitForPresentCpuMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flWaitForPresentCpuMs) - 64usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flSubmitFrameMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flSubmitFrameMs) - 68usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flWaitGetPosesCalledMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flWaitGetPosesCalledMs) - 72usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flNewPosesReadyMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flNewPosesReadyMs) - 76usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flNewFrameReadyMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flNewFrameReadyMs) - 80usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorUpdateStartMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorUpdateStartMs) - 84usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorUpdateEndMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorUpdateEndMs) - 88usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flCompositorRenderStartMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flCompositorRenderStartMs) - 92usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_HmdPose"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_HmdPose) - 96usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nNumVSyncsReadyForUse"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nNumVSyncsReadyForUse) - 176usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_nNumVSyncsToFirstView"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_nNumVSyncsToFirstView) - 180usize];
    ["Offset of field: vr_Compositor_FrameTiming::m_flTransferLatencyMs"]
        [::std::mem::offset_of!(vr_Compositor_FrameTiming, m_flTransferLatencyMs) - 184usize];
};
#[doc = " Provides compositor benchmark results to the app"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_Compositor_BenchmarkResults {
    pub m_flMegaPixelsPerSecond: f32,
    pub m_flHmdRecommendedMegaPixelsPerSecond: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_Compositor_BenchmarkResults"]
        [::std::mem::size_of::<vr_Compositor_BenchmarkResults>() - 8usize];
    ["Alignment of vr_Compositor_BenchmarkResults"]
        [::std::mem::align_of::<vr_Compositor_BenchmarkResults>() - 4usize];
    ["Offset of field: vr_Compositor_BenchmarkResults::m_flMegaPixelsPerSecond"]
        [::std::mem::offset_of!(vr_Compositor_BenchmarkResults, m_flMegaPixelsPerSecond) - 0usize];
    ["Offset of field: vr_Compositor_BenchmarkResults::m_flHmdRecommendedMegaPixelsPerSecond"][::std::mem::offset_of!(
        vr_Compositor_BenchmarkResults,
        m_flHmdRecommendedMegaPixelsPerSecond
    )
        - 4usize];
};
#[doc = " Frame timing data provided by direct mode drivers."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_DriverDirectMode_FrameTiming {
    pub m_nSize: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_DriverDirectMode_FrameTiming"]
        [::std::mem::size_of::<vr_DriverDirectMode_FrameTiming>() - 20usize];
    ["Alignment of vr_DriverDirectMode_FrameTiming"]
        [::std::mem::align_of::<vr_DriverDirectMode_FrameTiming>() - 4usize];
    ["Offset of field: vr_DriverDirectMode_FrameTiming::m_nSize"]
        [::std::mem::offset_of!(vr_DriverDirectMode_FrameTiming, m_nSize) - 0usize];
    ["Offset of field: vr_DriverDirectMode_FrameTiming::m_nNumFramePresents"]
        [::std::mem::offset_of!(vr_DriverDirectMode_FrameTiming, m_nNumFramePresents) - 4usize];
    ["Offset of field: vr_DriverDirectMode_FrameTiming::m_nNumMisPresented"]
        [::std::mem::offset_of!(vr_DriverDirectMode_FrameTiming, m_nNumMisPresented) - 8usize];
    ["Offset of field: vr_DriverDirectMode_FrameTiming::m_nNumDroppedFrames"]
        [::std::mem::offset_of!(vr_DriverDirectMode_FrameTiming, m_nNumDroppedFrames) - 12usize];
    ["Offset of field: vr_DriverDirectMode_FrameTiming::m_nReprojectionFlags"]
        [::std::mem::offset_of!(vr_DriverDirectMode_FrameTiming, m_nReprojectionFlags) - 16usize];
};
#[doc = " These flags will be set on DriverDirectMode_FrameTiming::m_nReprojectionFlags when IVRDriverDirectModeComponent::GetFrameTiming is called for drivers to optionally respond to."]
pub const vr_VRCompositor_ReprojectionMotion_Enabled: u32 = 256;
pub const vr_VRCompositor_ReprojectionMotion_ForcedOn: u32 = 512;
pub const vr_VRCompositor_ReprojectionMotion_AppThrottled: u32 = 1024;
pub const VSync_None: vr_EVSync = 0;
pub const VSync_WaitRender: vr_EVSync = 1;
pub const VSync_NoWaitRender: vr_EVSync = 2;
pub type vr_EVSync = ::std::os::raw::c_uint;
pub const EVRMuraCorrectionMode_Default: vr_EVRMuraCorrectionMode = 0;
pub const EVRMuraCorrectionMode_NoCorrection: vr_EVRMuraCorrectionMode = 1;
pub type vr_EVRMuraCorrectionMode = ::std::os::raw::c_uint;
pub const OffScale_AccelX: vr_Imu_OffScaleFlags = 1;
pub const OffScale_AccelY: vr_Imu_OffScaleFlags = 2;
pub const OffScale_AccelZ: vr_Imu_OffScaleFlags = 4;
pub const OffScale_GyroX: vr_Imu_OffScaleFlags = 8;
pub const OffScale_GyroY: vr_Imu_OffScaleFlags = 16;
pub const OffScale_GyroZ: vr_Imu_OffScaleFlags = 32;
#[doc = " raw IMU data provided by IVRIOBuffer from paths to tracked devices with IMUs"]
pub type vr_Imu_OffScaleFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_ImuSample_t {
    pub fSampleTime: f64,
    pub vAccel: vr_HmdVector3d_t,
    pub vGyro: vr_HmdVector3d_t,
    pub unOffScaleFlags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_ImuSample_t"][::std::mem::size_of::<vr_ImuSample_t>() - 64usize];
    ["Alignment of vr_ImuSample_t"][::std::mem::align_of::<vr_ImuSample_t>() - 8usize];
    ["Offset of field: vr_ImuSample_t::fSampleTime"]
        [::std::mem::offset_of!(vr_ImuSample_t, fSampleTime) - 0usize];
    ["Offset of field: vr_ImuSample_t::vAccel"]
        [::std::mem::offset_of!(vr_ImuSample_t, vAccel) - 8usize];
    ["Offset of field: vr_ImuSample_t::vGyro"]
        [::std::mem::offset_of!(vr_ImuSample_t, vGyro) - 32usize];
    ["Offset of field: vr_ImuSample_t::unOffScaleFlags"]
        [::std::mem::offset_of!(vr_ImuSample_t, unOffScaleFlags) - 56usize];
};
pub const CVS_FORMAT_UNKNOWN: vr_ECameraVideoStreamFormat = 0;
pub const CVS_FORMAT_RAW10: vr_ECameraVideoStreamFormat = 1;
pub const CVS_FORMAT_NV12: vr_ECameraVideoStreamFormat = 2;
pub const CVS_FORMAT_RGB24: vr_ECameraVideoStreamFormat = 3;
pub const CVS_FORMAT_NV12_2: vr_ECameraVideoStreamFormat = 4;
pub const CVS_FORMAT_YUYV16: vr_ECameraVideoStreamFormat = 5;
pub const CVS_FORMAT_BAYER16BG: vr_ECameraVideoStreamFormat = 6;
pub const CVS_FORMAT_MJPEG: vr_ECameraVideoStreamFormat = 7;
pub const CVS_FORMAT_RGBX32: vr_ECameraVideoStreamFormat = 8;
pub const CVS_MAX_FORMATS: vr_ECameraVideoStreamFormat = 9;
pub type vr_ECameraVideoStreamFormat = ::std::os::raw::c_uint;
pub const CAMERA_COMPAT_MODE_BULK_DEFAULT: vr_ECameraCompatibilityMode = 0;
pub const CAMERA_COMPAT_MODE_BULK_64K_DMA: vr_ECameraCompatibilityMode = 1;
pub const CAMERA_COMPAT_MODE_BULK_16K_DMA: vr_ECameraCompatibilityMode = 2;
pub const CAMERA_COMPAT_MODE_BULK_8K_DMA: vr_ECameraCompatibilityMode = 3;
pub const CAMERA_COMPAT_MODE_ISO_52FPS: vr_ECameraCompatibilityMode = 4;
pub const CAMERA_COMPAT_MODE_ISO_50FPS: vr_ECameraCompatibilityMode = 5;
pub const CAMERA_COMPAT_MODE_ISO_48FPS: vr_ECameraCompatibilityMode = 6;
pub const CAMERA_COMPAT_MODE_ISO_46FPS: vr_ECameraCompatibilityMode = 7;
pub const CAMERA_COMPAT_MODE_ISO_44FPS: vr_ECameraCompatibilityMode = 8;
pub const CAMERA_COMPAT_MODE_ISO_42FPS: vr_ECameraCompatibilityMode = 9;
pub const CAMERA_COMPAT_MODE_ISO_40FPS: vr_ECameraCompatibilityMode = 10;
pub const CAMERA_COMPAT_MODE_ISO_35FPS: vr_ECameraCompatibilityMode = 11;
pub const CAMERA_COMPAT_MODE_ISO_30FPS: vr_ECameraCompatibilityMode = 12;
pub const CAMERA_COMPAT_MODE_ISO_15FPS: vr_ECameraCompatibilityMode = 13;
pub const MAX_CAMERA_COMPAT_MODES: vr_ECameraCompatibilityMode = 14;
pub type vr_ECameraCompatibilityMode = ::std::os::raw::c_uint;
pub const CAMERA_ROOMVIEW_STYLE_DEFAULT: vr_ECameraRoomViewStyle = 0;
pub const CAMERA_ROOMVIEW_STYLE_EDGE_A: vr_ECameraRoomViewStyle = 1;
pub const CAMERA_ROOMVIEW_STYLE_EDGE_B: vr_ECameraRoomViewStyle = 2;
pub const CAMERA_ROOMVIEW_STYLE_VIDEO_TRANSLUSCENT: vr_ECameraRoomViewStyle = 3;
pub const CAMERA_ROOMVIEW_STYLE_VIDEO_OPAQUE: vr_ECameraRoomViewStyle = 4;
pub const CAMERA_ROOMVIEW_STYLE_COUNT: vr_ECameraRoomViewStyle = 5;
pub type vr_ECameraRoomViewStyle = ::std::os::raw::c_uint;
pub const vr_k_unMaxCameras: u32 = 4;
pub const vr_k_unMaxCameraFrameSharedHandles: u32 = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_CameraVideoStreamFrame_t {
    pub m_nStreamFormat: vr_ECameraVideoStreamFormat,
    pub m_nWidth: u32,
    pub m_nHeight: u32,
    pub m_nImageDataSize: u32,
    pub m_nFrameSequence: u32,
    pub m_nBufferIndex: u32,
    pub m_nBufferCount: u32,
    pub m_nExposureTime: u32,
    pub m_nISPFrameTimeStamp: u32,
    pub m_nISPReferenceTimeStamp: u32,
    pub m_nSyncCounter: u32,
    pub m_nCamSyncEvents: u32,
    pub m_nISPSyncEvents: u32,
    pub m_flReferenceCamSyncTime: f64,
    pub m_flFrameElapsedTime: f64,
    pub m_flFrameDeliveryRate: f64,
    pub m_flFrameCaptureTime_DriverAbsolute: f64,
    pub m_flFrameCaptureTime_ServerRelative: f64,
    pub m_nFrameCaptureTicks_ServerAbsolute: u64,
    pub m_flFrameCaptureTime_ClientRelative: f64,
    pub m_flSyncMarkerError: f64,
    pub m_RawTrackedDevicePose: vr_TrackedDevicePose_t,
    pub m_pImageData: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_CameraVideoStreamFrame_t"]
        [::std::mem::size_of::<vr_CameraVideoStreamFrame_t>() - 208usize];
    ["Alignment of vr_CameraVideoStreamFrame_t"]
        [::std::mem::align_of::<vr_CameraVideoStreamFrame_t>() - 8usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nStreamFormat"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nStreamFormat) - 0usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nWidth"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nWidth) - 4usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nHeight"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nHeight) - 8usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nImageDataSize"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nImageDataSize) - 12usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nFrameSequence"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nFrameSequence) - 16usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nBufferIndex"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nBufferIndex) - 20usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nBufferCount"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nBufferCount) - 24usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nExposureTime"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nExposureTime) - 28usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nISPFrameTimeStamp"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nISPFrameTimeStamp) - 32usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nISPReferenceTimeStamp"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nISPReferenceTimeStamp) - 36usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nSyncCounter"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nSyncCounter) - 40usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nCamSyncEvents"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nCamSyncEvents) - 44usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nISPSyncEvents"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_nISPSyncEvents) - 48usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flReferenceCamSyncTime"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_flReferenceCamSyncTime) - 56usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flFrameElapsedTime"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_flFrameElapsedTime) - 64usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flFrameDeliveryRate"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_flFrameDeliveryRate) - 72usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flFrameCaptureTime_DriverAbsolute"][::std::mem::offset_of!(
        vr_CameraVideoStreamFrame_t,
        m_flFrameCaptureTime_DriverAbsolute
    )
        - 80usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flFrameCaptureTime_ServerRelative"][::std::mem::offset_of!(
        vr_CameraVideoStreamFrame_t,
        m_flFrameCaptureTime_ServerRelative
    )
        - 88usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_nFrameCaptureTicks_ServerAbsolute"][::std::mem::offset_of!(
        vr_CameraVideoStreamFrame_t,
        m_nFrameCaptureTicks_ServerAbsolute
    )
        - 96usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flFrameCaptureTime_ClientRelative"][::std::mem::offset_of!(
        vr_CameraVideoStreamFrame_t,
        m_flFrameCaptureTime_ClientRelative
    )
        - 104usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_flSyncMarkerError"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_flSyncMarkerError) - 112usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_RawTrackedDevicePose"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_RawTrackedDevicePose) - 120usize];
    ["Offset of field: vr_CameraVideoStreamFrame_t::m_pImageData"]
        [::std::mem::offset_of!(vr_CameraVideoStreamFrame_t, m_pImageData) - 200usize];
};
pub const VRSettingsError_None: vr_EVRSettingsError = 0;
pub const VRSettingsError_IPCFailed: vr_EVRSettingsError = 1;
pub const VRSettingsError_WriteFailed: vr_EVRSettingsError = 2;
pub const VRSettingsError_ReadFailed: vr_EVRSettingsError = 3;
pub const VRSettingsError_JsonParseFailed: vr_EVRSettingsError = 4;
pub const VRSettingsError_UnsetSettingHasNoDefault: vr_EVRSettingsError = 5;
pub const VRSettingsError_AccessDenied: vr_EVRSettingsError = 6;
pub type vr_EVRSettingsError = ::std::os::raw::c_uint;
pub const vr_k_unMaxSettingsKeyLength: u32 = 128;
#[repr(C)]
pub struct vr_IVRSettings__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRSettings {
    pub vtable_: *const vr_IVRSettings__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRSettings"][::std::mem::size_of::<vr_IVRSettings>() - 8usize];
    ["Alignment of vr_IVRSettings"][::std::mem::align_of::<vr_IVRSettings>() - 8usize];
};
pub const vr_IVRSettings_Version: &[u8; 16] = b"IVRSettings_003\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_CVRSettingHelper {
    pub m_pSettings: *mut vr_IVRSettings,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_CVRSettingHelper"][::std::mem::size_of::<vr_CVRSettingHelper>() - 8usize];
    ["Alignment of vr_CVRSettingHelper"][::std::mem::align_of::<vr_CVRSettingHelper>() - 8usize];
    ["Offset of field: vr_CVRSettingHelper::m_pSettings"]
        [::std::mem::offset_of!(vr_CVRSettingHelper, m_pSettings) - 0usize];
};
pub const vr_k_pch_SteamVR_Section: &[u8; 8] = b"steamvr\0";
pub const vr_k_pch_SteamVR_RequireHmd_String: &[u8; 11] = b"requireHmd\0";
pub const vr_k_pch_SteamVR_ForcedDriverKey_String: &[u8; 13] = b"forcedDriver\0";
pub const vr_k_pch_SteamVR_ForcedHmdKey_String: &[u8; 10] = b"forcedHmd\0";
pub const vr_k_pch_SteamVR_DisplayDebug_Bool: &[u8; 13] = b"displayDebug\0";
pub const vr_k_pch_SteamVR_DebugProcessPipe_String: &[u8; 17] = b"debugProcessPipe\0";
pub const vr_k_pch_SteamVR_DisplayDebugX_Int32: &[u8; 14] = b"displayDebugX\0";
pub const vr_k_pch_SteamVR_DisplayDebugY_Int32: &[u8; 14] = b"displayDebugY\0";
pub const vr_k_pch_SteamVR_SendSystemButtonToAllApps_Bool: &[u8; 26] =
    b"sendSystemButtonToAllApps\0";
pub const vr_k_pch_SteamVR_LogLevel_Int32: &[u8; 9] = b"loglevel\0";
pub const vr_k_pch_SteamVR_IPD_Float: &[u8; 4] = b"ipd\0";
pub const vr_k_pch_SteamVR_Background_String: &[u8; 11] = b"background\0";
pub const vr_k_pch_SteamVR_BackgroundUseDomeProjection_Bool: &[u8; 28] =
    b"backgroundUseDomeProjection\0";
pub const vr_k_pch_SteamVR_BackgroundCameraHeight_Float: &[u8; 23] = b"backgroundCameraHeight\0";
pub const vr_k_pch_SteamVR_BackgroundDomeRadius_Float: &[u8; 21] = b"backgroundDomeRadius\0";
pub const vr_k_pch_SteamVR_GridColor_String: &[u8; 10] = b"gridColor\0";
pub const vr_k_pch_SteamVR_PlayAreaColor_String: &[u8; 14] = b"playAreaColor\0";
pub const vr_k_pch_SteamVR_TrackingLossColor_String: &[u8; 18] = b"trackingLossColor\0";
pub const vr_k_pch_SteamVR_ShowStage_Bool: &[u8; 10] = b"showStage\0";
pub const vr_k_pch_SteamVR_DrawTrackingReferences_Bool: &[u8; 23] = b"drawTrackingReferences\0";
pub const vr_k_pch_SteamVR_ActivateMultipleDrivers_Bool: &[u8; 24] = b"activateMultipleDrivers\0";
pub const vr_k_pch_SteamVR_UsingSpeakers_Bool: &[u8; 14] = b"usingSpeakers\0";
pub const vr_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float: &[u8; 32] =
    b"speakersForwardYawOffsetDegrees\0";
pub const vr_k_pch_SteamVR_BaseStationPowerManagement_Int32: &[u8; 27] =
    b"basestationPowerManagement\0";
pub const vr_k_pch_SteamVR_ShowBaseStationPowerManagementTip_Int32: &[u8; 34] =
    b"ShowBaseStationPowerManagementTip\0";
pub const vr_k_pch_SteamVR_NeverKillProcesses_Bool: &[u8; 19] = b"neverKillProcesses\0";
pub const vr_k_pch_SteamVR_SupersampleScale_Float: &[u8; 17] = b"supersampleScale\0";
pub const vr_k_pch_SteamVR_MaxRecommendedResolution_Int32: &[u8; 25] =
    b"maxRecommendedResolution\0";
pub const vr_k_pch_SteamVR_MotionSmoothing_Bool: &[u8; 16] = b"motionSmoothing\0";
pub const vr_k_pch_SteamVR_MotionSmoothingOverride_Int32: &[u8; 24] = b"motionSmoothingOverride\0";
pub const vr_k_pch_SteamVR_FramesToThrottle_Int32: &[u8; 17] = b"framesToThrottle\0";
pub const vr_k_pch_SteamVR_AdditionalFramesToPredict_Int32: &[u8; 26] =
    b"additionalFramesToPredict\0";
pub const vr_k_pch_SteamVR_WorldScale_Float: &[u8; 11] = b"worldScale\0";
pub const vr_k_pch_SteamVR_FovScale_Int32: &[u8; 9] = b"fovScale\0";
pub const vr_k_pch_SteamVR_FovScaleLetterboxed_Bool: &[u8; 20] = b"fovScaleLetterboxed\0";
pub const vr_k_pch_SteamVR_DisableAsyncReprojection_Bool: &[u8; 13] = b"disableAsync\0";
pub const vr_k_pch_SteamVR_ForceFadeOnBadTracking_Bool: &[u8; 23] = b"forceFadeOnBadTracking\0";
pub const vr_k_pch_SteamVR_DefaultMirrorView_Int32: &[u8; 11] = b"mirrorView\0";
pub const vr_k_pch_SteamVR_ShowLegacyMirrorView_Bool: &[u8; 21] = b"showLegacyMirrorView\0";
pub const vr_k_pch_SteamVR_MirrorViewVisibility_Bool: &[u8; 15] = b"showMirrorView\0";
pub const vr_k_pch_SteamVR_MirrorViewDisplayMode_Int32: &[u8; 22] = b"mirrorViewDisplayMode\0";
pub const vr_k_pch_SteamVR_MirrorViewEye_Int32: &[u8; 14] = b"mirrorViewEye\0";
pub const vr_k_pch_SteamVR_MirrorViewGeometry_String: &[u8; 19] = b"mirrorViewGeometry\0";
pub const vr_k_pch_SteamVR_MirrorViewGeometryMaximized_String: &[u8; 28] =
    b"mirrorViewGeometryMaximized\0";
pub const vr_k_pch_SteamVR_PerfGraphVisibility_Bool: &[u8; 14] = b"showPerfGraph\0";
pub const vr_k_pch_SteamVR_StartMonitorFromAppLaunch: &[u8; 26] = b"startMonitorFromAppLaunch\0";
pub const vr_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool: &[u8; 29] =
    b"startCompositorFromAppLaunch\0";
pub const vr_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool: &[u8; 28] =
    b"startDashboardFromAppLaunch\0";
pub const vr_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool: &[u8; 30] =
    b"startOverlayAppsFromDashboard\0";
pub const vr_k_pch_SteamVR_EnableHomeApp: &[u8; 14] = b"enableHomeApp\0";
pub const vr_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32: &[u8; 28] =
    b"CycleBackgroundImageTimeSec\0";
pub const vr_k_pch_SteamVR_RetailDemo_Bool: &[u8; 11] = b"retailDemo\0";
pub const vr_k_pch_SteamVR_IpdOffset_Float: &[u8; 10] = b"ipdOffset\0";
pub const vr_k_pch_SteamVR_AllowSupersampleFiltering_Bool: &[u8; 26] =
    b"allowSupersampleFiltering\0";
pub const vr_k_pch_SteamVR_SupersampleManualOverride_Bool: &[u8; 26] =
    b"supersampleManualOverride\0";
pub const vr_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool: &[u8; 23] = b"enableLinuxVulkanAsync\0";
pub const vr_k_pch_SteamVR_AllowDisplayLockedMode_Bool: &[u8; 23] = b"allowDisplayLockedMode\0";
pub const vr_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool: &[u8; 44] =
    b"haveStartedTutorialForNativeChaperoneDriver\0";
pub const vr_k_pch_SteamVR_ForceWindows32bitVRMonitor: &[u8; 27] = b"forceWindows32BitVRMonitor\0";
pub const vr_k_pch_SteamVR_DebugInputBinding: &[u8; 18] = b"debugInputBinding\0";
pub const vr_k_pch_SteamVR_DoNotFadeToGrid: &[u8; 16] = b"doNotFadeToGrid\0";
pub const vr_k_pch_SteamVR_EnableSharedResourceJournaling: &[u8; 31] =
    b"enableSharedResourceJournaling\0";
pub const vr_k_pch_SteamVR_EnableSafeMode: &[u8; 15] = b"enableSafeMode\0";
pub const vr_k_pch_SteamVR_PreferredRefreshRate: &[u8; 21] = b"preferredRefreshRate\0";
pub const vr_k_pch_SteamVR_LastVersionNotice: &[u8; 18] = b"lastVersionNotice\0";
pub const vr_k_pch_SteamVR_LastVersionNoticeDate: &[u8; 22] = b"lastVersionNoticeDate\0";
pub const vr_k_pch_SteamVR_HmdDisplayColorGainR_Float: &[u8; 21] = b"hmdDisplayColorGainR\0";
pub const vr_k_pch_SteamVR_HmdDisplayColorGainG_Float: &[u8; 21] = b"hmdDisplayColorGainG\0";
pub const vr_k_pch_SteamVR_HmdDisplayColorGainB_Float: &[u8; 21] = b"hmdDisplayColorGainB\0";
pub const vr_k_pch_SteamVR_CustomIconStyle_String: &[u8; 16] = b"customIconStyle\0";
pub const vr_k_pch_SteamVR_CustomOffIconStyle_String: &[u8; 19] = b"customOffIconStyle\0";
pub const vr_k_pch_SteamVR_CustomIconForceUpdate_String: &[u8; 22] = b"customIconForceUpdate\0";
pub const vr_k_pch_SteamVR_AllowGlobalActionSetPriority: &[u8; 24] = b"globalActionSetPriority\0";
pub const vr_k_pch_SteamVR_OverlayRenderQuality: &[u8; 23] = b"overlayRenderQuality_2\0";
pub const vr_k_pch_SteamVR_BlockOculusSDKOnOpenVRLaunchOption_Bool: &[u8; 35] =
    b"blockOculusSDKOnOpenVRLaunchOption\0";
pub const vr_k_pch_SteamVR_BlockOculusSDKOnAllLaunches_Bool: &[u8; 28] =
    b"blockOculusSDKOnAllLaunches\0";
pub const vr_k_pch_SteamVR_HDCPLegacyCompatibility_Bool: &[u8; 26] = b"hdcp14legacyCompatibility\0";
pub const vr_k_pch_SteamVR_DisplayPortTrainingMode_Int: &[u8; 24] = b"displayPortTrainingMode\0";
pub const vr_k_pch_SteamVR_UsePrism_Bool: &[u8; 9] = b"usePrism\0";
pub const vr_k_pch_SteamVR_AllowFallbackMirrorWindowLinux_Bool: &[u8; 31] =
    b"allowFallbackMirrorWindowLinux\0";
pub const vr_k_pch_OpenXR_Section: &[u8; 7] = b"openxr\0";
pub const vr_k_pch_OpenXR_MetaUnityPluginCompatibility_Int32: &[u8; 29] =
    b"metaUnityPluginCompatibility\0";
pub const vr_k_pch_DirectMode_Section: &[u8; 12] = b"direct_mode\0";
pub const vr_k_pch_DirectMode_Enable_Bool: &[u8; 7] = b"enable\0";
pub const vr_k_pch_DirectMode_Count_Int32: &[u8; 6] = b"count\0";
pub const vr_k_pch_DirectMode_EdidVid_Int32: &[u8; 8] = b"edidVid\0";
pub const vr_k_pch_DirectMode_EdidPid_Int32: &[u8; 8] = b"edidPid\0";
pub const vr_k_pch_Lighthouse_Section: &[u8; 18] = b"driver_lighthouse\0";
pub const vr_k_pch_Lighthouse_DisableIMU_Bool: &[u8; 11] = b"disableimu\0";
pub const vr_k_pch_Lighthouse_DisableIMUExceptHMD_Bool: &[u8; 20] = b"disableimuexcepthmd\0";
pub const vr_k_pch_Lighthouse_UseDisambiguation_String: &[u8; 18] = b"usedisambiguation\0";
pub const vr_k_pch_Lighthouse_DisambiguationDebug_Int32: &[u8; 20] = b"disambiguationdebug\0";
pub const vr_k_pch_Lighthouse_PrimaryBasestation_Int32: &[u8; 19] = b"primarybasestation\0";
pub const vr_k_pch_Lighthouse_DBHistory_Bool: &[u8; 10] = b"dbhistory\0";
pub const vr_k_pch_Lighthouse_EnableBluetooth_Bool: &[u8; 16] = b"enableBluetooth\0";
pub const vr_k_pch_Lighthouse_PowerManagedBaseStations_String: &[u8; 25] =
    b"PowerManagedBaseStations\0";
pub const vr_k_pch_Lighthouse_PowerManagedBaseStations2_String: &[u8; 26] =
    b"PowerManagedBaseStations2\0";
pub const vr_k_pch_Lighthouse_InactivityTimeoutForBaseStations_Int32: &[u8; 33] =
    b"InactivityTimeoutForBaseStations\0";
pub const vr_k_pch_Lighthouse_EnableImuFallback_Bool: &[u8; 18] = b"enableImuFallback\0";
pub const vr_k_pch_Null_Section: &[u8; 12] = b"driver_null\0";
pub const vr_k_pch_Null_SerialNumber_String: &[u8; 13] = b"serialNumber\0";
pub const vr_k_pch_Null_ModelNumber_String: &[u8; 12] = b"modelNumber\0";
pub const vr_k_pch_Null_WindowX_Int32: &[u8; 8] = b"windowX\0";
pub const vr_k_pch_Null_WindowY_Int32: &[u8; 8] = b"windowY\0";
pub const vr_k_pch_Null_WindowWidth_Int32: &[u8; 12] = b"windowWidth\0";
pub const vr_k_pch_Null_WindowHeight_Int32: &[u8; 13] = b"windowHeight\0";
pub const vr_k_pch_Null_RenderWidth_Int32: &[u8; 12] = b"renderWidth\0";
pub const vr_k_pch_Null_RenderHeight_Int32: &[u8; 13] = b"renderHeight\0";
pub const vr_k_pch_Null_SecondsFromVsyncToPhotons_Float: &[u8; 26] = b"secondsFromVsyncToPhotons\0";
pub const vr_k_pch_Null_DisplayFrequency_Float: &[u8; 17] = b"displayFrequency\0";
pub const vr_k_pch_WindowsMR_Section: &[u8; 19] = b"driver_holographic\0";
pub const vr_k_pch_UserInterface_Section: &[u8; 14] = b"userinterface\0";
pub const vr_k_pch_UserInterface_StatusAlwaysOnTop_Bool: &[u8; 18] = b"StatusAlwaysOnTop\0";
pub const vr_k_pch_UserInterface_MinimizeToTray_Bool: &[u8; 15] = b"MinimizeToTray\0";
pub const vr_k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool: &[u8; 30] =
    b"HidePopupsWhenStatusMinimized\0";
pub const vr_k_pch_UserInterface_Screenshots_Bool: &[u8; 12] = b"screenshots\0";
pub const vr_k_pch_UserInterface_ScreenshotType_Int: &[u8; 15] = b"screenshotType\0";
pub const vr_k_pch_Notifications_Section: &[u8; 14] = b"notifications\0";
pub const vr_k_pch_Notifications_DoNotDisturb_Bool: &[u8; 13] = b"DoNotDisturb\0";
pub const vr_k_pch_Keyboard_Section: &[u8; 9] = b"keyboard\0";
pub const vr_k_pch_Keyboard_TutorialCompletions: &[u8; 20] = b"TutorialCompletions\0";
pub const vr_k_pch_Keyboard_ScaleX: &[u8; 7] = b"ScaleX\0";
pub const vr_k_pch_Keyboard_ScaleY: &[u8; 7] = b"ScaleY\0";
pub const vr_k_pch_Keyboard_OffsetLeftX: &[u8; 12] = b"OffsetLeftX\0";
pub const vr_k_pch_Keyboard_OffsetRightX: &[u8; 13] = b"OffsetRightX\0";
pub const vr_k_pch_Keyboard_OffsetY: &[u8; 8] = b"OffsetY\0";
pub const vr_k_pch_Keyboard_Smoothing: &[u8; 10] = b"Smoothing\0";
pub const vr_k_pch_Perf_Section: &[u8; 10] = b"perfcheck\0";
pub const vr_k_pch_Perf_PerfGraphInHMD_Bool: &[u8; 15] = b"perfGraphInHMD\0";
pub const vr_k_pch_Perf_AllowTimingStore_Bool: &[u8; 17] = b"allowTimingStore\0";
pub const vr_k_pch_Perf_SaveTimingsOnExit_Bool: &[u8; 18] = b"saveTimingsOnExit\0";
pub const vr_k_pch_Perf_TestData_Float: &[u8; 13] = b"perfTestData\0";
pub const vr_k_pch_Perf_GPUProfiling_Bool: &[u8; 13] = b"GPUProfiling\0";
pub const vr_k_pch_Perf_GpuBusMonitoring_Bool: &[u8; 17] = b"gpuBusMonitoring\0";
pub const vr_k_pch_CollisionBounds_Section: &[u8; 16] = b"collisionBounds\0";
pub const vr_k_pch_CollisionBounds_Style_Int32: &[u8; 21] = b"CollisionBoundsStyle\0";
pub const vr_k_pch_CollisionBounds_GroundPerimeterOn_Bool: &[u8; 33] =
    b"CollisionBoundsGroundPerimeterOn\0";
pub const vr_k_pch_CollisionBounds_CenterMarkerOn_Bool: &[u8; 30] =
    b"CollisionBoundsCenterMarkerOn\0";
pub const vr_k_pch_CollisionBounds_PlaySpaceOn_Bool: &[u8; 27] = b"CollisionBoundsPlaySpaceOn\0";
pub const vr_k_pch_CollisionBounds_FadeDistance_Float: &[u8; 28] = b"CollisionBoundsFadeDistance\0";
pub const vr_k_pch_CollisionBounds_WallHeight_Float: &[u8; 26] = b"CollisionBoundsWallHeight\0";
pub const vr_k_pch_CollisionBounds_ColorGammaR_Int32: &[u8; 27] = b"CollisionBoundsColorGammaR\0";
pub const vr_k_pch_CollisionBounds_ColorGammaG_Int32: &[u8; 27] = b"CollisionBoundsColorGammaG\0";
pub const vr_k_pch_CollisionBounds_ColorGammaB_Int32: &[u8; 27] = b"CollisionBoundsColorGammaB\0";
pub const vr_k_pch_CollisionBounds_ColorGammaA_Int32: &[u8; 27] = b"CollisionBoundsColorGammaA\0";
pub const vr_k_pch_CollisionBounds_EnableDriverImport: &[u8; 25] = b"enableDriverBoundsImport\0";
pub const vr_k_pch_Camera_Section: &[u8; 7] = b"camera\0";
pub const vr_k_pch_Camera_EnableCamera_Bool: &[u8; 13] = b"enableCamera\0";
pub const vr_k_pch_Camera_ShowOnController_Bool: &[u8; 17] = b"showOnController\0";
pub const vr_k_pch_Camera_EnableCameraForCollisionBounds_Bool: &[u8; 31] =
    b"enableCameraForCollisionBounds\0";
pub const vr_k_pch_Camera_RoomView_Int32: &[u8; 9] = b"roomView\0";
pub const vr_k_pch_Camera_BoundsColorGammaR_Int32: &[u8; 24] = b"cameraBoundsColorGammaR\0";
pub const vr_k_pch_Camera_BoundsColorGammaG_Int32: &[u8; 24] = b"cameraBoundsColorGammaG\0";
pub const vr_k_pch_Camera_BoundsColorGammaB_Int32: &[u8; 24] = b"cameraBoundsColorGammaB\0";
pub const vr_k_pch_Camera_BoundsColorGammaA_Int32: &[u8; 24] = b"cameraBoundsColorGammaA\0";
pub const vr_k_pch_Camera_BoundsStrength_Int32: &[u8; 21] = b"cameraBoundsStrength\0";
pub const vr_k_pch_Camera_RoomViewStyle_Int32: &[u8; 14] = b"roomViewStyle\0";
pub const vr_k_pch_audio_Section: &[u8; 6] = b"audio\0";
pub const vr_k_pch_audio_SetOsDefaultPlaybackDevice_Bool: &[u8; 27] =
    b"setOsDefaultPlaybackDevice\0";
pub const vr_k_pch_audio_EnablePlaybackDeviceOverride_Bool: &[u8; 29] =
    b"enablePlaybackDeviceOverride\0";
pub const vr_k_pch_audio_PlaybackDeviceOverride_String: &[u8; 23] = b"playbackDeviceOverride\0";
pub const vr_k_pch_audio_PlaybackDeviceOverrideName_String: &[u8; 27] =
    b"playbackDeviceOverrideName\0";
pub const vr_k_pch_audio_SetOsDefaultRecordingDevice_Bool: &[u8; 28] =
    b"setOsDefaultRecordingDevice\0";
pub const vr_k_pch_audio_EnableRecordingDeviceOverride_Bool: &[u8; 30] =
    b"enableRecordingDeviceOverride\0";
pub const vr_k_pch_audio_RecordingDeviceOverride_String: &[u8; 24] = b"recordingDeviceOverride\0";
pub const vr_k_pch_audio_RecordingDeviceOverrideName_String: &[u8; 28] =
    b"recordingDeviceOverrideName\0";
pub const vr_k_pch_audio_EnablePlaybackMirror_Bool: &[u8; 21] = b"enablePlaybackMirror\0";
pub const vr_k_pch_audio_PlaybackMirrorDevice_String: &[u8; 21] = b"playbackMirrorDevice\0";
pub const vr_k_pch_audio_PlaybackMirrorDeviceName_String: &[u8; 25] = b"playbackMirrorDeviceName\0";
pub const vr_k_pch_audio_OldPlaybackMirrorDevice_String: &[u8; 23] = b"onPlaybackMirrorDevice\0";
pub const vr_k_pch_audio_ActiveMirrorDevice_String: &[u8; 27] = b"activePlaybackMirrorDevice\0";
pub const vr_k_pch_audio_EnablePlaybackMirrorIndependentVolume_Bool: &[u8; 38] =
    b"enablePlaybackMirrorIndependentVolume\0";
pub const vr_k_pch_audio_LastHmdPlaybackDeviceId_String: &[u8; 24] = b"lastHmdPlaybackDeviceId\0";
pub const vr_k_pch_audio_VIVEHDMIGain: &[u8; 13] = b"viveHDMIGain\0";
pub const vr_k_pch_audio_DualSpeakerAndJackOutput_Bool: &[u8; 25] = b"dualSpeakerAndJackOutput\0";
pub const vr_k_pch_audio_MuteMicMonitor_Bool: &[u8; 15] = b"muteMicMonitor\0";
pub const vr_k_pch_Power_Section: &[u8; 6] = b"power\0";
pub const vr_k_pch_Power_PowerOffOnExit_Bool: &[u8; 15] = b"powerOffOnExit\0";
pub const vr_k_pch_Power_TurnOffScreensTimeout_Float: &[u8; 22] = b"turnOffScreensTimeout\0";
pub const vr_k_pch_Power_TurnOffControllersTimeout_Float: &[u8; 26] =
    b"turnOffControllersTimeout\0";
pub const vr_k_pch_Power_ReturnToWatchdogTimeout_Float: &[u8; 24] = b"returnToWatchdogTimeout\0";
pub const vr_k_pch_Power_AutoLaunchSteamVROnButtonPress: &[u8; 31] =
    b"autoLaunchSteamVROnButtonPress\0";
pub const vr_k_pch_Power_PauseCompositorOnStandby_Bool: &[u8; 25] = b"pauseCompositorOnStandby\0";
pub const vr_k_pch_Dashboard_Section: &[u8; 10] = b"dashboard\0";
pub const vr_k_pch_Dashboard_EnableDashboard_Bool: &[u8; 16] = b"enableDashboard\0";
pub const vr_k_pch_Dashboard_ArcadeMode_Bool: &[u8; 11] = b"arcadeMode\0";
pub const vr_k_pch_Dashboard_Position: &[u8; 9] = b"position\0";
pub const vr_k_pch_Dashboard_DesktopScale: &[u8; 13] = b"desktopScale\0";
pub const vr_k_pch_Dashboard_DashboardScale: &[u8; 15] = b"dashboardScale\0";
pub const vr_k_pch_Dashboard_UseStandaloneSystemLayer: &[u8; 22] = b"standaloneSystemLayer\0";
pub const vr_k_pch_Dashboard_StickyDashboard: &[u8; 16] = b"stickyDashboard\0";
pub const vr_k_pch_Dashboard_AllowSteamOverlays_Bool: &[u8; 19] = b"allowSteamOverlays\0";
pub const vr_k_pch_Dashboard_AllowVRGamepadUI_Bool: &[u8; 17] = b"allowVRGamepadUI\0";
pub const vr_k_pch_Dashboard_AllowVRGamepadUIViaGamescope_Bool: &[u8; 29] =
    b"allowVRGamepadUIViaGamescope\0";
pub const vr_k_pch_Dashboard_SteamMatchesHMDFramerate: &[u8; 25] = b"steamMatchesHMDFramerate\0";
pub const vr_k_pch_modelskin_Section: &[u8; 11] = b"modelskins\0";
pub const vr_k_pch_Driver_Enable_Bool: &[u8; 7] = b"enable\0";
pub const vr_k_pch_Driver_BlockedBySafemode_Bool: &[u8; 21] = b"blocked_by_safe_mode\0";
pub const vr_k_pch_Driver_LoadPriority_Int32: &[u8; 13] = b"loadPriority\0";
pub const vr_k_pch_WebInterface_Section: &[u8; 13] = b"WebInterface\0";
pub const vr_k_pch_VRWebHelper_Section: &[u8; 12] = b"VRWebHelper\0";
pub const vr_k_pch_VRWebHelper_DebuggerEnabled_Bool: &[u8; 16] = b"DebuggerEnabled\0";
pub const vr_k_pch_VRWebHelper_DebuggerPort_Int32: &[u8; 13] = b"DebuggerPort\0";
pub const vr_k_pch_TrackingOverride_Section: &[u8; 18] = b"TrackingOverrides\0";
pub const vr_k_pch_App_BindingAutosaveURLSuffix_String: &[u8; 12] = b"AutosaveURL\0";
pub const vr_k_pch_App_BindingLegacyAPISuffix_String: &[u8; 8] = b"_legacy\0";
pub const vr_k_pch_App_BindingSteamVRInputAPISuffix_String: &[u8; 14] = b"_steamvrinput\0";
pub const vr_k_pch_App_BindingOpenXRAPISuffix_String: &[u8; 8] = b"_openxr\0";
pub const vr_k_pch_App_BindingCurrentURLSuffix_String: &[u8; 11] = b"CurrentURL\0";
pub const vr_k_pch_App_BindingPreviousURLSuffix_String: &[u8; 12] = b"PreviousURL\0";
pub const vr_k_pch_App_NeedToUpdateAutosaveSuffix_Bool: &[u8; 21] = b"NeedToUpdateAutosave\0";
pub const vr_k_pch_App_DominantHand_Int32: &[u8; 13] = b"DominantHand\0";
pub const vr_k_pch_App_BlockOculusSDK_Bool: &[u8; 15] = b"blockOculusSDK\0";
pub const vr_k_pch_Trackers_Section: &[u8; 9] = b"trackers\0";
pub const vr_k_pch_DesktopUI_Section: &[u8; 10] = b"DesktopUI\0";
pub const vr_k_pch_LastKnown_Section: &[u8; 10] = b"LastKnown\0";
pub const vr_k_pch_LastKnown_HMDManufacturer_String: &[u8; 16] = b"HMDManufacturer\0";
pub const vr_k_pch_LastKnown_HMDModel_String: &[u8; 9] = b"HMDModel\0";
pub const vr_k_pch_LastKnown_ActualHMDDriver_String: &[u8; 16] = b"ActualHMDDriver\0";
pub const vr_k_pch_DismissedWarnings_Section: &[u8; 18] = b"DismissedWarnings\0";
pub const vr_k_pch_Input_Section: &[u8; 6] = b"input\0";
pub const vr_k_pch_Input_LeftThumbstickRotation_Float: &[u8; 23] = b"leftThumbstickRotation\0";
pub const vr_k_pch_Input_RightThumbstickRotation_Float: &[u8; 24] = b"rightThumbstickRotation\0";
pub const vr_k_pch_Input_ThumbstickDeadzone_Float: &[u8; 19] = b"thumbstickDeadzone\0";
pub const vr_k_pch_GpuSpeed_Section: &[u8; 9] = b"GpuSpeed\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_DriverPoseQuaternion_t {
    pub w: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_DriverPoseQuaternion_t"]
        [::std::mem::size_of::<vr_DriverPoseQuaternion_t>() - 32usize];
    ["Alignment of vr_DriverPoseQuaternion_t"]
        [::std::mem::align_of::<vr_DriverPoseQuaternion_t>() - 8usize];
    ["Offset of field: vr_DriverPoseQuaternion_t::w"]
        [::std::mem::offset_of!(vr_DriverPoseQuaternion_t, w) - 0usize];
    ["Offset of field: vr_DriverPoseQuaternion_t::x"]
        [::std::mem::offset_of!(vr_DriverPoseQuaternion_t, x) - 8usize];
    ["Offset of field: vr_DriverPoseQuaternion_t::y"]
        [::std::mem::offset_of!(vr_DriverPoseQuaternion_t, y) - 16usize];
    ["Offset of field: vr_DriverPoseQuaternion_t::z"]
        [::std::mem::offset_of!(vr_DriverPoseQuaternion_t, z) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_DriverPose_t {
    pub poseTimeOffset: f64,
    pub qWorldFromDriverRotation: vr_HmdQuaternion_t,
    pub vecWorldFromDriverTranslation: [f64; 3usize],
    pub qDriverFromHeadRotation: vr_HmdQuaternion_t,
    pub vecDriverFromHeadTranslation: [f64; 3usize],
    pub vecPosition: [f64; 3usize],
    pub vecVelocity: [f64; 3usize],
    pub vecAcceleration: [f64; 3usize],
    pub qRotation: vr_HmdQuaternion_t,
    pub vecAngularVelocity: [f64; 3usize],
    pub vecAngularAcceleration: [f64; 3usize],
    pub result: vr_ETrackingResult,
    pub poseIsValid: bool,
    pub willDriftInYaw: bool,
    pub shouldApplyHeadModel: bool,
    pub deviceIsConnected: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_DriverPose_t"][::std::mem::size_of::<vr_DriverPose_t>() - 280usize];
    ["Alignment of vr_DriverPose_t"][::std::mem::align_of::<vr_DriverPose_t>() - 8usize];
    ["Offset of field: vr_DriverPose_t::poseTimeOffset"]
        [::std::mem::offset_of!(vr_DriverPose_t, poseTimeOffset) - 0usize];
    ["Offset of field: vr_DriverPose_t::qWorldFromDriverRotation"]
        [::std::mem::offset_of!(vr_DriverPose_t, qWorldFromDriverRotation) - 8usize];
    ["Offset of field: vr_DriverPose_t::vecWorldFromDriverTranslation"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecWorldFromDriverTranslation) - 40usize];
    ["Offset of field: vr_DriverPose_t::qDriverFromHeadRotation"]
        [::std::mem::offset_of!(vr_DriverPose_t, qDriverFromHeadRotation) - 64usize];
    ["Offset of field: vr_DriverPose_t::vecDriverFromHeadTranslation"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecDriverFromHeadTranslation) - 96usize];
    ["Offset of field: vr_DriverPose_t::vecPosition"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecPosition) - 120usize];
    ["Offset of field: vr_DriverPose_t::vecVelocity"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecVelocity) - 144usize];
    ["Offset of field: vr_DriverPose_t::vecAcceleration"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecAcceleration) - 168usize];
    ["Offset of field: vr_DriverPose_t::qRotation"]
        [::std::mem::offset_of!(vr_DriverPose_t, qRotation) - 192usize];
    ["Offset of field: vr_DriverPose_t::vecAngularVelocity"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecAngularVelocity) - 224usize];
    ["Offset of field: vr_DriverPose_t::vecAngularAcceleration"]
        [::std::mem::offset_of!(vr_DriverPose_t, vecAngularAcceleration) - 248usize];
    ["Offset of field: vr_DriverPose_t::result"]
        [::std::mem::offset_of!(vr_DriverPose_t, result) - 272usize];
    ["Offset of field: vr_DriverPose_t::poseIsValid"]
        [::std::mem::offset_of!(vr_DriverPose_t, poseIsValid) - 276usize];
    ["Offset of field: vr_DriverPose_t::willDriftInYaw"]
        [::std::mem::offset_of!(vr_DriverPose_t, willDriftInYaw) - 277usize];
    ["Offset of field: vr_DriverPose_t::shouldApplyHeadModel"]
        [::std::mem::offset_of!(vr_DriverPose_t, shouldApplyHeadModel) - 278usize];
    ["Offset of field: vr_DriverPose_t::deviceIsConnected"]
        [::std::mem::offset_of!(vr_DriverPose_t, deviceIsConnected) - 279usize];
};
#[repr(C)]
pub struct vr_ITrackedDeviceServerDriver__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_ITrackedDeviceServerDriver {
    pub vtable_: *const vr_ITrackedDeviceServerDriver__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_ITrackedDeviceServerDriver"]
        [::std::mem::size_of::<vr_ITrackedDeviceServerDriver>() - 8usize];
    ["Alignment of vr_ITrackedDeviceServerDriver"]
        [::std::mem::align_of::<vr_ITrackedDeviceServerDriver>() - 8usize];
};
pub const vr_ITrackedDeviceServerDriver_Version: &[u8; 31] = b"ITrackedDeviceServerDriver_005\0";
#[repr(C)]
pub struct vr_IVRDisplayComponent__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDisplayComponent {
    pub vtable_: *const vr_IVRDisplayComponent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDisplayComponent"][::std::mem::size_of::<vr_IVRDisplayComponent>() - 8usize];
    ["Alignment of vr_IVRDisplayComponent"]
        [::std::mem::align_of::<vr_IVRDisplayComponent>() - 8usize];
};
pub const vr_IVRDisplayComponent_Version: &[u8; 24] = b"IVRDisplayComponent_003\0";
pub const VRSwapTextureFlag_Shared_NTHandle: vr_VRSwapTextureFlag = 1;
pub type vr_VRSwapTextureFlag = ::std::os::raw::c_uint;
#[repr(C)]
pub struct vr_IVRDriverDirectModeComponent__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverDirectModeComponent {
    pub vtable_: *const vr_IVRDriverDirectModeComponent__bindgen_vtable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t {
    pub nWidth: u32,
    pub nHeight: u32,
    pub nFormat: u32,
    pub nSampleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t"]
        [::std::mem::size_of::<vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t>() - 16usize];
    ["Alignment of vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t"]
        [::std::mem::align_of::<vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t>() - 4usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t::nWidth"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t,
        nWidth
    ) - 0usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t::nHeight"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t,
        nHeight
    ) - 4usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t::nFormat"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t,
        nFormat
    ) - 8usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t::nSampleCount"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSetDesc_t,
        nSampleCount
    )
        - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverDirectModeComponent_SwapTextureSet_t {
    pub rSharedTextureHandles: [vr_SharedTextureHandle_t; 3usize],
    pub unTextureFlags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverDirectModeComponent_SwapTextureSet_t"]
        [::std::mem::size_of::<vr_IVRDriverDirectModeComponent_SwapTextureSet_t>() - 32usize];
    ["Alignment of vr_IVRDriverDirectModeComponent_SwapTextureSet_t"]
        [::std::mem::align_of::<vr_IVRDriverDirectModeComponent_SwapTextureSet_t>() - 8usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSet_t::rSharedTextureHandles"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSet_t,
        rSharedTextureHandles
    )
        - 0usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SwapTextureSet_t::unTextureFlags"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SwapTextureSet_t,
        unTextureFlags
    )
        - 24usize];
};
#[doc = " Call once per layer to draw for this frame.  One shared texture handle per eye.  Textures must be created\n using CreateSwapTextureSet and should be alternated per frame.  Call Present once all layers have been submitted."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t {
    pub hTexture: vr_SharedTextureHandle_t,
    pub hDepthTexture: vr_SharedTextureHandle_t,
    pub bounds: vr_VRTextureBounds_t,
    pub mProjection: vr_HmdMatrix44_t,
    pub mHmdPose: vr_HmdMatrix34_t,
    pub flHmdPosePredictionTimeInSecondsFromNow: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t"]
        [::std::mem::size_of::<vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t>() - 152usize];
    ["Alignment of vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t"]
        [::std::mem::align_of::<vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t>() - 8usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::hTexture"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t,
        hTexture
    ) - 0usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::hDepthTexture"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t,
        hDepthTexture
    )
        - 8usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::bounds"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t,
        bounds
    ) - 16usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::mProjection"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t,
        mProjection
    )
        - 32usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::mHmdPose"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t,
        mHmdPose
    ) - 96usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t::flHmdPosePredictionTimeInSecondsFromNow"] [:: std :: mem :: offset_of ! (vr_IVRDriverDirectModeComponent_SubmitLayerPerEye_t , flHmdPosePredictionTimeInSecondsFromNow) - 144usize] ;
};
#[doc = " Called after Present to allow driver to take more time until vsync after they've successfully acquired the sync texture in Present.\n Set Prop_Hmd_SupportsAppThrottling_Bool to enable throttling / prediction UI in per-app video settings."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverDirectModeComponent_Throttling_t {
    pub nFramesToThrottle: u32,
    pub nAdditionalFramesToPredict: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverDirectModeComponent_Throttling_t"]
        [::std::mem::size_of::<vr_IVRDriverDirectModeComponent_Throttling_t>() - 8usize];
    ["Alignment of vr_IVRDriverDirectModeComponent_Throttling_t"]
        [::std::mem::align_of::<vr_IVRDriverDirectModeComponent_Throttling_t>() - 4usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_Throttling_t::nFramesToThrottle"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_Throttling_t,
        nFramesToThrottle
    )
        - 0usize];
    ["Offset of field: vr_IVRDriverDirectModeComponent_Throttling_t::nAdditionalFramesToPredict"][::std::mem::offset_of!(
        vr_IVRDriverDirectModeComponent_Throttling_t,
        nAdditionalFramesToPredict
    )
        - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverDirectModeComponent"]
        [::std::mem::size_of::<vr_IVRDriverDirectModeComponent>() - 8usize];
    ["Alignment of vr_IVRDriverDirectModeComponent"]
        [::std::mem::align_of::<vr_IVRDriverDirectModeComponent>() - 8usize];
};
pub const vr_IVRDriverDirectModeComponent_Version: &[u8; 33] =
    b"IVRDriverDirectModeComponent_009\0";
#[repr(C)]
pub struct vr_ICameraVideoSinkCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_ICameraVideoSinkCallback {
    pub vtable_: *const vr_ICameraVideoSinkCallback__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_ICameraVideoSinkCallback"]
        [::std::mem::size_of::<vr_ICameraVideoSinkCallback>() - 8usize];
    ["Alignment of vr_ICameraVideoSinkCallback"]
        [::std::mem::align_of::<vr_ICameraVideoSinkCallback>() - 8usize];
};
#[repr(C)]
pub struct vr_IVRCameraComponent__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRCameraComponent {
    pub vtable_: *const vr_IVRCameraComponent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRCameraComponent"][::std::mem::size_of::<vr_IVRCameraComponent>() - 8usize];
    ["Alignment of vr_IVRCameraComponent"]
        [::std::mem::align_of::<vr_IVRCameraComponent>() - 8usize];
};
pub const vr_IVRCameraComponent_Version: &[u8; 23] = b"IVRCameraComponent_003\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_TrackedDeviceDriverInfo_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct vr_IVRDriverContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This interface is provided by vrserver to allow the driver to notify\n the system when something changes about a device. These changes must\n not change the serial number or class of the device because those values\n are permanently associated with the device's index."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverContext {
    pub vtable_: *const vr_IVRDriverContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverContext"][::std::mem::size_of::<vr_IVRDriverContext>() - 8usize];
    ["Alignment of vr_IVRDriverContext"][::std::mem::align_of::<vr_IVRDriverContext>() - 8usize];
};
#[repr(C)]
pub struct vr_IServerTrackedDeviceProvider__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This interface must be implemented in each driver. It will be loaded in vrserver.exe"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IServerTrackedDeviceProvider {
    pub vtable_: *const vr_IServerTrackedDeviceProvider__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IServerTrackedDeviceProvider"]
        [::std::mem::size_of::<vr_IServerTrackedDeviceProvider>() - 8usize];
    ["Alignment of vr_IServerTrackedDeviceProvider"]
        [::std::mem::align_of::<vr_IServerTrackedDeviceProvider>() - 8usize];
};
pub const vr_IServerTrackedDeviceProvider_Version: &[u8; 33] =
    b"IServerTrackedDeviceProvider_004\0";
#[repr(C)]
pub struct vr_IVRWatchdogProvider__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This interface must be implemented in each driver. It will be loaded in vrclient.dll"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRWatchdogProvider {
    pub vtable_: *const vr_IVRWatchdogProvider__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRWatchdogProvider"][::std::mem::size_of::<vr_IVRWatchdogProvider>() - 8usize];
    ["Alignment of vr_IVRWatchdogProvider"]
        [::std::mem::align_of::<vr_IVRWatchdogProvider>() - 8usize];
};
pub const vr_IVRWatchdogProvider_Version: &[u8; 24] = b"IVRWatchdogProvider_001\0";
#[repr(C)]
pub struct vr_IVRCompositorPluginProvider__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This is an optional interface drivers may implement. It will be loaded in vrcompositor.exe"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRCompositorPluginProvider {
    pub vtable_: *const vr_IVRCompositorPluginProvider__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRCompositorPluginProvider"]
        [::std::mem::size_of::<vr_IVRCompositorPluginProvider>() - 8usize];
    ["Alignment of vr_IVRCompositorPluginProvider"]
        [::std::mem::align_of::<vr_IVRCompositorPluginProvider>() - 8usize];
};
pub const vr_IVRCompositorPluginProvider_Version: &[u8; 32] = b"IVRCompositorPluginProvider_001\0";
#[doc = " This container is automatically created before a display redirect device is activated.\n Any properties in this container will be returned when that property is read from the HMD's\n property container."]
pub const vr_k_ulDisplayRedirectContainer: vr_PropertyContainerHandle_t = 25769803779;
pub const PropertyWrite_Set: vr_EPropertyWriteType = 0;
pub const PropertyWrite_Erase: vr_EPropertyWriteType = 1;
pub const PropertyWrite_SetError: vr_EPropertyWriteType = 2;
pub type vr_EPropertyWriteType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_PropertyWrite_t {
    pub prop: vr_ETrackedDeviceProperty,
    pub writeType: vr_EPropertyWriteType,
    pub eSetError: vr_ETrackedPropertyError,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: vr_PropertyTypeTag_t,
    pub eError: vr_ETrackedPropertyError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_PropertyWrite_t"][::std::mem::size_of::<vr_PropertyWrite_t>() - 40usize];
    ["Alignment of vr_PropertyWrite_t"][::std::mem::align_of::<vr_PropertyWrite_t>() - 8usize];
    ["Offset of field: vr_PropertyWrite_t::prop"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, prop) - 0usize];
    ["Offset of field: vr_PropertyWrite_t::writeType"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, writeType) - 4usize];
    ["Offset of field: vr_PropertyWrite_t::eSetError"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, eSetError) - 8usize];
    ["Offset of field: vr_PropertyWrite_t::pvBuffer"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, pvBuffer) - 16usize];
    ["Offset of field: vr_PropertyWrite_t::unBufferSize"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, unBufferSize) - 24usize];
    ["Offset of field: vr_PropertyWrite_t::unTag"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, unTag) - 28usize];
    ["Offset of field: vr_PropertyWrite_t::eError"]
        [::std::mem::offset_of!(vr_PropertyWrite_t, eError) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_PropertyRead_t {
    pub prop: vr_ETrackedDeviceProperty,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: vr_PropertyTypeTag_t,
    pub unRequiredBufferSize: u32,
    pub eError: vr_ETrackedPropertyError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_PropertyRead_t"][::std::mem::size_of::<vr_PropertyRead_t>() - 32usize];
    ["Alignment of vr_PropertyRead_t"][::std::mem::align_of::<vr_PropertyRead_t>() - 8usize];
    ["Offset of field: vr_PropertyRead_t::prop"]
        [::std::mem::offset_of!(vr_PropertyRead_t, prop) - 0usize];
    ["Offset of field: vr_PropertyRead_t::pvBuffer"]
        [::std::mem::offset_of!(vr_PropertyRead_t, pvBuffer) - 8usize];
    ["Offset of field: vr_PropertyRead_t::unBufferSize"]
        [::std::mem::offset_of!(vr_PropertyRead_t, unBufferSize) - 16usize];
    ["Offset of field: vr_PropertyRead_t::unTag"]
        [::std::mem::offset_of!(vr_PropertyRead_t, unTag) - 20usize];
    ["Offset of field: vr_PropertyRead_t::unRequiredBufferSize"]
        [::std::mem::offset_of!(vr_PropertyRead_t, unRequiredBufferSize) - 24usize];
    ["Offset of field: vr_PropertyRead_t::eError"]
        [::std::mem::offset_of!(vr_PropertyRead_t, eError) - 28usize];
};
#[repr(C)]
pub struct vr_IVRProperties__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRProperties {
    pub vtable_: *const vr_IVRProperties__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRProperties"][::std::mem::size_of::<vr_IVRProperties>() - 8usize];
    ["Alignment of vr_IVRProperties"][::std::mem::align_of::<vr_IVRProperties>() - 8usize];
};
pub const vr_IVRProperties_Version: &[u8; 18] = b"IVRProperties_001\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_CVRPropertyHelpers {
    pub m_pProperties: *mut vr_IVRProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_CVRPropertyHelpers"][::std::mem::size_of::<vr_CVRPropertyHelpers>() - 8usize];
    ["Alignment of vr_CVRPropertyHelpers"]
        [::std::mem::align_of::<vr_CVRPropertyHelpers>() - 8usize];
    ["Offset of field: vr_CVRPropertyHelpers::m_pProperties"]
        [::std::mem::offset_of!(vr_CVRPropertyHelpers, m_pProperties) - 0usize];
};
pub type vr_VRInputComponentHandle_t = u64;
pub const vr_k_ulInvalidInputComponentHandle: vr_VRInputComponentHandle_t = 0;
pub const VRScalarType_Absolute: vr_EVRScalarType = 0;
pub const VRScalarType_Relative: vr_EVRScalarType = 1;
pub type vr_EVRScalarType = ::std::os::raw::c_uint;
pub const VRScalarUnits_NormalizedOneSided: vr_EVRScalarUnits = 0;
pub const VRScalarUnits_NormalizedTwoSided: vr_EVRScalarUnits = 1;
pub type vr_EVRScalarUnits = ::std::os::raw::c_uint;
#[repr(C)]
pub struct vr_IVRDriverInput__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverInput {
    pub vtable_: *const vr_IVRDriverInput__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverInput"][::std::mem::size_of::<vr_IVRDriverInput>() - 8usize];
    ["Alignment of vr_IVRDriverInput"][::std::mem::align_of::<vr_IVRDriverInput>() - 8usize];
};
pub const vr_IVRDriverInput_Version: &[u8; 19] = b"IVRDriverInput_003\0";
#[repr(C)]
pub struct vr_IVRDriverLog__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverLog {
    pub vtable_: *const vr_IVRDriverLog__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverLog"][::std::mem::size_of::<vr_IVRDriverLog>() - 8usize];
    ["Alignment of vr_IVRDriverLog"][::std::mem::align_of::<vr_IVRDriverLog>() - 8usize];
};
pub const vr_IVRDriverLog_Version: &[u8; 17] = b"IVRDriverLog_001\0";
#[repr(C)]
pub struct vr_IVRServerDriverHost__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This interface is provided by vrserver to allow the driver to notify\n the system when something changes about a device. These changes must\n not change the serial number or class of the device because those values\n are permanently associated with the device's index."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRServerDriverHost {
    pub vtable_: *const vr_IVRServerDriverHost__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRServerDriverHost"][::std::mem::size_of::<vr_IVRServerDriverHost>() - 8usize];
    ["Alignment of vr_IVRServerDriverHost"]
        [::std::mem::align_of::<vr_IVRServerDriverHost>() - 8usize];
};
pub const vr_IVRServerDriverHost_Version: &[u8; 24] = b"IVRServerDriverHost_006\0";
#[repr(C)]
pub struct vr_IVRCompositorDriverHost__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRCompositorDriverHost {
    pub vtable_: *const vr_IVRCompositorDriverHost__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRCompositorDriverHost"]
        [::std::mem::size_of::<vr_IVRCompositorDriverHost>() - 8usize];
    ["Alignment of vr_IVRCompositorDriverHost"]
        [::std::mem::align_of::<vr_IVRCompositorDriverHost>() - 8usize];
};
pub const vr_IVRCompositorDriverHost_Version: &[u8; 28] = b"IVRCompositorDriverHost_001\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_CVRHiddenAreaHelpers {
    pub m_pProperties: *mut vr_IVRProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_CVRHiddenAreaHelpers"][::std::mem::size_of::<vr_CVRHiddenAreaHelpers>() - 8usize];
    ["Alignment of vr_CVRHiddenAreaHelpers"]
        [::std::mem::align_of::<vr_CVRHiddenAreaHelpers>() - 8usize];
    ["Offset of field: vr_CVRHiddenAreaHelpers::m_pProperties"]
        [::std::mem::offset_of!(vr_CVRHiddenAreaHelpers, m_pProperties) - 0usize];
};
#[repr(C)]
pub struct vr_IVRWatchdogHost__bindgen_vtable(::std::os::raw::c_void);
#[doc = " This interface is provided by vrclient to allow the driver to make everything wake up"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRWatchdogHost {
    pub vtable_: *const vr_IVRWatchdogHost__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRWatchdogHost"][::std::mem::size_of::<vr_IVRWatchdogHost>() - 8usize];
    ["Alignment of vr_IVRWatchdogHost"][::std::mem::align_of::<vr_IVRWatchdogHost>() - 8usize];
};
pub const vr_IVRWatchdogHost_Version: &[u8; 20] = b"IVRWatchdogHost_002\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_PresentInfo_t {
    pub backbufferTextureHandle: vr_SharedTextureHandle_t,
    pub vsync: vr_EVSync,
    pub nFrameId: u64,
    pub flVSyncTimeInSeconds: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_PresentInfo_t"][::std::mem::size_of::<vr_PresentInfo_t>() - 32usize];
    ["Alignment of vr_PresentInfo_t"][::std::mem::align_of::<vr_PresentInfo_t>() - 8usize];
    ["Offset of field: vr_PresentInfo_t::backbufferTextureHandle"]
        [::std::mem::offset_of!(vr_PresentInfo_t, backbufferTextureHandle) - 0usize];
    ["Offset of field: vr_PresentInfo_t::vsync"]
        [::std::mem::offset_of!(vr_PresentInfo_t, vsync) - 8usize];
    ["Offset of field: vr_PresentInfo_t::nFrameId"]
        [::std::mem::offset_of!(vr_PresentInfo_t, nFrameId) - 16usize];
    ["Offset of field: vr_PresentInfo_t::flVSyncTimeInSeconds"]
        [::std::mem::offset_of!(vr_PresentInfo_t, flVSyncTimeInSeconds) - 24usize];
};
#[repr(C)]
pub struct vr_IVRVirtualDisplay__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRVirtualDisplay {
    pub vtable_: *const vr_IVRVirtualDisplay__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRVirtualDisplay"][::std::mem::size_of::<vr_IVRVirtualDisplay>() - 8usize];
    ["Alignment of vr_IVRVirtualDisplay"][::std::mem::align_of::<vr_IVRVirtualDisplay>() - 8usize];
};
pub const vr_IVRVirtualDisplay_Version: &[u8; 22] = b"IVRVirtualDisplay_002\0";
#[repr(C)]
pub struct vr_IVRResources__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRResources {
    pub vtable_: *const vr_IVRResources__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRResources"][::std::mem::size_of::<vr_IVRResources>() - 8usize];
    ["Alignment of vr_IVRResources"][::std::mem::align_of::<vr_IVRResources>() - 8usize];
};
pub const vr_IVRResources_Version: &[u8; 17] = b"IVRResources_001\0";
pub type vr_IOBufferHandle_t = u64;
pub const vr_k_ulInvalidIOBufferHandle: u64 = 0;
pub const IOBuffer_Success: vr_EIOBufferError = 0;
pub const IOBuffer_OperationFailed: vr_EIOBufferError = 100;
pub const IOBuffer_InvalidHandle: vr_EIOBufferError = 101;
pub const IOBuffer_InvalidArgument: vr_EIOBufferError = 102;
pub const IOBuffer_PathExists: vr_EIOBufferError = 103;
pub const IOBuffer_PathDoesNotExist: vr_EIOBufferError = 104;
pub const IOBuffer_Permission: vr_EIOBufferError = 105;
pub type vr_EIOBufferError = ::std::os::raw::c_uint;
pub const IOBufferMode_Read: vr_EIOBufferMode = 1;
pub const IOBufferMode_Write: vr_EIOBufferMode = 2;
pub const IOBufferMode_Create: vr_EIOBufferMode = 512;
pub type vr_EIOBufferMode = ::std::os::raw::c_uint;
#[repr(C)]
pub struct vr_IVRIOBuffer__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRIOBuffer {
    pub vtable_: *const vr_IVRIOBuffer__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRIOBuffer"][::std::mem::size_of::<vr_IVRIOBuffer>() - 8usize];
    ["Alignment of vr_IVRIOBuffer"][::std::mem::align_of::<vr_IVRIOBuffer>() - 8usize];
};
pub const vr_IVRIOBuffer_Version: &[u8; 16] = b"IVRIOBuffer_002\0";
#[repr(C)]
pub struct vr_IVRDriverManager__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverManager {
    pub vtable_: *const vr_IVRDriverManager__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverManager"][::std::mem::size_of::<vr_IVRDriverManager>() - 8usize];
    ["Alignment of vr_IVRDriverManager"][::std::mem::align_of::<vr_IVRDriverManager>() - 8usize];
};
pub const vr_IVRDriverManager_Version: &[u8; 21] = b"IVRDriverManager_001\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_SpatialAnchorDriverPose_t {
    #[doc = " This position is in the same \"world\" space (+Y up) as provided by DriverPose_t."]
    pub qWorldRotation: vr_HmdQuaternion_t,
    pub vWorldTranslation: vr_HmdVector3d_t,
    #[doc = " The pose will automatically start returning VRSpatialAnchorError_NotAvailableInThisUniverse\n if this is nonzero and does not match the current universe ID."]
    pub ulRequiredUniverseId: u64,
    #[doc = " When this time expires, SteamVR will start generating\n VREvent_SpatialAnchors_RequestPoseUpdate when the pose is read by an application\n to let the driver know it is still worth updating.\n You can use this facility in several ways:\n   1. Set to -1 to never receive an update request for this pose.  The driver\n      may still update poses at any time.\n   2. Set to 0 to always receive an update request *after* each time the pose\n      is read.  The rate of requests could be very high if the application gets\n      the pose at framerate.\n   3. If the driver knows there is no reason to update the pose for some amount of\n      time, it can set that time here and receive the update request reminder later.\n   4. If the driver plans to automatically update this pose for some amount of time\n      (as it gets better information about the virtual location of this anchor) it can\n      set that duration here to indicate that no \"update requested\" reminders are needed.\n      When that automatic update period expires, any future interest in the pose will\n      be indicated by a pose update request.\n The driver may always update the pose, including during the valid duration."]
    pub fValidDuration: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_SpatialAnchorDriverPose_t"]
        [::std::mem::size_of::<vr_SpatialAnchorDriverPose_t>() - 72usize];
    ["Alignment of vr_SpatialAnchorDriverPose_t"]
        [::std::mem::align_of::<vr_SpatialAnchorDriverPose_t>() - 8usize];
    ["Offset of field: vr_SpatialAnchorDriverPose_t::qWorldRotation"]
        [::std::mem::offset_of!(vr_SpatialAnchorDriverPose_t, qWorldRotation) - 0usize];
    ["Offset of field: vr_SpatialAnchorDriverPose_t::vWorldTranslation"]
        [::std::mem::offset_of!(vr_SpatialAnchorDriverPose_t, vWorldTranslation) - 32usize];
    ["Offset of field: vr_SpatialAnchorDriverPose_t::ulRequiredUniverseId"]
        [::std::mem::offset_of!(vr_SpatialAnchorDriverPose_t, ulRequiredUniverseId) - 56usize];
    ["Offset of field: vr_SpatialAnchorDriverPose_t::fValidDuration"]
        [::std::mem::offset_of!(vr_SpatialAnchorDriverPose_t, fValidDuration) - 64usize];
};
#[repr(C)]
pub struct vr_IVRDriverSpatialAnchors__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_IVRDriverSpatialAnchors {
    pub vtable_: *const vr_IVRDriverSpatialAnchors__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRDriverSpatialAnchors"]
        [::std::mem::size_of::<vr_IVRDriverSpatialAnchors>() - 8usize];
    ["Alignment of vr_IVRDriverSpatialAnchors"]
        [::std::mem::align_of::<vr_IVRDriverSpatialAnchors>() - 8usize];
};
pub const vr_IVRDriverSpatialAnchors_Version: &[u8; 28] = b"IVRDriverSpatialAnchors_001\0";
#[repr(C)]
pub struct vr_IVRIPCResourceManagerClient__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct vr_IVRIPCResourceManagerClient {
    pub vtable_: *const vr_IVRIPCResourceManagerClient__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_IVRIPCResourceManagerClient"]
        [::std::mem::size_of::<vr_IVRIPCResourceManagerClient>() - 8usize];
    ["Alignment of vr_IVRIPCResourceManagerClient"]
        [::std::mem::align_of::<vr_IVRIPCResourceManagerClient>() - 8usize];
};
pub const vr_IVRIPCResourceManagerClient_Version: &[u8; 32] = b"IVRIPCResourceManagerClient_001\0";
extern "C" {
    #[link_name = "\u{1}_ZN2vrL19k_InterfaceVersionsE"]
    pub static vr_k_InterfaceVersions: [*const ::std::os::raw::c_char; 13usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vr_COpenVRDriverContext {
    pub m_propertyHelpers: vr_CVRPropertyHelpers,
    pub m_hiddenAreaHelpers: vr_CVRHiddenAreaHelpers,
    pub m_pVRSettings: *mut vr_IVRSettings,
    pub m_pVRProperties: *mut vr_IVRProperties,
    pub m_pVRServerDriverHost: *mut vr_IVRServerDriverHost,
    pub m_pVRWatchdogHost: *mut vr_IVRWatchdogHost,
    pub m_pVRCompositorDriverHost: *mut vr_IVRCompositorDriverHost,
    pub m_pVRDriverLog: *mut vr_IVRDriverLog,
    pub m_pVRDriverManager: *mut vr_IVRDriverManager,
    pub m_pVRResources: *mut vr_IVRResources,
    pub m_pVRDriverInput: *mut vr_IVRDriverInput,
    pub m_pVRIOBuffer: *mut vr_IVRIOBuffer,
    pub m_pVRDriverSpatialAnchors: *mut vr_IVRDriverSpatialAnchors,
    pub m_pVRIPCResourceManager: *mut vr_IVRIPCResourceManagerClient,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vr_COpenVRDriverContext"]
        [::std::mem::size_of::<vr_COpenVRDriverContext>() - 112usize];
    ["Alignment of vr_COpenVRDriverContext"]
        [::std::mem::align_of::<vr_COpenVRDriverContext>() - 8usize];
    ["Offset of field: vr_COpenVRDriverContext::m_propertyHelpers"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_propertyHelpers) - 0usize];
    ["Offset of field: vr_COpenVRDriverContext::m_hiddenAreaHelpers"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_hiddenAreaHelpers) - 8usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRSettings"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRSettings) - 16usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRProperties"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRProperties) - 24usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRServerDriverHost"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRServerDriverHost) - 32usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRWatchdogHost"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRWatchdogHost) - 40usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRCompositorDriverHost"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRCompositorDriverHost) - 48usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRDriverLog"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRDriverLog) - 56usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRDriverManager"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRDriverManager) - 64usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRResources"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRResources) - 72usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRDriverInput"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRDriverInput) - 80usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRIOBuffer"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRIOBuffer) - 88usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRDriverSpatialAnchors"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRDriverSpatialAnchors) - 96usize];
    ["Offset of field: vr_COpenVRDriverContext::m_pVRIPCResourceManager"]
        [::std::mem::offset_of!(vr_COpenVRDriverContext, m_pVRIPCResourceManager) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    _unused: [u8; 0],
}
pub type std_nullptr_t = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_get_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_byname {
    pub _address: u8,
}
#[repr(C)]
pub struct std_basic_string<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_dataplus: std_basic_string__Alloc_hider,
    pub _M_string_length: std_basic_string_size_type,
    pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
}
pub type std_basic_string__Char_alloc_type = [u8; 0usize];
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = [u8; 0usize];
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = [u8; 0usize];
pub type std_basic_string_difference_type = [u8; 0usize];
pub type std_basic_string_reference = [u8; 0usize];
pub type std_basic_string_const_reference = [u8; 0usize];
pub type std_basic_string_pointer = [u8; 0usize];
pub type std_basic_string_const_pointer = [u8; 0usize];
pub type std_basic_string_iterator = __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
#[repr(C)]
pub struct std_basic_string__Alloc_hider {
    pub _M_p: std_basic_string_pointer,
}
pub const _S_local_capacity: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
pub struct std_basic_string__bindgen_ty_2<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_local_buf: __BindgenUnionField<*mut _CharT>,
    pub _M_allocated_capacity: __BindgenUnionField<std_basic_string_size_type>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
pub type std_string = std_basic_string<::std::os::raw::c_char>;
pub type std_wstring = std_basic_string<u32>;
pub type std_u16string = std_basic_string<u16>;
pub type std_u32string = std_basic_string<u32>;
extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
    pub fn std___throw_bad_exception() -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc() -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
    pub fn std___throw_bad_array_new_length() -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
    pub fn std___throw_bad_cast() -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
    pub fn std___throw_bad_typeid() -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
    pub fn std___throw_logic_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
    pub fn std___throw_domain_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
    pub fn std___throw_invalid_argument(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
    pub fn std___throw_length_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
    pub fn std___throw_out_of_range(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
    pub fn std___throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
    pub fn std___throw_range_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
    pub fn std___throw_overflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
    pub fn std___throw_underflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
    pub fn std___throw_ios_failure(arg1: *const ::std::os::raw::c_char) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
    pub fn std___throw_ios_failure1(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_system_errori"]
    pub fn std___throw_system_error(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_future_errori"]
    pub fn std___throw_future_error(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
    pub fn std___throw_bad_function_call() -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___true_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___true_type"][::std::mem::size_of::<std___true_type>() - 1usize];
    ["Alignment of std___true_type"][::std::mem::align_of::<std___true_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___false_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___false_type"][::std::mem::size_of::<std___false_type>() - 1usize];
    ["Alignment of std___false_type"][::std::mem::align_of::<std___false_type>() - 1usize];
};
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const __value: std___traitor__bindgen_ty_1 = 0;
pub type std___traitor__bindgen_ty_1 = i32;
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const __value: std___are_same__bindgen_ty_1 = 0;
pub type std___are_same__bindgen_ty_1 = i32;
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const __value: std___is_void__bindgen_ty_1 = 0;
pub type std___is_void__bindgen_ty_1 = i32;
pub type std___is_void___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::size_of::<std___is_void>() - 1usize];
    ["Align of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::align_of::<std___is_void>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const __value: std___is_integer__bindgen_ty_1 = 0;
pub type std___is_integer__bindgen_ty_1 = i32;
pub type std___is_integer___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0___int128_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0___int128_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const __value: std___is_floating__bindgen_ty_1 = 0;
pub type std___is_floating__bindgen_ty_1 = i32;
pub type std___is_floating___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const __value: std___is_pointer__bindgen_ty_1 = 0;
pub type std___is_pointer__bindgen_ty_1 = i32;
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const __value: std___is_char__bindgen_ty_1 = 0;
pub type std___is_char__bindgen_ty_1 = i32;
pub type std___is_char___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const __value: std___is_byte__bindgen_ty_1 = 0;
pub type std___is_byte__bindgen_ty_1 = i32;
pub type std___is_byte___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nonvolatile_trivially_copyable {
    pub _address: u8,
}
pub const __value: std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
pub type std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcpyable {
    pub _address: u8,
}
pub const __value: std___memcpyable__bindgen_ty_1 = 0;
pub type std___memcpyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcmpable {
    pub _address: u8,
}
pub const __value: std___memcmpable__bindgen_ty_1 = 0;
pub type std___memcmpable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const __value: std___is_move_iterator__bindgen_ty_1 = 0;
pub type std___is_move_iterator__bindgen_ty_1 = i32;
pub type std___is_move_iterator___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper {
    pub _address: u8,
}
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std_value: _Tp;
}
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___bool_constant = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_identity {
    pub _address: u8,
}
pub type std___type_identity_type<_Type> = _Type;
pub type std___type_identity_t = std___type_identity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___or_ {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___or__open0_close0"]
        [::std::mem::size_of::<std___or_>() - 1usize];
    ["Align of template specialization: std___or__open0_close0"]
        [::std::mem::align_of::<std___or_>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___and__open0_close0"]
        [::std::mem::size_of::<std___and_>() - 1usize];
    ["Align of template specialization: std___and__open0_close0"]
        [::std::mem::align_of::<std___and_>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___success_type {
    pub _address: u8,
}
pub type std___success_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___failure_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___failure_type"][::std::mem::size_of::<std___failure_type>() - 1usize];
    ["Alignment of std___failure_type"][::std::mem::align_of::<std___failure_type>() - 1usize];
};
pub type std___remove_cv_t = std_remove_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_void_helper_open0_void_close0"]
        [::std::mem::size_of::<std___is_void_helper>() - 1usize];
    ["Align of template specialization: std___is_void_helper_open0_void_close0"]
        [::std::mem::align_of::<std___is_void_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integral_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < std___is_integral_helper > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0___int128_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0___int128_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating_point_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0___float128_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0___float128_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_object_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_function_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_null_pointer_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_null_pointer_helper_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std___is_null_pointer_helper>() - 1usize];
    ["Align of template specialization: std___is_null_pointer_helper_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std___is_null_pointer_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
pub type std___is_one_of = std___or_;
pub type std___is_signed_integer = std___is_one_of;
pub type std___is_unsigned_integer = std___is_one_of;
pub type std___is_standard_integer = std___or_;
pub type std___void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_referenceable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_known_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_unknown_bounds {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_destructible_impl"]
        [::std::mem::size_of::<std___do_is_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_destructible_impl"]
        [::std::mem::align_of::<std___do_is_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_destructible_impl {
    pub _address: u8,
}
pub type std___is_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_nt_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_nt_destructible_impl"]
        [::std::mem::size_of::<std___do_is_nt_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_nt_destructible_impl"]
        [::std::mem::align_of::<std___do_is_nt_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_destructible_impl {
    pub _address: u8,
}
pub type std___is_nt_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_constructible_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
pub type std___is_nothrow_constructible_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
pub type std___is_nothrow_assignable_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_implicitly_default_constructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::size_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
    ["Alignment of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::align_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
    pub fn std___do_is_implicitly_default_constructible_impl___test() -> std_false_type;
}
impl std___do_is_implicitly_default_constructible_impl {
    #[inline]
    pub unsafe fn __test() -> std_false_type {
        std___do_is_implicitly_default_constructible_impl___test()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _base: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
pub type std___is_convertible_helper_type = std_is_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
pub type std___is_array_convertible = std_is_convertible;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type = std_add_const;
pub type std_remove_const_t = std_remove_const;
pub type std_remove_volatile_t = std_remove_volatile;
pub type std_remove_cv_t = std_remove_cv;
pub type std_add_const_t = std_add_const;
pub type std_add_volatile_t = std_add_volatile;
pub type std_add_cv_t = std_add_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
pub type std___add_lvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std___add_rvalue_reference_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_remove_reference_t = std_remove_reference;
pub type std_add_lvalue_reference_t = std_add_lvalue_reference;
pub type std_add_rvalue_reference_t = std_add_rvalue_reference;
pub type std___match_cv_qualifiers___match = u8;
pub type std___match_cv_qualifiers___type = std___match_cv_qualifiers___match;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned {
    pub _address: u8,
}
pub type std___make_unsigned___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0___int128_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0___int128_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base__List {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___make_unsigned_selector_base"]
        [::std::mem::size_of::<std___make_unsigned_selector_base>() - 1usize];
    ["Alignment of std___make_unsigned_selector_base"]
        [::std::mem::align_of::<std___make_unsigned_selector_base>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_signed {
    pub _address: u8,
}
pub type std___make_signed___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = u8;
pub type std_make_signed_t = std_make_signed;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
pub type std_remove_extent_t = std_remove_extent;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___remove_pointer_helper {
    pub _address: u8,
}
pub type std___remove_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std___add_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_t = std_remove_pointer;
pub type std_add_pointer_t = std_add_pointer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___aligned_storage_msa___type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std___aligned_storage_msa___type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___aligned_storage_msa___type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___aligned_storage_msa___type"]
        [::std::mem::size_of::<std___aligned_storage_msa___type>() - 8usize];
    ["Alignment of std___aligned_storage_msa___type"]
        [::std::mem::align_of::<std___aligned_storage_msa___type>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std_aligned_storage_type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_aligned_storage_type"]
        [::std::mem::size_of::<std_aligned_storage_type>() - 8usize];
    ["Alignment of std_aligned_storage_type"]
        [::std::mem::align_of::<std_aligned_storage_type>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strictest_alignment {
    pub _address: u8,
}
pub type std_aligned_union___strictest = std___strictest_alignment;
pub type std_aligned_union_type = u8;
extern "C" {
    #[link_name = "\u{1}alignment_value"]
    pub static std_alignment_value: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay___remove_type = std_remove_reference;
pub type std_decay_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strip_reference_wrapper {
    pub _address: u8,
}
pub type std___strip_reference_wrapper___type<_Tp> = _Tp;
pub type std___decay_t = std_decay;
pub type std___decay_and_strip = std___strip_reference_wrapper;
pub type std___enable_if_t = u8;
pub type std__Require = std___enable_if_t;
pub type std___remove_cvref_t = std_remove_cv;
pub type std_conditional_type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_common_type_impl {
    pub _address: u8,
}
pub type std___do_common_type_impl___cond_t<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_common_type_impl"]
        [::std::mem::size_of::<std___do_common_type_impl>() - 1usize];
    ["Alignment of std___do_common_type_impl"]
        [::std::mem::align_of::<std___do_common_type_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_common_type_open0_close0"]
        [::std::mem::size_of::<std_common_type>() - 1usize];
    ["Align of template specialization: std_common_type_open0_close0"]
        [::std::mem::align_of::<std_common_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
pub type std___common_type_impl_type = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_pack {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_fold {
    pub _address: u8,
}
pub type std___underlying_type_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___declval_protector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_ref"][::std::mem::size_of::<std___invoke_memfun_ref>() - 1usize];
    ["Alignment of std___invoke_memfun_ref"]
        [::std::mem::align_of::<std___invoke_memfun_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_deref"]
        [::std::mem::size_of::<std___invoke_memfun_deref>() - 1usize];
    ["Alignment of std___invoke_memfun_deref"]
        [::std::mem::align_of::<std___invoke_memfun_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_ref"][::std::mem::size_of::<std___invoke_memobj_ref>() - 1usize];
    ["Alignment of std___invoke_memobj_ref"]
        [::std::mem::align_of::<std___invoke_memobj_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_deref"]
        [::std::mem::size_of::<std___invoke_memobj_deref>() - 1usize];
    ["Alignment of std___invoke_memobj_deref"]
        [::std::mem::align_of::<std___invoke_memobj_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_other {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_other"][::std::mem::size_of::<std___invoke_other>() - 1usize];
    ["Alignment of std___invoke_other"][::std::mem::align_of::<std___invoke_other>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_success {
    pub _address: u8,
}
pub type std___result_of_success___invoke_type<_Tag> = _Tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_ref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_ref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref {
    pub _address: u8,
}
pub type std___result_of_memfun_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_deref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_deref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref {
    pub _address: u8,
}
pub type std___result_of_memfun_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_ref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_ref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref {
    pub _address: u8,
}
pub type std___result_of_memobj_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_deref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_deref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref {
    pub _address: u8,
}
pub type std___result_of_memobj_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___inv_unwrap {
    pub _address: u8,
}
pub type std___inv_unwrap_type<_Tp> = _Tp;
pub type std___result_of_impl_type = std___failure_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_other_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_other_impl"]
        [::std::mem::size_of::<std___result_of_other_impl>() - 1usize];
    ["Alignment of std___result_of_other_impl"]
        [::std::mem::align_of::<std___result_of_other_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_result {
    pub _address: u8,
}
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_t = u8;
pub type std_decay_t = std_decay;
pub type std_enable_if_t = u8;
pub type std_conditional_t = u8;
pub type std_common_type_t = std_common_type;
pub type std_underlying_type_t = std_underlying_type;
pub type std_result_of_t = std_result_of;
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_value_t = std_false_type;
pub type std___detector_type<_Default> = _Default;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_nothrow_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_impl {
    pub _address: u8,
}
pub type std___is_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::align_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_nothrow_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_nothrow_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_nothrow_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_nothrow_swappable_with_impl"]
        [::std::mem::align_of::<std___swappable_with_details___do_is_nothrow_swappable_with_impl>(
        ) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable_with {
    pub _address: u8,
}
pub type std___is_invocable_impl___nothrow_type = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___call_is_nothrow {
    pub _address: u8,
}
pub type std___call_is_nothrow_ = std___call_is_nothrow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___nonesuchbase {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuchbase"][::std::mem::size_of::<std___nonesuchbase>() - 1usize];
    ["Alignment of std___nonesuchbase"][::std::mem::align_of::<std___nonesuchbase>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuch"][::std::mem::size_of::<std___nonesuch>() - 1usize];
    ["Alignment of std___nonesuch"][::std::mem::align_of::<std___nonesuch>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_if_noexcept_cond {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_piecewise_construct_t"]
        [::std::mem::size_of::<std_piecewise_construct_t>() - 1usize];
    ["Alignment of std_piecewise_construct_t"]
        [::std::mem::align_of::<std_piecewise_construct_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}_ZStL19piecewise_construct"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___pair_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_pair<_T1, _T2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    pub first: _T1,
    pub second: _T2,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_input_iterator_tag"][::std::mem::size_of::<std_input_iterator_tag>() - 1usize];
    ["Alignment of std_input_iterator_tag"]
        [::std::mem::align_of::<std_input_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_output_iterator_tag"][::std::mem::size_of::<std_output_iterator_tag>() - 1usize];
    ["Alignment of std_output_iterator_tag"]
        [::std::mem::align_of::<std_output_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_forward_iterator_tag"]
        [::std::mem::size_of::<std_forward_iterator_tag>() - 1usize];
    ["Alignment of std_forward_iterator_tag"]
        [::std::mem::align_of::<std_forward_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bidirectional_iterator_tag"]
        [::std::mem::size_of::<std_bidirectional_iterator_tag>() - 1usize];
    ["Alignment of std_bidirectional_iterator_tag"]
        [::std::mem::align_of::<std_bidirectional_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_random_access_iterator_tag"]
        [::std::mem::size_of::<std_random_access_iterator_tag>() - 1usize];
    ["Alignment of std_random_access_iterator_tag"]
        [::std::mem::align_of::<std_random_access_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std___iterator_category_t = std_iterator_traits;
pub type std__RequireInputIter = std___enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_random_access_iter {
    pub _address: u8,
}
pub type std___is_random_access_iter__Base = std_is_base_of;
pub const __value: std___is_random_access_iter__bindgen_ty_1 = 0;
pub type std___is_random_access_iter__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_const_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
pub type std___replace_first_arg_t = std___replace_first_arg;
pub type std___make_not_void = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits___difference_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___rebind {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_difference_type = std___detected_or_t;
pub type std_pointer_traits_rebind = std_pointer_traits___rebind;
pub type std___ptr_rebind = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub current: _Iterator,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_front_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
    pub iter: std_insert_iterator__Iter,
}
pub type std_insert_iterator__Iter = [u8; 0usize];
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type std_move_iterator___traits_type = std_iterator_traits;
pub type std_move_iterator___base_ref = std_move_iterator___traits_type;
pub type std_move_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_move_iterator_iterator_category = std_move_iterator___traits_type;
pub type std_move_iterator_value_type = std_move_iterator___traits_type;
pub type std_move_iterator_difference_type = std_move_iterator___traits_type;
pub type std_move_iterator_pointer<_Iterator> = _Iterator;
pub type std_move_iterator_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deque_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___lc_rai {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0"] [:: std :: mem :: size_of :: < std___lc_rai > () - 1usize] ;
    ["Align of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0"] [:: std :: mem :: align_of :: < std___lc_rai > () - 1usize] ;
};
pub type std_streamoff = ::std::os::raw::c_long;
pub type std_streamsize = isize;
#[repr(C)]
#[derive(Debug)]
pub struct std_fpos<_StateT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    pub _M_off: std_streamoff,
    pub _M_state: _StateT,
}
pub type std_streampos = std_fpos<__mbstate_t>;
pub type std_wstreampos = std_fpos<__mbstate_t>;
pub type std_u16streampos = std_fpos<__mbstate_t>;
pub type std_u32streampos = std_fpos<__mbstate_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_exception"][::std::mem::size_of::<std_exception>() - 8usize];
    ["Alignment of std_exception"][::std::mem::align_of::<std_exception>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_alloc"][::std::mem::size_of::<std_bad_alloc>() - 8usize];
    ["Alignment of std_bad_alloc"][::std::mem::align_of::<std_bad_alloc>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_array_new_length"]
        [::std::mem::size_of::<std_bad_array_new_length>() - 8usize];
    ["Alignment of std_bad_array_new_length"]
        [::std::mem::align_of::<std_bad_array_new_length>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(
        this: *mut std_bad_array_new_length,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nothrow_t"][::std::mem::size_of::<std_nothrow_t>() - 1usize];
    ["Alignment of std_nothrow_t"][::std::mem::align_of::<std_nothrow_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
extern "C" {
    #[link_name = "\u{1}_ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
pub type std___allocator_base = __gnu_cxx_new_allocator;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type std___c_locale = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ios {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_streambuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_iostream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_ios = std_basic_ios;
pub type std_streambuf = std_basic_streambuf;
pub type std_istream = std_basic_istream;
pub type std_ostream = std_basic_ostream;
pub type std_iostream = std_basic_iostream;
pub type std_stringbuf = std_basic_stringbuf;
pub type std_istringstream = std_basic_istringstream;
pub type std_ostringstream = std_basic_ostringstream;
pub type std_stringstream = std_basic_stringstream;
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wios = std_basic_ios;
pub type std_wstreambuf = std_basic_streambuf;
pub type std_wistream = std_basic_istream;
pub type std_wostream = std_basic_ostream;
pub type std_wiostream = std_basic_iostream;
pub type std_wstringbuf = std_basic_stringbuf;
pub type std_wistringstream = std_basic_istringstream;
pub type std_wostringstream = std_basic_ostringstream;
pub type std_wstringstream = std_basic_stringstream;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_num_get {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_num_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_put_byname {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_plus_open0_void_close0"]
        [::std::mem::size_of::<std_plus>() - 1usize];
    ["Align of template specialization: std_plus_open0_void_close0"]
        [::std::mem::align_of::<std_plus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_minus_open0_void_close0"]
        [::std::mem::size_of::<std_minus>() - 1usize];
    ["Align of template specialization: std_minus_open0_void_close0"]
        [::std::mem::align_of::<std_minus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::size_of::<std_multiplies>() - 1usize];
    ["Align of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::align_of::<std_multiplies>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_divides_open0_void_close0"]
        [::std::mem::size_of::<std_divides>() - 1usize];
    ["Align of template specialization: std_divides_open0_void_close0"]
        [::std::mem::align_of::<std_divides>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::size_of::<std_modulus>() - 1usize];
    ["Align of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::align_of::<std_modulus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_negate_open0_void_close0"]
        [::std::mem::size_of::<std_negate>() - 1usize];
    ["Align of template specialization: std_negate_open0_void_close0"]
        [::std::mem::align_of::<std_negate>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_not_equal_to>() - 1usize];
    ["Align of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_not_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_open0_void_close0"]
        [::std::mem::size_of::<std_greater>() - 1usize];
    ["Align of template specialization: std_greater_open0_void_close0"]
        [::std::mem::align_of::<std_greater>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::size_of::<std_greater_equal>() - 1usize];
    ["Align of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::align_of::<std_greater_equal>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::size_of::<std_less_equal>() - 1usize];
    ["Align of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::align_of::<std_less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::size_of::<std_logical_and>() - 1usize];
    ["Align of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::align_of::<std_logical_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::size_of::<std_logical_or>() - 1usize];
    ["Align of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::align_of::<std_logical_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::size_of::<std_logical_not>() - 1usize];
    ["Align of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::align_of::<std_logical_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::size_of::<std_bit_and>() - 1usize];
    ["Align of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::align_of::<std_bit_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::size_of::<std_bit_or>() - 1usize];
    ["Align of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::align_of::<std_bit_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::size_of::<std_bit_xor>() - 1usize];
    ["Align of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::align_of::<std_bit_xor>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::size_of::<std_bit_not>() - 1usize];
    ["Align of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::align_of::<std_bit_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_is_transparent {
    pub _address: u8,
}
pub type std___has_is_transparent_t = std___has_is_transparent;
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: [u8; 0usize],
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_E> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
    pub _M_array: std_initializer_list_iterator<_E>,
    pub _M_len: std_initializer_list_size_type,
}
pub type std_initializer_list_value_type<_E> = _E;
pub type std_initializer_list_reference<_E> = *const _E;
pub type std_initializer_list_const_reference<_E> = *const _E;
pub type std_initializer_list_size_type = usize;
pub type std_initializer_list_iterator<_E> = *const _E;
pub type std_initializer_list_const_iterator<_E> = *const _E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_valarray {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = [u8; 0usize];
pub type std___allocator_traits_base___c_pointer = [u8; 0usize];
pub type std___allocator_traits_base___v_pointer = [u8; 0usize];
pub type std___allocator_traits_base___cv_pointer = [u8; 0usize];
pub type std___allocator_traits_base___pocca = [u8; 0usize];
pub type std___allocator_traits_base___pocma = [u8; 0usize];
pub type std___allocator_traits_base___pocs = [u8; 0usize];
pub type std___allocator_traits_base___equal = [u8; 0usize];
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___allocator_traits_base"]
        [::std::mem::size_of::<std___allocator_traits_base>() - 1usize];
    ["Alignment of std___allocator_traits_base"]
        [::std::mem::align_of::<std___allocator_traits_base>() - 1usize];
};
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0"] [:: std :: mem :: size_of :: < std_allocator_traits > () - 1usize] ;
    ["Align of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0"] [:: std :: mem :: align_of :: < std_allocator_traits > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_alloc_insertable_impl {
    pub _base: std_false_type,
}
#[repr(C)]
pub struct std___is_copy_insertable {
    pub _address: u8,
}
#[repr(C)]
pub struct std___is_move_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_allocator {
    pub _base: std_false_type,
}
pub type std__RequireAllocator = u8;
pub type std__RequireNotAllocator = u8;
extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline(
        __in: *mut std_basic_istream,
        __str: *mut std_basic_string<::std::os::raw::c_char>,
        __delim: ::std::os::raw::c_char,
    ) -> *mut std_basic_istream;
}
extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline1(
        __in: *mut std_basic_istream,
        __str: *mut std_basic_string<u32>,
        __delim: u32,
    ) -> *mut std_basic_istream;
}
extern "C" {
    #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
    pub fn std__Hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
    pub fn std__Fnv_hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_base {
    pub _address: u8,
}
pub type std___hash_base_result_type<_Result> = _Result;
pub type std___hash_base_argument_type<_Arg> = _Arg;
#[repr(C)]
#[derive(Debug)]
pub struct std___poison_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0___int128_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0___int128_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Hash_impl"][::std::mem::size_of::<std__Hash_impl>() - 1usize];
    ["Alignment of std__Hash_impl"][::std::mem::align_of::<std__Hash_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fnv_hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fnv_hash_impl"][::std::mem::size_of::<std__Fnv_hash_impl>() - 1usize];
    ["Alignment of std__Fnv_hash_impl"][::std::mem::align_of::<std__Fnv_hash_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_float_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_float_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_fast_hash {
    pub _base: std_true_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: size_of :: < std___is_fast_hash > () - 1usize] ;
    ["Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0"] [:: std :: mem :: align_of :: < std___is_fast_hash > () - 1usize] ;
};
extern "C" {
    #[link_name = "\u{1}npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_bitwise_relocatable {
    pub _address: u8,
}
#[repr(C)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = [u8; 0usize];
pub type std__Vector_base_pointer = [u8; 0usize];
#[repr(C)]
pub struct std__Vector_base__Vector_impl_data {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
#[repr(C)]
pub struct std__Vector_base__Vector_impl {
    pub _base_1: std__Vector_base__Vector_impl_data,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug)]
pub struct std_vector__Temporary_value {
    pub _M_this: *mut std_vector,
    pub __buf: u8,
}
pub type std__Bit_type = ::std::os::raw::c_ulong;
pub const _S_word_bit: std__bindgen_ty_1 = 64;
pub type std__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_reference {
    pub _M_p: *mut std__Bit_type,
    pub _M_mask: std__Bit_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_reference"][::std::mem::size_of::<std__Bit_reference>() - 16usize];
    ["Alignment of std__Bit_reference"][::std::mem::align_of::<std__Bit_reference>() - 8usize];
    ["Offset of field: std__Bit_reference::_M_p"]
        [::std::mem::offset_of!(std__Bit_reference, _M_p) - 0usize];
    ["Offset of field: std__Bit_reference::_M_mask"]
        [::std::mem::offset_of!(std__Bit_reference, _M_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator_base {
    pub _M_p: *mut std__Bit_type,
    pub _M_offset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator_base"][::std::mem::size_of::<std__Bit_iterator_base>() - 16usize];
    ["Alignment of std__Bit_iterator_base"]
        [::std::mem::align_of::<std__Bit_iterator_base>() - 8usize];
    ["Offset of field: std__Bit_iterator_base::_M_p"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_p) - 0usize];
    ["Offset of field: std__Bit_iterator_base::_M_offset"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_iterator_reference = std__Bit_reference;
pub type std__Bit_iterator_pointer = *mut std__Bit_reference;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator"][::std::mem::size_of::<std__Bit_iterator>() - 16usize];
    ["Alignment of std__Bit_iterator"][::std::mem::align_of::<std__Bit_iterator>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_const_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_const_iterator_reference = bool;
pub type std__Bit_const_iterator_const_reference = bool;
pub type std__Bit_const_iterator_pointer = *const bool;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_const_iterator"][::std::mem::size_of::<std__Bit_const_iterator>() - 16usize];
    ["Alignment of std__Bit_const_iterator"]
        [::std::mem::align_of::<std__Bit_const_iterator>() - 8usize];
};
#[repr(C)]
pub struct std__Bvector_base {
    pub _M_impl: std__Bvector_base__Bvector_impl,
}
pub type std__Bvector_base__Bit_alloc_type = [u8; 0usize];
pub type std__Bvector_base__Bit_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_pointer = [u8; 0usize];
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl_data {
    pub _M_start: std__Bit_iterator,
    pub _M_finish: std__Bit_iterator,
    pub _M_end_of_storage: std__Bvector_base__Bit_pointer,
}
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl {
    pub _base_1: std__Bvector_base__Bvector_impl_data,
}
pub type std__Bvector_base_allocator_type<_Alloc> = _Alloc;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type = __gnu_cxx___remove_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0"] [:: std :: mem :: size_of :: < __gnu_cxx___remove_unsigned > () - 1usize] ;
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < __gnu_cxx___remove_unsigned > () - 1usize] ;
};
pub type __gnu_cxx___promote___type = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_2 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_2___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_3 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_3___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___promote_4 {
    pub _address: u8,
}
pub type __gnu_cxx___promote_4___type<_Tp2> = _Tp2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___is_integer_nonstrict {
    pub _address: u8,
}
pub const __width: __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 = 0;
pub type __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_integer {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__min"]
    pub static __gnu_cxx___min: _Value;
}
extern "C" {
    #[link_name = "\u{1}__max"]
    pub static __gnu_cxx___max: _Value;
}
extern "C" {
    #[link_name = "\u{1}__is_signed"]
    pub static __gnu_cxx___is_signed: bool;
}
extern "C" {
    #[link_name = "\u{1}__digits"]
    pub static __gnu_cxx___digits: ::std::os::raw::c_int;
}
pub type __gnu_cxx___int_traits = __gnu_cxx___numeric_traits_integer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_floating {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__max_digits10"]
    pub static __gnu_cxx___max_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__digits10"]
    pub static __gnu_cxx___digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__max_exponent10"]
    pub static __gnu_cxx___max_exponent10: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_val<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_val<_Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_iter<_Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_pred<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_val<_Compare, _Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_comp: _Compare,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_iter<_Compare, _Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_comp: _Compare,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
    pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
    pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx_new_allocator {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_value_type<_Tp> = _Tp;
pub type __gnu_cxx_new_allocator_size_type = usize;
pub type __gnu_cxx_new_allocator_difference_type = isize;
pub type __gnu_cxx_new_allocator_pointer<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_pointer<_Tp> = *const _Tp;
pub type __gnu_cxx_new_allocator_reference<_Tp> = *mut _Tp;
pub type __gnu_cxx_new_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_new_allocator_rebind {
    pub _address: u8,
}
pub type __gnu_cxx_new_allocator_propagate_on_container_move_assignment = std_true_type;
extern "C" {
    #[link_name = "\u{1}__uselocale"]
    pub fn __gnu_cxx___uselocale(arg1: locale_t) -> locale_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_debug__Safe_iterator {
    pub _address: u8,
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
pub type mbstate_t = __mbstate_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u32, __s2: *const u32, __n: usize, __loc: locale_t) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
extern "C" {
    pub fn wcslen(__s: *const u32) -> usize;
}
extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u32, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
}
extern "C" {
    pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32;
}
extern "C" {
    pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64;
}
extern "C" {
    pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64x;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
extern "C" {
    pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> u128;
}
extern "C" {
    pub fn wcstof32_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32;
}
extern "C" {
    pub fn wcstof64_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64;
}
extern "C" {
    pub fn wcstof32x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32x;
}
extern "C" {
    pub fn wcstof64x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64x;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: usize,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws(__ws: *mut u32, __n: ::std::os::raw::c_int, __stream: *mut __FILE) -> *mut u32;
}
extern "C" {
    pub fn fputws(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn fputwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> wint_t;
}
extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputws_unlocked(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 96usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_p_cs_precedes) - 88usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_p_sep_by_space) - 89usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_n_cs_precedes) - 90usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_n_sep_by_space) - 91usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::std::mem::offset_of!(lconv, int_p_sign_posn) - 92usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::std::mem::offset_of!(lconv, int_n_sign_posn) - 93usize];
};
extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub const _ISupper: _bindgen_ty_37 = 256;
pub const _ISlower: _bindgen_ty_37 = 512;
pub const _ISalpha: _bindgen_ty_37 = 1024;
pub const _ISdigit: _bindgen_ty_37 = 2048;
pub const _ISxdigit: _bindgen_ty_37 = 4096;
pub const _ISspace: _bindgen_ty_37 = 8192;
pub const _ISprint: _bindgen_ty_37 = 16384;
pub const _ISgraph: _bindgen_ty_37 = 32768;
pub const _ISblank: _bindgen_ty_37 = 1;
pub const _IScntrl: _bindgen_ty_37 = 2;
pub const _ISpunct: _bindgen_ty_37 = 4;
pub const _ISalnum: _bindgen_ty_37 = 8;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct __cxxabiv1___forced_unwind__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct __cxxabiv1___forced_unwind {
    pub vtable_: *const __cxxabiv1___forced_unwind__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cxxabiv1___forced_unwind"]
        [::std::mem::size_of::<__cxxabiv1___forced_unwind>() - 8usize];
    ["Alignment of __cxxabiv1___forced_unwind"]
        [::std::mem::align_of::<__cxxabiv1___forced_unwind>() - 8usize];
};
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcpu(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timex"][::std::mem::size_of::<timex>() - 208usize];
    ["Alignment of timex"][::std::mem::align_of::<timex>() - 8usize];
    ["Offset of field: timex::modes"][::std::mem::offset_of!(timex, modes) - 0usize];
    ["Offset of field: timex::offset"][::std::mem::offset_of!(timex, offset) - 8usize];
    ["Offset of field: timex::freq"][::std::mem::offset_of!(timex, freq) - 16usize];
    ["Offset of field: timex::maxerror"][::std::mem::offset_of!(timex, maxerror) - 24usize];
    ["Offset of field: timex::esterror"][::std::mem::offset_of!(timex, esterror) - 32usize];
    ["Offset of field: timex::status"][::std::mem::offset_of!(timex, status) - 40usize];
    ["Offset of field: timex::constant"][::std::mem::offset_of!(timex, constant) - 48usize];
    ["Offset of field: timex::precision"][::std::mem::offset_of!(timex, precision) - 56usize];
    ["Offset of field: timex::tolerance"][::std::mem::offset_of!(timex, tolerance) - 64usize];
    ["Offset of field: timex::time"][::std::mem::offset_of!(timex, time) - 72usize];
    ["Offset of field: timex::tick"][::std::mem::offset_of!(timex, tick) - 88usize];
    ["Offset of field: timex::ppsfreq"][::std::mem::offset_of!(timex, ppsfreq) - 96usize];
    ["Offset of field: timex::jitter"][::std::mem::offset_of!(timex, jitter) - 104usize];
    ["Offset of field: timex::shift"][::std::mem::offset_of!(timex, shift) - 112usize];
    ["Offset of field: timex::stabil"][::std::mem::offset_of!(timex, stabil) - 120usize];
    ["Offset of field: timex::jitcnt"][::std::mem::offset_of!(timex, jitcnt) - 128usize];
    ["Offset of field: timex::calcnt"][::std::mem::offset_of!(timex, calcnt) - 136usize];
    ["Offset of field: timex::errcnt"][::std::mem::offset_of!(timex, errcnt) - 144usize];
    ["Offset of field: timex::stbcnt"][::std::mem::offset_of!(timex, stbcnt) - 152usize];
    ["Offset of field: timex::tai"][::std::mem::offset_of!(timex, tai) - 160usize];
};
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_38 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_38 = 1;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_39 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_39 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_39 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_39 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_39 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_39 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_39 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_39 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_39 = 0;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_40 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_40 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_40 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_40 = 1;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_41 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_41 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_41 = 2;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_42 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_42 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_42 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_42 = 0;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_43 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_43 = 1;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_44 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_44 = 1;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_45 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_45 = 1;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_46 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_46 = 1;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_47 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_47 = 1;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_clockjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setsigmask_np(
        __attr: *mut pthread_attr_t,
        sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getsigmask_np(
        __attr: *const pthread_attr_t,
        sigmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_class"][::std::mem::size_of::<__pthread_cleanup_class>() - 24usize];
    ["Alignment of __pthread_cleanup_class"]
        [::std::mem::align_of::<__pthread_cleanup_class>() - 8usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_class::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_type) - 20usize];
};
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock_id: __clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __gthread_t = pthread_t;
pub type __gthread_key_t = pthread_key_t;
pub type __gthread_once_t = pthread_once_t;
pub type __gthread_mutex_t = pthread_mutex_t;
pub type __gthread_recursive_mutex_t = pthread_mutex_t;
pub type __gthread_cond_t = pthread_cond_t;
pub type __gthread_time_t = timespec;
pub type _Atomic_word = ::std::os::raw::c_int;
extern "C" {
    pub static mut __libc_single_threaded: ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type sigset_t = __sigset_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_13 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_14 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_34 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_35 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_36 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_wchar_t_std_char_traits_open2_wchar_t_close2_std_allocator_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char16_t_std_char_traits_open2_char16_t_close2_std_allocator_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u16 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u16 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_open1_char32_t_std_char_traits_open2_char32_t_close2_std_allocator_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string < u32 > > () - 32usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string < u32 > > () - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
pub type iterator = std__Bit_iterator;
pub type size_type = usize;
pub type iterator = std__Bit_iterator;
